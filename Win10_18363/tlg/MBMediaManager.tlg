ProviderNames:
	MBBSettingUX
	MicrosoftWindowsShellNetworkUX
	Microsoft.Windows.Cellcore.MBMediaManager
	TelemetryAssert
	TelemetryAssertDiagTrack



**** Events *****
MBMediaManager::_ProcessInterfaceRemoval Failed to Remove Category(
	GUID Interface GUID,
	INT32 HRESULT
	);

MBMediaManager::_ProcessInterfaceRemoval, Category removed, Fire event for ChangeEventType_Removed(
	GUID Interface GUID
	);

MBMediaManager::_ProcessInterfaceArrival Failed to Create Category(
	GUID Interface GUID,
	INT32 HRESULT
	);

MBMediaManager::_ProcessInterfaceArrival Failed to Add Category(
	GUID Interface GUID,
	INT32 HRESULT
	);

MBMediaManager::_ProcessInterfaceArrival Category added, Fire event for ChangeEventType_Added(
	GUID Interface GUID
	);

MBMediaManager::_ProcessInterfaceArrival. Category already exists. This should not happen. Removing old category(
	GUID Interface GUID,
	INT32 HRESULT
	);

MBMediaManager::GetWwanInterfaceObject WwanQueryInterface failed.(
	INT32 HRESULT
	);

MBMediaManager::GetWwanInterfaceObject WwanOpenHandle failed.(
	INT32 HRESULT
	);

MBMediaManager::_WwanServiceStatusNotification WwanSvc is not started(
	UINT32 Service Notification
	);

MBMediaManager::_WwanServiceStatusNotification WwanSvc has been stopped(
	UINT32 Service Notification
	);

MBMediaManager::WwanServiceStatusNotification _EnumAndCreateCategories failed after notification of running wwanSvc(
	INT32 HRESULT
	);

MBMediaManager::_WwanServiceStatusNotification _StartListeningToWwanRpc failed after notification of running wwanSvc(
	INT32 HRESULT
	);

MBMediaManager::_WwanServiceStatusNotification WwanSvc has started(
	UINT32 Service Notification
	);

MBMediaManager::s_WwanServiceStatusNotification context contains nullptr. Ignore bad notifications(
	VOID
	);

MBMediaManager::_StartListeningToWwanServiceChanges Started listening for WwanSvc changes(
	INT32 HRESULT
	);

MBMediaManager::_StartListeningToWwanServiceChanges QueryServiceStatus failed(
	INT32 HRESULT
	);

MBMediaManager::_StartListeningToWwanServiceChanges SubscribeServiceChangeNotifications failed(
	INT32 HRESULT
	);

MBMediaManager::_StartListeningToWwanServiceChanges OpenService failed(
	INT32 HRESULT
	);

MBMediaManager::_StartListeningToWwanServiceChanges OpenSCManager failed(
	INT32 HRESULT
	);

MBMediaManager::ProcessWwanNotification Ignore notification(
	UINT32 NotificationCode
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeUiccBindingsChanged - Ignore notification, RIL only(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeDMConfigProfileUpdate(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeMultiSIMSlotMapping(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeMultiSIMInfo(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeProvisioningStateChanged(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeNetworkLTEAttachInfo(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeEnterpriseAPNParams(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeHighestConnCategory(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeRoamingPolicyChange(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeDisallowAutoConnectChanged(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeDataEnablementChange(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeScanFailed(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeScanCompleted(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeSetRadioStateFailed(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeRadioState(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeSetRadioStateComplete(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeConnectionIStreamUpdated(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeConnectionIStreamCreated(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypePinActionComplete(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeGetPinInfoComplete(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeRegistered/WwanMsmEventTypeDeregistered(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeSubscriberInfo(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeProfileIStreamUpdated(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeProfileIStreamCreated(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeProfileIStreamDeleted(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeIStreamChanged(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanMsmEventTypeSignalState(
	VOID
	);

MBMediaManager::ProcessWwanNotification. _GetMBCategory failed.(
	UINT32 NotificationCode,
	GUID pNotification->InterfaceGuid,
	INT32 HRESULT
	);

MBMediaManager::ProcessWwanNotification. Notification for unrecognized interface. Ignoring notification(
	UINT32 NotificationCode,
	GUID pNotification->InterfaceGuid
	);

MBMediaManager::ProcessWwanNotification WwanPnpEventTypeInterfaceArrival(
	VOID
	);

MBMediaManager::ProcessWwanNotification WwanPnpEventTypeInterfaceRemoval(
	VOID
	);

MBMediaManager::s_ProcessWwanNotification Notification payload or context contains nullptr. Ignore bad notifications(
	VOID
	);

MBMediaManager::_StopListeningToWwanRpc Failed to Remove all categories(
	INT32 HRESULT,
	UINT32 Category count
	);

MBMediaManager::_StopListeningToWwanRpc _spCategories->get_Size failed(
	INT32 HRESULT
	);

MBMediaManager::_StopListeningToWwanRpc _RemoveCategory failed(
	INT32 HRESULT
	);

MBMediaManager::_StopListeningToWwanRpc spCategory->get_Id failed(
	INT32 HRESULT
	);

MBMediaManager::_StopListeningToWwanRpc _spCategories->GetAt failed(
	INT32 HRESULT
	);

MBMediaManager::_StopListeningToWwanRpc WwanCloseHandle failed(
	INT32 HRESULT
	);

MBMediaManager::_StopListeningToWwanRpc WwanRegisterNotification failed(
	INT32 HRESULT
	);

MBMediaManager::_StopListeningToWwanRpc Listening has already stopped.(
	VOID
	);

MBMediaManager::_StartListeningToWwanRpc WwanRegisterNotification failed(
	INT32 HRESULT
	);

MBMediaManager::_StartListeningToWwanRpc CWwanTranslator has already been started(
	VOID
	);

MBMediaManager::_StartListeningToWwanRpc WwanOpenHandle failed(
	INT32 HRESULT
	);

MBMediaManager::_StartListeningToWwanRpc WwanSvc is not running.(
	VOID
	);

MBMediaManager::_FireCategoryEvent(
	GUID Device GUID,
	UINT32 ChangeEventType
	);

MBMediaManager(
	UNICODESTRING Verbose
	);

MBMediaManager(
	UNICODESTRING Error
	);

MBMediaManager::_CreateUXCategory::Category is already in the list(
	GUID Device GUID
	);

MBMediaManager::_EnumAndCreateCategories WwanEnumerateInterfaces failed(
	UINT32 dwError,
	INT32 HRESULT
	);

MBMediaManager::_EnumAndCreateCategories No Interfaces found.(
	INT32 HRESULT
	);

MBMediaManager::_EnumAndCreateCategories _CreateUXCategory failed.(
	GUID Interface GUID,
	INT32 HRESULT
	);

MBMediaManager::_EnumAndCreateCategories Failed to Add Category(
	GUID Interface GUID,
	INT32 HRESULT
	);

MBMediaManager::_EnumAndCreateCategories Category added, Fire event for ChangeEventType_Added(
	GUID Interface GUID
	);

MBMediaManager::_EnumAndCreateCategories WwanOpenHandle failed.(
	INT32 HRESULT
	);

MBMediaManager::CreateAllCategories, _EnumAndCreateCategories failed.(
	HRESULT HRESULT
	);

MBMediaManager::CreateAllCategories(
	VOID
	);

MBMediaManager::FireCategoryChangeEvent::Fire event for ChangeEventType_Updated(
	GUID Interface GUID
	);

MBMediaManager::OnWCMChange::Invoke MBCategory->SetWcmStatus(
	GUID Interface GUID,
	UINT32 WcmConnectivity,
	UINT32 TetheringMode
	);

MBMediaManager::RuntimeClassInitialize Start(
	VOID
	);

FallbackError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

FallbackError(
	UINT64 PartA_PrivTags,
	SIGNED wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

MbConnectionProfileServer::IsEqual. Profiles are equal(
	VOID
	);

MbConnectionProfileServer::IsEqual. Profiles are not equal(
	UNICODESTRING ProfileName,
	UINT32 new provisionSouce,
	UINT32 old provisionSouce
	);

MbConnectionProfileServer::IsEqual. Profiles are not equal(
	UNICODESTRING ProfileName,
	UINT32 new profileType,
	UINT32 old profileType
	);

MbConnectionProfileServer::IsEqual. Profiles are not equal(
	UNICODESTRING ProfileName,
	UINT32 new activationState,
	UINT32 old activationState
	);

MbConnectionProfileServer::IsEqual. Profiles are not equal(
	UNICODESTRING ProfileName,
	UINT32 new ipType,
	UINT32 old ipType
	);

MbConnectionProfileServer::IsEqual. Profiles are not equal(
	UNICODESTRING ProfileName,
	UINT32 new authProtocol,
	UINT32 old authProtocol
	);

MbConnectionProfileServer::IsEqual. Profiles are not equal(
	UNICODESTRING ProfileName,
	BOOL32 new IsRemoved,
	BOOL32 old IsRemoved
	);

MbConnectionProfileServer::IsEqual. Profiles are not equal(
	UNICODESTRING ProfileName,
	BOOL32 new IsPurchaseProfile,
	BOOL32 old IsPurchaseProfile
	);

MbConnectionProfileServer::IsEqual. Profiles are not equal(
	UNICODESTRING ProfileName,
	BOOL32 new IsEnabled,
	BOOL32 old IsEnabled
	);

MbConnectionProfileServer::IsEqual. Profiles are not equal(
	UNICODESTRING ProfileName,
	BOOL32 new HasPassword,
	BOOL32 old HasPassword
	);

MbConnectionProfileServer::IsEqual. Profiles are not equal(
	UNICODESTRING ProfileName,
	UNICODESTRING new UserName,
	UNICODESTRING old UserName
	);

MbConnectionProfileServer::IsEqual. Profiles are not equal(
	UNICODESTRING ProfileName,
	UNICODESTRING new Iccid,
	UNICODESTRING old Iccid
	);

MbConnectionProfileServer::IsEqual. Profiles are not equal(
	UNICODESTRING ProfileName,
	UNICODESTRING new Apn,
	UNICODESTRING old Apn
	);

MbConnectionProfileServer::IsEqual. Profiles are not equal(
	UNICODESTRING ProfileName,
	UNICODESTRING new Description,
	UNICODESTRING old Description
	);

MbConnectionProfileServer::IsEqual. Profiles are not equal(
	UNICODESTRING new ProfileName,
	UNICODESTRING old ProfileName
	);

MbConnectionProfileServer::RuntimeClassInitialize. Ignore unknown profile creation types(
	UINT32 creationType
	);

MbConnectionProfileServer::RuntimeClassInitialize. wwanProfile is null(
	VOID
	);

MBMediaManager(
	UNICODESTRING Info
	);

MBClient::GetCategoryName::Get default name for adapter.(
	GUID Device GUID
	);

MBMediaManager(
	UNICODESTRING Warning
	);

MBConnectionStatus(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 ConnectionStatus,
	UINT32 BlockReason
	);

MBConnectionStatus(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	UINT32 ConnectionStatus,
	UINT32 BlockReason
	);

MBCategory::_GetMbReadyStateFromWwanReadyState::The corresponding MbCategoryReadyState does not exist, returning MbCategoryReadyState_Failure(
	UINT32 wwanReadyState
	);

MBCategory::_SetPinAction. Failed to Open WwanHandle(
	INT32 HRESULT
	);

MBCategory::_SetPinAction. WwanSetInterface failed(
	INT32 HRESULT
	);

MBCategory::_SetPinAction. WwanSetInterface succeeded(
	VOID
	);

MBCategory::_ProcessDataEnablementObjList. Invalid data enablement objects(
	UINT32 Number of items in data enablement list
	);

MBCategory::_ProcessDataRoamControlObjList. Invalid roaming type or missing roaming control(
	UINT32 Number of items is roaming list
	);

MBCategory::_ProcessDataRoamControlObjList Invalid roaming control state(
	UINT32 roaming control state
	);

MBCategory::_ProcessPinInfo. pinType is Pin1(
	VOID
	);

MBCategory::_ProcessPinInfo. PIN1 already sent to UX(
	VOID
	);

MBCategory::_ProcessPinInfo. Send default PIN1 info to UX(
	VOID
	);

MBCategory::_ProcessPinInfo. Unable to open WwanHandle. Can't requery Pin State.(
	HRESULT HRESULT
	);

MBCategory::_ProcessPinInfo. Never Sent PIN1 to UX: Query for updated Pin State(
	VOID
	);

MBCategory::_ProcessPinInfo. pinType is not Pin1(
	UINT32 pinType
	);

MBCategory::_ProcessPinInfo. pinType is None - PIN is not set(
	VOID
	);

MBCategory::_ProcessPinInfo. Update _pin1PreviousState(
	UINT32 old _pin1PreviousState,
	UINT32 new _pin1PreviousState
	);

MBCategory::_ProcessPinInfo. pinListObject is not ready but continuing anyways(
	HEXINT32 status
	);

MBCategory::_ProcessPinInfo GetWwanInterfaceObject failed.(
	HRESULT HRESULT
	);

MBCategory::tp_CheckChainPinOperation WwanSetInterface failed in a chain pin action. Clear the chain action mode.(
	UINT32 PinOperation,
	HRESULT hr
	);

MBCategory::tp_CheckChainPinOperation. Failed to Open WwanHandle(
	INT32 HRESULT
	);

MBCategory::tp_CheckChainPinOperation. WwanSetInterface failed(
	INT32 HRESULT
	);

MBCategory::tp_CheckChainPinOperation. WwanSetInterface succeeded(
	VOID
	);

MBCategory::tp_CheckChainPinOperation Chain pin action finishes(
	UINT32 pinResult.pinOperation,
	UINT32 pinResult.pinInfo.PinType,
	HEXINT32 pinResult.status
	);

MBCategory::tp_CheckChainPinOperation After a failed EnterPin, the original PIN action information is lost.(
	VOID
	);

MBCategory::tp_CheckChainPinOperation Intermediate EnterPin operation failed(
	HEXINT32 pinResult.status
	);

MBCategory::tp_CheckChainPinOperation After a successful EnterPin, the original PIN action information is lost.(
	VOID
	);

MBCategory::tp_CheckChainPinOperation Re-initiate pin action(
	UINT32 pinOperation
	);

MBCategory::tp_CheckChainPinOperation Got WWAN_STATUS_PIN_REQUIRED and chain pin action mode activated(
	UINT32 pinOperation
	);

MBCategory::tp_ProcessConnectedProfile. UpdateWwanProfile(
	VOID
	);

MBCategory::tp_ProcessConnectedProfile WwanGetProfileIstream unexpected profile size.(
	INT32 HRESULT,
	UINT32 dwDataSize
	);

MBCategory::tp_ProcessConnectedProfile WwanGetProfileIstream failed.(
	INT32 HRESULT
	);

MBCategory::tp_ProcessConnectedProfile WwanOpenHandle failed.(
	INT32 HRESULT
	);

MBCategory::tp_ProcessConnectedProfile.(
	UNICODESTRING connectedProfile,
	UINT32 activationState
	);

MBCategory::tp_GetCategoryDataClassName. _GetDataClassResId returned (
	UINT32 Resource ID
	);

MBCategory::tp_GetCategoryDataClassName::GetDefaultProfileName failed.(
	INT32 HRESULT
	);

MBCategory::tp_GetCategoryDataClassName::GetOperatorDefinedDataClassNameFromCosa failed.(
	INT32 HRESULT
	);

MBCategory::tp_GetCategoryDataClassName:: Failed to initialize string for displaying MBN_DATA_CLASS_CUSTOM.(
	INT32 HRESULT
	);

MBCategory::tp_GetCategoryDataClassName::_GetResourceIdAndMbnDataClassFromWwanDataClass.(
	INT32 HRESULT
	);

MBCategory::tp_GetCategoryDataClassName. Current DataClass is WWAN_DATA_CLASS_NONE.(
	INT32 HRESULT
	);

MBCategory::tp_EnumerateWwanProfileFromService.LTEAttachOnly UpdateWwanProfile(
	VOID
	);

MBCategory::tp_EnumerateWwanProfileFromService. _ReadWwanProfileFromService failed.(
	HRESULT HRESULT,
	GUID _guidInterface,
	UNICODESTRING profileName
	);

MBCategory::tp_EnumerateWwanProfileFromService. Failed to call WwanGetDMConfigProfileList(
	HRESULT HRESULT,
	GUID _guidInterface
	);

MBCategory::EnumerateWwanProfileFromService.InternetOnly. UpdateWwanProfile(
	VOID
	);

MBCategory::tp_EnumerateWwanProfileFromService. Failed to call WwanGetProfileList(
	HRESULT HRESULT,
	GUID _guidInterface
	);

MBCategory::tp_EnumerateWwanProfileFromService. Failed to call WwanOpenHandle(
	HRESULT HRESULT
	);

MBCategory::_CreateDummyWwanProfile. StringCchCopy failed to copy iccid(
	HRESULT HRESULT
	);

MBCategory::_CreateDummyWwanProfile. StringCchCopy failed to copy the file name(
	HRESULT HRESULT
	);

MBCategory::_DeleteWwanProfileFromService. Failed to call WwanDeleteDMConfigProfile(
	UNICODESTRING profileName,
	HRESULT HRESULT
	);

MBCategory::_DeleteWwanProfileFromService. Failed to call WwanDeleteProfile(
	UNICODESTRING profileName,
	HRESULT HRESULT
	);

MBCategory::_DeleteWwanProfileFromService. Failed to call WwanOpenHandle(
	HRESULT HRESULT
	);

MBCategory::_ReadWwanProfileFromService. Unknown profile type(
	UNICODESTRING profileName,
	HRESULT HRESULT
	);

MBCategory::_ReadWwanProfileFromService. Failed to call WwanProfileLoadXml(
	UNICODESTRING profileName,
	HRESULT HRESULT,
	UINT32 invalidReason
	);

MBCategory::_ReadWwanProfileFromService. Failed to call WwanGetDMConfigProfile(
	UNICODESTRING profileName,
	HRESULT HRESULT
	);

MBCategory::_ReadWwanProfileFromService. WwanGetProfileIstream returned bad size.(
	HRESULT HRESULT,
	UNICODESTRING profileName,
	UINT32 dwWwanDataSize
	);

MBCategory::_ReadWwanProfileFromService. Failed to call WwanGetProfileIstream(
	UNICODESTRING profileName,
	HRESULT HRESULT
	);

MBCategory::_ReadWwanProfileFromService. Failed to call WwanOpenHandle(
	HRESULT HRESULT
	);

MBCategory::_SetDmConfigProfileOEMConnectionId: Set custom connection GUID.(
	UNICODESTRING wstrGuid
	);

MBCategory::_GetProfileListFromCache Successfully got cache(
	VOID
	);

MBCategory::_GetProfileListFromCache Failed to get cache(
	HRESULT hr
	);

MBCategory::_GetProfileListFromCache Failed to wait on work result(
	HRESULT hr
	);

MBCategory::_GetProfileListFromCache: Cannot Append to spProfileList.(
	HRESULT hr
	);

MBCategory::_GetProfileListFromCache: MakeAndInitialize AgileVector failed.(
	HRESULT hr
	);

MBCategory::tp_UpdateSignalBars(
	UINT32 old _uSignalBars,
	UINT32 new _uSignalBars
	);

MBCategory::tp_UpdateConnectivityStatus(
	UINT32 old _ConnectivityStatus,
	UINT32 new _ConnectivityStatus
	);

MBCategory::tp_UpdatePinOperation. mayUnlockPin success, forcing PIN state update.(
	VOID
	);

MBCategory::tp_UpdatePinOperation(
	UINT32 old _pinOperation,
	UINT32 new _pinOperation,
	HEXINT32 new _pinOperationStatus,
	HEXINT32 old _pinOperationStatus
	);

MBCategory::tp_UpdatePinOperation Unexpected Pin Operation(
	UINT32 pinResult.pinOperation
	);

MBCategory::tp_UpdatePinInfo, force update(
	VOID
	);

MBCategory::tp_UpdatePinInfo, updated pinType(
	UINT32 old pinType,
	UINT32 new pinType
	);

MBCategory::tp_UpdatePinInfo, updated pinState(
	UINT32 old pinState,
	UINT32 new pinState
	);

MBCategory::tp_UpdatePinInfo, updated pinFormat(
	UINT32 old pinFormat,
	UINT32 new pinFormat
	);

MBCategory::tp_UpdatePinInfo, updated pinEnabled(
	UINT8 old pinEnabled,
	UINT8 new pinEnabled
	);

MBCategory::tp_UpdatePinInfo, updated minLength(
	UINT32 old minLength,
	UINT32 new minLength
	);

MBCategory::tp_UpdatePinInfo, updated maxLength(
	UINT32 old maxLength,
	UINT32 new maxLength
	);

MBCategory::tp_UpdatePinInfo, updated attemptsRemaining(
	UINT32 old attemptsRemaining,
	UINT32 new attemptsRemaining
	);

MBCategory::tp_UpdateCustomDataClassName(
	UNICODESTRING new CustomDataClass,
	UNICODESTRING old CustomDataClass
	);

MBCategory::tp_UpdateDataClassInfo(
	UINT32 old _availableDataClasses,
	UINT32 new _availableDataClasses
	);

MBCategory::tp_UpdateDataClassInfo(
	UINT32 old _currentDataClass,
	UINT32 new _currentDataClass
	);

MBCategory::tp_UpdateWwanProfile: No profile update.(
	UNICODESTRING profileName
	);

MBCategory::tp_UpdateWwanProfile: [InternetProfile] Profile updated.(
	UNICODESTRING profileName,
	UNICODESTRING description,
	UNICODESTRING iccid,
	UNICODESTRING apn,
	UNICODESTRING username,
	BOOL32 hasPassword,
	BOOL32 isAdminEnabled,
	UINT32 authProtocol,
	UINT32 ipType,
	UINT32 activationState,
	BOOL32 isPurchase,
	UINT32 creationType
	);

MBCategory::tp_UpdateWwanProfile: [DmConfigProfile] Profile updated.(
	UNICODESTRING profileName,
	UNICODESTRING description,
	UNICODESTRING iccid,
	UNICODESTRING apn,
	UNICODESTRING username,
	BOOL32 hasPassword,
	BOOL32 isAdminEnabled,
	UINT32 authProtocol,
	UINT32 ipType,
	UINT32 activationState,
	BOOL32 isPurchase,
	UINT32 creationType
	);

MBCategory::tp_UpdateWwanProfile: [InternetProfile] Profile removed.(
	UNICODESTRING profileName
	);

MBCategory::tp_UpdateWwanProfile: [DmConfigProfile] Profile removed.(
	UNICODESTRING profileName
	);

MBCategory::tp_UpdateWwanProfile: Profile to remove not found in the profileMap(
	UNICODESTRING profileName
	);

MBCategory::tp_UpdateWwanProfile: spConnectionProfile is nullptr.(
	VOID
	);

MBCategory::tp_UpdateWwanProfile: MakeAndInitialize<MbConnectionProfileServer> failed.(
	HRESULT hr
	);

MBCategory::tp_UpdateWwanProfile: Profile skipped due to IMSI mismatch.(
	UNICODESTRING profileName,
	UNICODESTRING simIccId,
	UNICODESTRING imsi,
	UNICODESTRING expected imsi
	);

MBCategory::tp_UpdateWwanProfile: IMSI is not ready. Skip the profile that is conditioned on IMSI.(
	UNICODESTRING profileName,
	UNICODESTRING simIccId,
	UNICODESTRING expected imsi
	);

MBCategory::tp_UpdateWwanProfile: Profile skipped due to ICCID mismatch.(
	UNICODESTRING profileName,
	UNICODESTRING simIccId,
	UNICODESTRING expected simIccId
	);

MBCategory::tp_UpdateWwanProfile: ICCID is not ready. Skip all profile information.(
	UNICODESTRING profileName
	);

MBCategory::tp_UpdateProvisioningState(
	BOOLEAN old _fProvisioningOn,
	BOOLEAN new _fProvisioningOn
	);

MBCategory::tp_UpdateAutoconnectEnabled(
	UINT32 old _fAutoconnectEnabled,
	UINT32 new _fAutoconnectEnabled
	);

MBCategory::tp_UpdateDataEnabled(
	UINT32 old _fDataEnabled,
	UINT32 new _fDataEnabled
	);

MBCategory::tp_UpdateRoamingPreference(
	UINT32 old _roamingPreference,
	UINT32 new _roamingPreference
	);

MBCategory::tp_UpdateRegistration. Register Object is not ready.(
	HEXINT32 uStatus
	);

MBCategory::tp_UpdateRegistration, updated ProviderId(
	UNICODESTRING old ProviderId,
	UNICODESTRING new ProviderId
	);

MBCategory::tp_UpdateRegistration, updated ProviderName(
	UNICODESTRING old ProviderName,
	UNICODESTRING new ProviderName
	);

MBCategory::tp_UpdateRegistration, updated registerMode(
	UINT32 old registerMode,
	UINT32 new registerMode
	);

MBCategory::tp_UpdateRegistration. Received WWAN_REGISTER_MODE is not supported.(
	UINT32 Received WWAN_REGISTER_MODE,
	UINT32 Max WWAN_REGISTER_MODE
	);

MBCategory::tp_UpdateRegistration, updated registerState(
	UINT32 old registerState,
	UINT32 new registerState,
	BOOL32 old _fIsRoaming,
	BOOL32 new _fIsRoaming
	);

MBCategory::tp_UpdateRegistration. Received WWAN_REGISTER_STATE is not supported.(
	UINT32 Received WWAN_REGISTER_STATE,
	UINT32 Max WWAN_REGISTER_STATE
	);

MBCategory::tp_UpdateRegistration, updated NetworkError(
	UINT32 old NetworkError,
	UINT32 new NetworkError
	);

MBCategory::tp_UpdateRadioAccessCapabilities(
	UINT32 old _wwanDataClasses,
	UINT32 new _wwanDataClasses
	);

MBCategory::tp_UpdateModemOptionalFeaturesPresent(
	UINT32 old _optionalFeatures,
	UINT32 new _optionalFeatures
	);

MBCategory::tp_UpdateMultiSimSlotMapping(
	UINT32 old _selectedSlot,
	UINT32 new _selectedSlot
	);

MBCategory::tp_UpdateAuxiliaryPreferences(
	UINT32 auxiliaryPreference,
	UINT32 old value,
	UINT32 new value
	);

MBCategory::tp_UpdateReadyState, Clearing MBAE state(
	VOID
	);

MBCategory::tp_UpdateReadyState(
	UINT32 old _readyState,
	UINT32 new _readyState
	);

MBCategory::tp_UpdateReadyState. Failed to do GetWwanInterfaceObject(
	VOID
	);

MBCategory::tp_UpdateRadioState(
	UINT32 old _radioPowerState,
	UINT32 new _radioPowerState
	);

MBCategory::tp_UpdatePhoneNumber(
	UNICODESTRING old _telephoneNumber,
	UNICODESTRING new _telephoneNumber
	);

MBCategory::tp_UpdateSubscriberId. tp_EnumerateWwanProfileFromService failed.(
	HRESULT HRESULT
	);

MBCategory::tp_UpdateSubscriberId(
	UNICODESTRING old _subscriberId,
	UNICODESTRING new _subscriberId
	);

MBCategory::tp_UpdateIccId. Unable to open WwanHandle. Can't requery Pin State.(
	HRESULT HRESULT
	);

MBCategory::tp_UpdateIccId(
	UNICODESTRING old _iccId,
	UNICODESTRING new _iccId
	);

MBCategory::_CleanupConnectionFlow(
	VOID
	);

MBConnectionStatus(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	GUID InterfaceGuid
	);

ActivityStoppedAutomatically(
	VOID
	);

ActivityError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

MBConnectionStatus(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

MBConnectionStatus(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

MBCategory::_CalculateConnectivity(
	UINT32 _readyState,
	UINT32 _activationState,
	UINT32 connectivity,
	UINT32 blockedReason,
	BOOL32 _fIsRoaming,
	BOOL32 isInactiveGSMNetwork,
	BOOL32 _fPersoLocked
	);

MBCategory::_CalculateConnectivity. Unable to open WwanHandle. Can't requery Pin State.(
	HRESULT HRESULT
	);

MBCategory::_CalculateCategoryName::GetCategoryDataClassName(
	GUID Device GUID,
	UNICODESTRING DataClassName
	);

_pMBClient->GetCategoryName(
	GUID Device GUID,
	HRESULT HRESULT
	);

MBCategory::_RefreshCategory()(
	GUID Device Interface,
	UINT32 Connectivity,
	UINT32 BlockedReason,
	BOOLEAN fAutoConnect,
	BOOLEAN IsRoaming,
	UNICODESTRING Name,
	UNICODESTRING BrandingIconPath,
	BOOLEAN _fMbaeAvailable,
	BOOLEAN _fMbaeInstalled,
	BOOLEAN _fMbaeUrlAvailable
	);

MBCategory::_RefreshCategory::GetInterface(
	GUID Device GUID,
	HRESULT HRESULT
	);

MBCategory::tp_RefreshInterface::FireCategoryChangeEvent(
	GUID Device Interface,
	UINT32 Connectivity,
	UINT32 BlockedReason,
	BOOLEAN fAutoConnect,
	BOOLEAN IsRoaming,
	UNICODESTRING Name,
	UNICODESTRING BrandingIconPath
	);

MBCategory::UpdateProfile. Failed to call WwanSetDMConfigProfile(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile. Failed to call WwanSetProfile(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile. Failed to call WwanOpenHandle(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile. Failed to call WwanProfileGenerateXml(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile(
	BOOL32 isAdminEnabled
	);

MBCategory::UpdateProfile. Failed to call get_IsEnabled(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile. Failed to find provisioned profile(
	HRESULT HRESULT,
	UNICODESTRING profileName
	);

MBCategory::UpdateProfile. Failed to call get_ProfileName(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile(
	UINT32 MbIpType,
	UINT32 presenceFlag
	);

MBCategory::UpdateProfile. Failed to call get_IpType(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile(
	UNICODESTRING Username,
	UNICODESTRING Password,
	BOOL32 ignorePassword
	);

MBCategory::UpdateProfile. Failed to call StringCchCopy(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile. Password and username must be in-pair.(
	VOID
	);

MBCategory::UpdateProfile. Failed to call get_ShouldResetPassword(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile. Failed to call get_HasPassword(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile. Failed to call get_Password(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile. Failed to call get_UserName(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile(
	UINT32 MbAuthenticationProtocol
	);

MBCategory::UpdateProfile. Unknown AuthProtocol(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile. Failed to call get_AuthProtocol(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile(
	UNICODESTRING APN
	);

MBCategory::UpdateProfile. Failed to call get_Apn(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile(
	UNICODESTRING simIccID
	);

MBCategory::UpdateProfile. Failed to call get_SimIccid(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile(
	UNICODESTRING description
	);

MBCategory::UpdateProfile. Failed to call get_Description(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile(
	UNICODESTRING profileName
	);

MBCategory::UpdateProfile. CoCreateGuid failed(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile. StringFromGUID2 failed(
	VOID
	);

MBCategory::UpdateProfile. Non user-provisioned profiles cannot be deleted.(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile(
	UINT32 MbConnectionProfileType
	);

MBCategory::UpdateProfile. Failed to call get_ProfileType(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile(
	UINT32 MbConnectionProfileProvisionSource
	);

MBCategory::UpdateProfile. Failed to call get_ProvisionSource(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile(
	BOOL32 isRemoved
	);

MBCategory::UpdateProfile. Failed to call get_IsRemoved(
	HRESULT HRESULT
	);

MBCategory::UpdateProfile ========START========(
	VOID
	);

MBCategory::UpdateProfile ========END========(
	VOID
	);

MBCategory::PostUIPrompt Failed to wait on work result(
	HRESULT hr
	);

MBCategory::PostUIPrompt Event InvokeAll failed(
	HRESULT hr
	);

MBCategory::PostUIPrompt Connection event posted(
	UINT32 promptType,
	UINT8 fChanged,
	HRESULT hr
	);

MBCategory::VerifySimPin Failed to wait on work result(
	HRESULT hr
	);

MBCategory::VerifySimPin(
	UNICODESTRING currentPin,
	UINT32 pinType
	);

MBCategory::VerifySimPin: This adapter is currently in a chained pin action. Refuse any further pin operations.(
	VOID
	);

WwanVerifySimPin(
	BOOL32 simPinVerificationSuccess,
	UINT32 pinType
	);

MBCategory::UnblockSimPin Failed to wait on work result(
	HRESULT hr
	);

MBCategory::UnblockSimPin(
	UNICODESTRING puk,
	UNICODESTRING newPin,
	UINT32 pinType
	);

MBCategory::UnblockSimPin: This adapter is currently in a chained pin action. Refuse any further pin operations.(
	VOID
	);

WwanUnblockSimPin(
	BOOL32 unblockSimPinSuccess,
	UINT32 pinType
	);

MBCategory::ChangeSimPin Failed to wait on work result(
	HRESULT hr
	);

MBCategory::ChangeSimPin(
	UNICODESTRING currentPin,
	UNICODESTRING newPin,
	UINT32 pinType
	);

MBCategory::ChangeSimPin: This adapter is currently in a chained pin action. Refuse any further pin operations.(
	VOID
	);

WwanChangeSimPin(
	BOOL32 simPinChangeSuccess,
	UINT32 pinType
	);

MBCategory::EnableSimPin Failed to wait on work result(
	HRESULT hr
	);

MBCategory::EnableSimPin(
	UNICODESTRING currentPin,
	UINT32 pinType,
	UINT8 enabled
	);

MBCategory::EnableSimPin: This adapter is currently in a chained pin action. Refuse any further pin operations.(
	VOID
	);

WwanEnableSimPin(
	BOOL32 simPinEnableSuccess,
	UINT32 pinType,
	BOOL32 isEnable
	);

MBCategory::get_PinOperation Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_PinInfo Failed to wait on work result(
	HRESULT hr
	);

MBCategory::SetAutoconnectEnabled. Failed to Open WwanHandle(
	HRESULT HRESULT
	);

MBCategory::SetAutoconnectEnabled. WwanSetInterface failed(
	HRESULT HRESULT
	);

MBCategory::SetAutoconnectEnabled. WwanSetInterface succeeded(
	BOOL32 fAutoconnectEnabled
	);

MBCategory::SetInternetDataEnabled. Failed to Open WwanHandle(
	HRESULT HRESULT
	);

MBCategory::SetInternetDataEnabled. WwanSetInterface failed(
	HRESULT HRESULT
	);

MBCategory::SetInternetDataEnabled. WwanSetInterface succeeded(
	BOOL32 fDataEnabled
	);

MBCategory::SetRoamingAllowed. Failed to Open WwanHandle(
	HRESULT HRESULT
	);

MBCategory::SetRoamingAllowed. WwanSetInterface failed(
	HRESULT HRESULT
	);

MBCategory::SetRoamingAllowed. WwanSetInterface succeeded(
	BOOL32 fRoamingAllowed
	);

MBCategory::SetRegistration. Failed to Open WwanHandle(
	HRESULT HRESULT
	);

MBCategory::SetRegistration. WwanRegister failed(
	HRESULT HRESULT
	);

MBCategory::SetRegistration. WwanRegister succeeded(
	VOID
	);

MBCategory::SetRegistration. Invalid cellular class.(
	UINT32 cellularClass
	);

MBCategory::SetRegistration. DeviceObject is not ready(
	UINT32 status
	);

MBCategory::SetRegistration. Failed to do GetWwanInterfaceObject.(
	VOID
	);

MBCategory::SetRegistration. OperatorId must be set when registering in manual mode.(
	VOID
	);

MBCategory::SetRegistration. OperatorId must not be set when registering in automatic mode.(
	VOID
	);

MBCategory::ScanAvailableNetworks. Failed to execute network scan, returning empty list(
	INT32 HRESULT
	);

MBCategory::ScanAvailableNetworks. Failed to Open WwanHandle(
	HRESULT HRESULT
	);

MBCategory::ScanAvailableNetworks. WwanScan failed(
	HRESULT HRESULT
	);

MBCategory::ScanAvailableNetworks. WwanScan succeeded(
	VOID
	);

MBCategory::get_IsProvisioningOn Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_ScannedOperators Failed to get scanned operators(
	HRESULT hr
	);

MBCategory::get_ScannedOperators Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_IsAutoconnectEnabled Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_IsDataEnabled Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_RoamingPreference Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_Registration Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_ActivationState Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_ProviderId Failed to wait on work result(
	HRESULT hr
	);

MBCategory::SetMultiSimActiveSlot. Failed to Open WwanHandle(
	HRESULT HRESULT
	);

MBCategory::SetMultiSimActiveSlot. Failed to do WwanSetInterface with WwanIntfOpcodeMultiSIMSlotMaping(
	HRESULT HRESULT
	);

MBCategory::GetAuxiliaryPreference Failed to wait on work result(
	HRESULT hr
	);

MBCategory::GetAuxiliaryPreference. Requested preference is invalid(
	VOID
	);

MBCategory::GetAuxiliaryPreference. Output pointer is invalid(
	VOID
	);

MBCategory::SetQuickActionState Failed to wait on work result(
	HRESULT hr
	);

MBCategory::GetQuickActionState Failed to wait on work result(
	HRESULT hr
	);

MBCategory::GetQuickActionState(
	BOOLEAN fQuickActionOn,
	UINT8 quickAction change allowed
	);

MBCategory::InvokeMbae Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_NumberOfSlots Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_WwanDataClasses Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_OptionalFeatures Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_SelectedSlot Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_RadioPowerState Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_ReadyState Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_TelephoneNumber Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_SubscriberId Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_ICCID Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_IsAccountExperienceUrlAvailable Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_IsAccountExperienceUrlAvailable Exit(
	BOOLEAN _fMbaeInited,
	BOOLEAN _fMbaeUrlAvailable,
	HRESULT hr
	);

MBCategory::get_IsMbaeInstalled Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_IsMbaeInstalled Exit(
	BOOLEAN _fMbaeInited,
	BOOLEAN _fMbaeInstalled,
	HRESULT hr
	);

MBCategory::get_IsMbaeAvailable Failed to wait on work result(
	HRESULT hr
	);

MBCategory::get_IsMbaeAvailable Exit(
	BOOLEAN _fMbaeInited,
	BOOLEAN _fMbaeAvailable,
	HRESULT hr
	);

MBCategory::ProcessPinActionResult. Wrong data size.(
	UINT32 NotificationSize,
	UINT64 ExpectedSize
	);

MBCategory::ProcessPinActionResult. After failure, use cached state to notify UI(
	UINT32 cached _pin1PreviousState,
	UINT32 received pin1State
	);

MBCategory::ProcessPinActionResult. Result Failed.(
	HEXINT32 status
	);

MBCategory::ProcessPinInfoResult::WwanMsmEventTypeGetPinInfoComplete: Failed(
	HEXINT32 pinResult->uStatus
	);

MBCategory::ProcessPinInfoResult::WwanMsmEventTypeGetPinInfoComplete: Bad Sim(
	VOID
	);

MBCategory::ProcessPinInfoResult::WwanMsmEventTypeGetPinInfoComplete: Succeeded(
	VOID
	);

MBCategory::ProcessPinInfoResult. Wrong data size.(
	UINT32 NotificationSize,
	UINT64 ExpectedSize
	);

MBCategory::ProcessIStreamChanged. Invalid WWAN_PACKET_OBJECT.(
	VOID
	);

MBCategory::ProcessDmConfigProfileUpdated. Datasize exceeds the max profile name length(
	UINT32 DataSize,
	UINT32 ExpectedDataSize
	);

MBCategory::ProcessDmConfigProfileUpdated. Ignore DMConfigProfile update.(
	UINT32 profileUpdateType
	);

MBCategory::ProcessDmConfigProfileUpdated - Updated/Created. UpdateWwanProfile(
	VOID
	);

MBCategory::ProcessDmConfigProfileUpdated. _ReadWwanProfileFromService failed(
	UNICODESTRING profileName,
	HRESULT hr
	);

MBCategory::ProcessDmConfigProfileUpdated - Deleted. UpdateWwanProfile(
	VOID
	);

MBCategory::ProcessDmConfigProfileUpdated. _CreateDummyWwanProfile failed(
	HRESULT hr
	);

MBCategory::ProcessProfileIStreamDeleted. _CreateDummyWwanProfile failed(
	HRESULT hr
	);

MBCategory::ProcessProfileIStreamDeleted. Datasize exceeds the max profile name length(
	UINT32 DataSize,
	INT32 ExpectedMaxDataSize
	);

MBCategory::ProcessProfileIStreamDeleted. UpdateWwanProfile(
	VOID
	);

MBCategory::ProcessProfileIStreamCreatedOrUpdated. Datasize is smaller than expected(
	UINT32 DataSize,
	UINT32 ExpectedMinDataSize
	);

MBCategory::ProcessProfileIStreamCreatedOrUpdated. UpdateWwanProfile(
	VOID
	);

MBCategory::ProcessNetworkScan. Failed to do GetWwanInterfaceObject(
	VOID
	);

MBCategory::ProcessNetworkScan. Failed to do GetWwanInterfaceObject(
	UINT32 ElementType
	);

MBCategory::ProcessNetworkScan. Failed to do StringCchLength(
	VOID
	);

MBCategory::ProcessNetworkScan VisibleProviders is not ready(
	HEXINT32 status
	);

MBCategory::ProcessNetworkScan. Unexpected scanResultType(
	UINT32 scanResultType
	);

MBMediaManager::ProcessProvisioningStateChange. Wrong data size.(
	UINT32 NotificationSize,
	UINT64 ExpectedSize
	);

MBMediaManager::ProcessDisallowAutoConnectChange. Wrong data size.(
	UINT32 NotificationSize,
	UINT64 ExpectedSize
	);

MBMediaManager::ProcessDataEnablementChange. Wrong data size.(
	UINT32 NotificationSize,
	UINT32 ExpectedSize
	);

MBCategory::ProcessDataEnablementChange. Wrong data size.(
	UINT32 NotificationSize,
	UINT64 MinExpectedSize
	);

MBMediaManager::ProcessRoamingPolicyChange. Wrong data size.(
	UINT32 NotificationSize,
	UINT32 ExpectedSize
	);

MBCategory::ProcessRoamingPolicyChange. Wrong data size.(
	UINT32 NotificationSize,
	UINT64 MinExpectedSize
	);

MBMediaManager::ProcessRegisterState. Wrong data size.(
	UINT32 NotificationSize,
	UINT64 MinExpectedSize
	);

MBCategory::ProcessMultiSimSlotMapping. Wrong data size.(
	UINT32 NotificationSize,
	UINT64 MinExpectedSize
	);

ProcessMultiSimInfo(
	UINT32 new numberOfSlots,
	UINT32 old numberOfSlots
	);

MBCategory::ProcessMultiSimInfo. Wrong data size.(
	UINT32 NotificationSize,
	UINT32 ExpectedSize
	);

MBCategory::ProcessMultiSimInfo. Wrong data size.(
	UINT32 NotificationSize,
	UINT64 MinExpectedSize
	);

MBCategory::ProcessConnectionIStream. Wrong data size.(
	UINT32 NotificationSize,
	UINT64 MinExpectedSize
	);

MBCategory::ProcessConnectionIStream.(
	UINT32 activationState,
	UNICODESTRING ConnectedProfile,
	UNICODESTRING Profile,
	BOOLEAN connectionChange
	);

MBCategory::ProcessConnectionIStream Connection change(
	VOID
	);

MBCategory::ProcessConnectionIStream apiType different than connect/disconnect(
	UINT32 Api type
	);

MBCategory::ProcessConnectionIStream WwanApiDisconnect(
	VOID
	);

MBCategory::ProcessConnectionIStream. WwanApiConnect. pConnectCompleteEvent is null(
	VOID
	);

MBCategory::ProcessConnectionIStream WwanApiConnect(
	UINT32 uNwError,
	UINT32 apiId,
	UINT32 apiResult
	);

MBCategory::ProcessSignalChanged. Wrong data size.(
	UINT32 NotificationSize,
	UINT64 ExpectedSize
	);

MBCategory::ProcessRadioState. Wrong data size(
	UINT32 NotificationSize,
	UINT64 ExpectedSize
	);

MBCategory::ProcessEnterpriseApnParams. Wrong data size.(
	UINT32 NotificationSize,
	UINT64 ExpectedSize
	);

MBCategory::ProcessSubscriberInfo. Wrong data size.(
	UINT32 NotificationSize,
	UINT32 ExpectedSize
	);

MBCategory::ProcessSubscriberInfo. Wrong data size.(
	UINT32 NotificationSize,
	INT32 MinExpectedSize
	);

MBCategory::OnProvisioningStateChanged(
	VOID
	);

MBCategory::OnRadioChange(
	VOID
	);

MBCategory::OnRegisterStateChange(
	VOID
	);

MBCategory::OnStatusChange(
	VOID
	);

MBCategory::OnConnectionProfileChange(
	VOID
	);

MBCategory::OnConnectionChange(
	VOID
	);

MBCategory::SetWcmStatus::FireCategoryChangeEvent(
	GUID Device Interface,
	UINT32 Connectivity,
	UINT32 BlockedReason,
	BOOLEAN IsRoaming,
	UNICODESTRING Name,
	UNICODESTRING BrandingIconPath
	);

MBCategory::get_Name Failed to wait on work result(
	HRESULT hr
	);

MBCategory::SetRadioState Failed to wait on work result(
	HRESULT hr
	);

MBCategory::GetRadioState Failed to wait on work result(
	HRESULT hr
	);

MBCategory::Disconnect WwanDisconnect failed.(
	INT32 HRESULT
	);

MBCategory::Disconnect WwanOpenHandle failed.(
	INT32 HRESULT
	);

MBCategory::Disconnect(
	VOID
	);

MBCategory::CancelConnection(
	VOID
	);

MBCategory::ProcessuserInput *Retry* Got a user response from Completion but cannot be cast into ITextInput(
	VOID
	);

MBCategory::ProcessUserInput Unable to init connection flow(
	VOID
	);

MBCategory::tp_GetConnectionIStream. Failed to do WwanQueryInterface with WwanIntfOpcodeConnectionObject(
	HRESULT HRESULT
	);

MBCategory::tp_GetLTEAttachInfo. Failed to do WwanQueryInterface with WwanIntfOpcodeNetworkLTEAttachAPNInfo(
	INT32 HRESULT
	);

MBCategory::tp_GetProvisioningState. Failed to do WwanQueryInterface with WWanIntfOpcodeProvisioningState(
	INT32 HRESULT
	);

MBCategory::tp_GetPinState. Failed to do WwanQueryInterface with WwanIntfOpcodePin(
	HRESULT HRESULT
	);

MBCategory::tp_GetPinState. Query Sent(
	VOID
	);

MBCategory::tp_GetAutoconnectEnabled. Failed to do WwanQueryInterface with WWanIntfOpcodeDisallowAutoConnect(
	INT32 HRESULT
	);

MBCategory::tp_GetDataEnablement. Failed to do WwanQueryInterface with WwanIntfOpcodeDataEnablement(
	INT32 HRESULT
	);

MBCategory::tp_GetDataEnablement. dwDataSize too small.(
	UINT32 dwDataSize
	);

MBCategory::tp_GetRoamingPreference. Failed to do WwanQueryInterface with WwanIntfOpcodeDataRoamControl(
	INT32 HRESULT
	);

MBCategory::tp_GetRoamingPreference. dwDataSize too small.(
	UINT32 dwDataSize
	);

MBCategory::tp_GetModemOptionalFeatures. Failed to do WwanQueryInterface with WwanIntfOpcodeServiceOptionalCapabilities(
	HRESULT HRESULT
	);

MBCategory::tp_GetModemOptionalFeatures. dwDataSize too big or too small.(
	UINT32 dwDataSize
	);

MBCategory::tp_GetMultiSimSlotMapping. Failed to do WwanQueryInterface with WwanIntfOpcodeMultiSIMSlotMaping(
	HRESULT HRESULT
	);

MBCategory::tp_GetMultiSimSlotMapping. dwDataSize too small.(
	UINT32 dwDataSize
	);

MBCategory::tp_GetMultiSimInfo. Failed to do WwanQueryInterface with WwanIntfOpcodeMultiSIMInfo(
	HRESULT HRESULT
	);

MBCategory::tp_GetMultiSimInfo. dwDataSize too small.(
	UINT32 dwDataSize
	);

MBCategory::tp_GetEnterpriseParams. Failed to do WwanQueryInterface with WwanIntfOpcodeEnterpriseAPNParams(
	HRESULT HRESULT
	);

MBCategory::tp_GetEnterpriseParams. Unexpected size for WwanIntfOpcodeEnterpriseAPNParams payload(
	VOID
	);

MBCategory::_InitializeCategory Completed InitCategory(
	VOID
	);

MBCategory::_InitializeCategory. Failed to Open WwanHandle(
	HRESULT HRESULT
	);

MBCategory::_InitializeCategory. Failed to do GetWwanInterfaceObject(
	VOID
	);

MBCategory::_InitializeCategory ReadyObject data updated(
	UINT32 _selectedSlot,
	UNICODESTRING _iccId,
	UNICODESTRING _subscriberId,
	UNICODESTRING _telephoneNumber
	);

MBCategory::_InitializeCategory ContextObject is not ready(
	HEXINT32 status
	);

MBCategory::_InitializeCategory ContextObject data updated(
	UINT32 _activationState
	);

MBCategory::_InitializeCategory PacketObject is not ready(
	HEXINT32 status
	);

MBCategory::_InitializeCategory ReadyObject is not ready(
	HEXINT32 status
	);

MBCategory::_InitializeCategory SignalObject is not ready(
	HEXINT32 status
	);

MBCategory::_InitializeCategory RadioObject is not ready(
	HEXINT32 status
	);

MBCategory::_InitializeCategory DeviceObject is not ready(
	HEXINT32 status
	);

MBCategory::_InitializeCategory Failed to cache the custom data class name(
	UNICODESTRING CustomDataClass
	);

MBCategory::RuntimeClassInitialize, _GetInterfaceName failed(
	HRESULT HRESULT
	);

MBCategory::RuntimeClassInitialize, Initialize failed(
	HRESULT HRESULT
	);

MBCategory::RuntimeClassInitialize(
	UNICODESTRING Category Name,
	GUID Category GUID,
	INT32 Init HRESULT
	);

MBUtil::GetBrandingIconPath Failed to initialize CoTaskMemNativeString spszPath for legacy mode(
	HRESULT HRESULT
	);

MBUtil::GetBrandingIconPath GetHomeProviderIconPath failed(
	HRESULT HRESULT
	);

MBUtil::GetBrandingIconPath MV branding icon path not found, fallback to legacy mode(
	VOID
	);

MBUtil::GetBrandingIconPath Failed to initialize CoTaskMemNativeString spszPath(
	HRESULT HRESULT
	);

MBUtil::GetBrandingIconPath EnvironmentVariableTranslator failed(
	HRESULT HRESULT
	);

MBUtil::GetBrandingIconPath GetStringValue failed(
	HRESULT HRESULT
	);

MBUtil::GetBrandingIconPath ppszPath is invalid or iccid is empty(
	VOID
	);

MBUtil::_GetSignalBarMappingFromRegistry Signal Bar Mapping is not configured correctly(
	HRESULT HRESULT
	);

MBUtil::_GetActiveSignalBarMapping Using Default SignalBarMapping.(
	VOID
	);

MBUtil::_GetActiveSignalBarMapping The configured Bar Mapping for Device is not valid(
	VOID
	);

MBUtil::_GetActiveSignalBarMapping Using perDevice SignalBarMapping.(
	VOID
	);

MBUtil::_GetActiveSignalBarMapping The configured Bar Mapping for ICCID is not valid(
	VOID
	);

MBUtil::_GetActiveSignalBarMapping Using perICCID SignalBarMapping.(
	VOID
	);

MBUtil::_GetActiveSignalBarMapping ICCID is null(
	VOID
	);

Could not map data class(
	UINT32 DataClass,
	INT32 HRESULT
	);

Data class not recognised.(
	UINT32 DataClass
	);

Asking for per-IMSI value of IMSI is not ready yet.(
	VOID
	);

Asking for per-ICCID value but ICCID is not ready yet.(
	VOID
	);

GetStringValue Error(
	UNICODESTRING wszName,
	UINT32 dwReadingRule,
	INT32 HRESULT
	);

GetStringValue Succeeded(
	UINT32 readLocation,
	UNICODESTRING wszName,
	UNICODESTRING wstrValue
	);

GetDwordValue Error(
	UNICODESTRING wszName,
	UINT32 dwReadingRule,
	INT32 HRESULT
	);

GetDwordValue Succeeded(
	UINT32 readLocation,
	UNICODESTRING wszName,
	UINT32 dwValue
	);

MBStateMachine::UpdateConnectionResult(
	INT32 hrResult,
	UINT32 networkError,
	INT32 final _hrResult
	);

MBStateMachine::Connect WwanOpenHandle failed.(
	INT32 HRESULT
	);

MBStateMachine::Connect WwanConnect succeeded(
	UINT32 ulRequestId
	);

MBStateMachine::Connect WwanConnect failed.(
	INT32 HRESULT
	);

MBStateConnecting::_Connect. Connection already completed(
	VOID
	);

MBStateConnecting::_Connect. MakeAndInitialize(
	HRESULT HRESULT
	);

MBStateConnecting::_Connect. _spStateMachine->Connect(
	HRESULT HRESULT
	);

OnEventConnectCompleteFailure(
	HRESULT failureResult
	);

Assert(
	UINT32 assertVersion,
	UINT32 rva,
	UINT32 timestamp,
	UINT32 imageSize,
	ANSISTRING imageName,
	UINT32 count,
	UINT32 totalHits,
	UINT32 ModuleCollection,
	UINT32 GlobalCollection
	);

