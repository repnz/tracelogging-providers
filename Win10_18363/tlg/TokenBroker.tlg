ProviderNames:
	Microsoft.Windows.Security.TokenBroker.BrowserSSO
	Microsoft.Windows.Security.TokenBroker
	Microsoft.Windows.TlgAggregateInternal
	Microsoft.Windows.Security.TokenBinding
	TelemetryAssert
	TelemetryAssertDiagTrack
	Microsoft.Windows.Security.TokenBroker
	Microsoft.Windows.PlatformExtensions



**** Events *****
OnServiceStarting_called(
	VOID
	);

FailureInfo(
	INT32 Error,
	UNICODESTRING DebugString
	);

CreateTokenBrokerInternalStaticsFailed(
	HRESULT HResult
	);

SetInterfaceSecurityFailed(
	HRESULT HResult
	);

Reg_GetPluginPFNResultEvent(
	UNICODESTRING ProviderPfn
	);

Reg_GetPluginPFNEvent(
	UNICODESTRING ProviderId,
	UNICODESTRING Authority,
	UNICODESTRING RealProviderId
	);

Reg_GetWebAccountProviderFromIdAndAuthorityConnectedEvent(
	VOID
	);

Reg_GetWebAccountProviderFromIdAndAuthorityEvent(
	UNICODESTRING ProviderId,
	UNICODESTRING Authority
	);

Reg_CreateProviderFromRegistrationAumIdEvent(
	UNICODESTRING AumId
	);

Reg_CreateProviderFromRegistrationLogoEvent(
	UNICODESTRING Logo
	);

Reg_CreateProviderFromRegistrationCreateEvent(
	UNICODESTRING AccountType,
	UNICODESTRING Purpose
	);

Reg_CreateProviderFromRegistrationMappedEvent(
	UNICODESTRING EffectivePluginId,
	UNICODESTRING EffectiveAuthority
	);

Reg_CreateProviderFromRegistration(
	UNICODESTRING AliasPluginId,
	UNICODESTRING AliasAuthority,
	UINT64 UserContextToken
	);

TokenBrokerInternalCheckApplicationCapability(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalGetApplicationTokenBindingPublicKeyId(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalGetApplicationTokenBindingPublicKey(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalCheckApplicationCapability(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalCheckApplicationCapability(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalGetApplicationTokenBindingPublicKeyId(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalGetApplicationTokenBindingPublicKeyId(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityIntermediateStop(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalGetApplicationTokenBindingPublicKey(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalGetApplicationTokenBindingPublicKey(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityStoppedAutomatically(
	VOID
	);

FallbackError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

FallbackError(
	UINT64 PartA_PrivTags,
	SIGNED wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

ActivityFailure(
	UINT64 PartA_PrivTags,
	HEX wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

ActivityFailure(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

GetApplicationTokenBindingPublicKeyAccessDenied(
	INT32 Error,
	UNICODESTRING ProviderPfn,
	UNICODESTRING TargetUri
	);

GetTokenBindingPublicKeyBytesEvent(
	VOID
	);

GetTokenBindingPublicKeyBytesDetailsEvent(
	UINT32 KeyType,
	UNICODESTRING Domain
	);

GetTokenBindingPublicKeyIdBytesDetailsEvent(
	UINT32 KeyType,
	UNICODESTRING Domain
	);

TBTokenBinding_Initialize_AppContainer(
	VOID
	);

WamProviderRegistrationWaitForRegistration(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING providerId,
	UNICODESTRING authority
	);

WamProviderRegistrationGetAllProviders(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

WamProviderRegistrationInvalidateCache(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

WamProviderRegistrationReportProviderUpdate(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

WamProviderRegistrationGetFromSsoUri(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

WamProviderRegistrationGetFromPfn(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

WamProviderRegistrationGetFromId(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

PackageOperationEvent_RemoveCacheEntryFailed(
	UNICODESTRING PackageFamilyName
	);

PackageOperationEvent(
	INT32 PackageEventType,
	UNICODESTRING PackageFamilyName,
	BOOL32 IsComplete
	);

CWamProviderRegistration_OnPackageOperationType(
	HRESULT hr
	);

CWamProviderRegistration_InitializePackageWatcher(
	HRESULT hr
	);

CWamProviderRegistration_UninitializePackageWatcher(
	HRESULT hr
	);

WamProviderRegistrationWaitForRegistration(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

WamProviderRegistrationWaitForRegistration(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

WamProviderRegistrationInvalidateCache(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

WamProviderRegistrationInvalidateCache(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

WamProviderRegistrationReportProviderUpdate(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

WamProviderRegistrationReportProviderUpdate(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

WamProviderRegistrationGetFromSsoUri(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

WamProviderRegistrationGetFromSsoUri(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

WamProviderRegistrationGetAllProviders(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

WamProviderRegistrationGetAllProviders(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

WamProviderRegistrationGetFromPfn(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

WamProviderRegistrationGetFromPfn(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

CallerIsSystemOrService(
	VOID
	);

WamProviderRegistrationGetFromId(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

WamProviderRegistrationGetFromId(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

CWamProviderRegistrationInternal_GetFromSsoUri_CacheMiss(
	VOID
	);

CWamProviderRegistrationInternal_GetFromPfn_CacheFailed(
	INT32 Error
	);

CWamProviderRegistrationInternal_GetAll_CacheFailed(
	INT32 Error
	);

CWamProviderRegistrationInternal_GetAll_CacheMiss(
	VOID
	);

CWamProviderRegistrationInternal_GetFromPfn_CacheMiss(
	VOID
	);

CWamProviderRegistration_GetFromId_CacheFailed(
	INT32 Error
	);

BuiltInProviderNotFound(
	UNICODESTRING providerId
	);

CWamProviderRegistration_GetFromId_CacheMiss(
	VOID
	);

_GetManagedUrls_Failed(
	INT32 Error
	);

_GetProviderRegistrationInformationFromExtension(
	HRESULT hr
	);

_GetManagedUrls_EmptyManagedUrls(
	VOID
	);

_GetManagedUrls_NoManagedUrls(
	VOID
	);

CWamProvUtils_AppCallbackUriToPfn_AccessDenied(
	VOID
	);

CWamProviderUtilities_ApplicationCallbackUriToPfn(
	HRESULT hr
	);

TokenBrokerNoisyCaller(
	UNICODESTRING caller
	);

TokenBrokerNoisyCallerForFunction(
	ANSISTRING function,
	UNICODESTRING caller
	);

CWamCallerProfiler_ProfileCaller_Failed(
	INT32 HResult
	);

TokenBrokerTotalCalls(
	ANSISTRING function,
	UNICODESTRING caller,
	UINT32 count
	);

TokenBrokerInternalRequestTokenAsync(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 webTokenRequestStatus,
	UINT32 errorCode,
	UINT32 responseCount
	);

TokenBrokerInternalRequestTokenAsync(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	UINT32 webTokenRequestStatus,
	UINT32 errorCode,
	UINT32 responseCount
	);

TokenBrokerInternalRequestTokenAsync(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING callingApp,
	UNICODESTRING serviceName,
	UNICODESTRING providerId,
	UNICODESTRING scope,
	UNICODESTRING clientId,
	UINT32 promptType
	);

TokenBrokerInternalGetTokenSilentlyHelper(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalActivateInstance(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalSetTokenCacheExpirationTime(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalCompleteRequestTokenOperationForComponentUI(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalGetSecureParameters(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalBeginRequestTokenOperationForComponentUI(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalGetContractBroker(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalReportBackgroundCompletion(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalGetUserProfileType(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING extensionPointName,
	UINT32 contextWindowId,
	GUID requestedIid
	);

ActivityError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityStoppedAutomatically(
	VOID
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING extensionPointName
	);

EvaluatingRegistration(
	UNICODESTRING acid,
	BOOLEAN isDefault
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UNICODESTRING implementationAcid
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	UNICODESTRING implementationAcid
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	BOOLEAN wasImplementationReturned,
	BOOLEAN wasRedirectorUsed,
	UNICODESTRING registeredAcid
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	BOOLEAN wasImplementationReturned,
	BOOLEAN wasRedirectorUsed,
	UNICODESTRING registeredAcid
	);

TokenBrokerInternalGetUserProfileType(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalGetUserProfileType(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalSetTokenCacheExpirationTime(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalSetTokenCacheExpirationTime(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerOperationActionResponseStatus(
	INT32 responseStatus,
	UINT32 responseError
	);

RequestTokenCallerInfo(
	UNICODESTRING callingApp,
	UNICODESTRING callerProcessName,
	BOOL32 callerIsAppContainer,
	UINT64 UserContextToken
	);

TokenBrokerInternalCompleteRequestTokenOperationForComponentUI(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalCompleteRequestTokenOperationForComponentUI(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalBeginRequestTokenOperationForComponentUI(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalBeginRequestTokenOperationForComponentUI(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerOperationActionInfo(
	UNICODESTRING webAccountProviderId,
	UNICODESTRING authority,
	UNICODESTRING webAccountProviderPfn,
	UNICODESTRING callingApp
	);

InitializedActivatedEventArgs(
	VOID
	);

TokenBrokerOperationActionStop(
	INT32 HResult
	);

TokenBrokerOperationActionStart(
	VOID
	);

TokenBrokerInternalRequestTokenAsync(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

TokenBrokerInternalRequestTokenAsync(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityStoppedAutomatically(
	VOID
	);

TokenBrokerDismissUIFailed(
	HRESULT hret
	);

TokenBrokerOperationActionActivatePlugin(
	VOID
	);

TokenBrokerInternalActivateInstance(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalActivateInstance(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalGetContractBroker(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalGetContractBroker(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetTokenSilentlyResponseStatus(
	INT32 responseStatus,
	UINT32 responseError
	);

GetTokenSilentlyPluginProviderNotFound(
	VOID
	);

TokenBrokerInternalGetTokenSilentlyHelper(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalGetTokenSilentlyHelper(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetTokenSilentlyInfo(
	INT32 HResult,
	UNICODESTRING webAccountProviderId,
	UNICODESTRING authority,
	UNICODESTRING webAccountProviderPfn,
	UNICODESTRING callingApp,
	UNICODESTRING callerProcessName,
	BOOL32 callerIsAppContainer,
	UINT64 UserContextToken,
	UINT64 DurationMs,
	GUID taskId,
	BOOL32 spuriousActivation,
	UINT32 taskState,
	UINT32 taskErrorReason
	);

EnforceEdpForAad(
	INT32 EnforcementLevel,
	UNICODESTRING AppId,
	INT32 AppType,
	INT32 HResult,
	UINT32 dwResult,
	INT32 PolicyResult
	);

BITask_Failure(
	GUID WorkItemId,
	UINT32 TaskState,
	UINT32 Reason
	);

Waiting for the Operation to complete Failed(
	INT32 Error
	);

BITask_Timeout(
	GUID WorkItemId,
	INT32 LatchReason
	);

callerprocess handle is invalid, can not launch background task.(
	VOID
	);

ActivateSilentlyAndGetBufferLaunchBackgroundTask(
	VOID
	);

ActivateSilentlyAndGetBufferHandleValueEvent(
	HEXINT64 Handle
	);

CallerIdentity_GetSinglePackageFullNameFromPackageFamilyName_Failed(
	HRESULT Result
	);

Packaged into the Secure Contract Broker Store(
	VOID
	);

TokenBrokerInternalGetSecureParameters(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalGetSecureParameters(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalReportBackgroundCompletion(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalReportBackgroundCompletion(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ScopedSwitchContextInitError(
	INT32 Error
	);

ScopedSwitchContextDestructorError(
	INT32 Error
	);

InvalidCallerWindow(
	UINT64 PartA_PrivTags,
	UNICODESTRING BadWindowType,
	UNICODESTRING callingApp,
	UNICODESTRING callerProcessName,
	BOOL32 callerIsAppContainer
	);

TokenBrokerInternalInvokePluginToAddAccountForWindowWithProperties(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalInvokeToCleanupDeletedAccountWithError(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalGetWebAccountMapResultForAccounts(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalInvokePluginToManageAccountForWindow(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalCompareAccounts(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalCompareLinkedAccounts(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalIsShowProviderInSelectionUi(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalSetWebAccountEnumerableState(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalGetAccountProviderPicture(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalGetAccountPicture(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalInvokePluginToAddAccount(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalDeleteAccount(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalSignOutAccountFromCaller(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalInvokePluginToManageAccount(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalFindAllAccountProviders(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalFindAllPerUserAndPerAppAccounts(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalFindAllAccounts(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalFindAccountForProvider(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalFindAccountForApp(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalFindAccount(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

InvokePluginToAddAccountAsyncProviderID(
	UNICODESTRING ProviderID
	);

TokenBrokerInternalInvokePluginToAddAccountForWindowWithProperties(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalInvokePluginToAddAccountForWindowWithProperties(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalInvokeToCleanupDeletedAccountWithError(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalInvokeToCleanupDeletedAccountWithError(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalGetWebAccountMapResultForAccounts(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalGetWebAccountMapResultForAccounts(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

InvokePluginToManageAccountAsyncProviderID(
	UNICODESTRING ProviderID
	);

TokenBrokerInternalInvokePluginToManageAccountForWindow(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalInvokePluginToManageAccountForWindow(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

InvokeToSignOutAccountStop(
	INT32 HResult
	);

InvokeToSignOutAccountStart(
	VOID
	);

InvokeToCleanupDeletedAccount_ProviderError(
	UINT32 Error,
	UNICODESTRING ErrorMessage
	);

InvokeToCleanupDeletedAccount_Success(
	VOID
	);

TokenBrokerDismissUIFailed(
	HRESULT hr
	);

InvokeToAddAccountActionProviderID(
	UNICODESTRING ProviderID
	);

InvokeToManageAccountActionProviderID(
	UNICODESTRING ProviderID
	);

TokenBrokerInternalCompareAccounts(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalCompareAccounts(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalCompareLinkedAccounts(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalCompareLinkedAccounts(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalIsShowProviderInSelectionUi(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalIsShowProviderInSelectionUi(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

SetWebAccountEnumerableState_EnumerationNotSupported(
	UNICODESTRING ProviderPfn
	);

TokenBrokerInternalSetWebAccountEnumerableState(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalSetWebAccountEnumerableState(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalGetAccountProviderPicture(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalGetAccountProviderPicture(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalGetAccountPicture(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalGetAccountPicture(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalInvokePluginToAddAccount(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalInvokePluginToAddAccount(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalDeleteAccount(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalDeleteAccount(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

SignOutAccountFromCaller_CallerInfo(
	UNICODESTRING CallerPfn,
	UNICODESTRING CallerCallbackUri
	);

TokenBrokerInternalSignOutAccountFromCaller(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalSignOutAccountFromCaller(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalInvokePluginToManageAccount(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalInvokePluginToManageAccount(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalFindAllAccountProviders(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalFindAllAccountProviders(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

FindAllPerUserAndPerAppAccountsAsync(
	UNICODESTRING callingApp,
	UNICODESTRING callerProcessName,
	BOOL32 callerIsAppContainer
	);

TokenBrokerInternalFindAllPerUserAndPerAppAccounts(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalFindAllPerUserAndPerAppAccounts(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

CallerIsDSMA(
	VOID
	);

FindAllAccountsAsyncInfo(
	UNICODESTRING callingApp,
	UNICODESTRING callerProcessName,
	BOOL32 callerIsAppContainer
	);

TokenBrokerInternalFindAllAccounts(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalFindAllAccounts(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalFindAccountForProvider(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalFindAccountForProvider(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalFindAccountForApp(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalFindAccountForApp(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalFindAccount(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalFindAccount(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

CTokenBrokerInternalFactoryFindAccountTlg(
	UINT64 PartA_PrivTags,
	NULL Count,
	NULL DurationMin(ms),
	NULL DurationMax(ms),
	NULL DurationSum(ms)
	);

TokenBrokerInternalCreateResultForExtension(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalCreateResultForExtension(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalCreateResultForExtension(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalGetDefaultSignInAccount(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function,
	UNICODESTRING providerId,
	UNICODESTRING authority
	);

TokenBrokerInternalGetDefaultSignInAccount(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	UNICODESTRING providerId,
	UNICODESTRING authority
	);

TokenBrokerInternalGetWebAccountProviderGuid(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING providerId,
	UNICODESTRING callingApp,
	UNICODESTRING serviceName
	);

TokenBrokerInternalInvokePluginToGetSignInAccount(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING providerId,
	UNICODESTRING callingApp,
	UNICODESTRING serviceName
	);

TokenBrokerInternalSetDefaultSignInAccount(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING providerId,
	UNICODESTRING callingApp,
	UNICODESTRING serviceName
	);

TokenBrokerInternalGetDefaultSignInAccount(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UINT32 userContextToken,
	UNICODESTRING callingApp,
	UNICODESTRING serviceName
	);

TokenBrokerInternalClearDefaultSignInAccountRegistryIfNeeded(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalGetDefaultSignInAccountChangeHint(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

TokenBrokerInternalClearDefaultSignInAccount(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

ClearDefaultSignInAccountRegistryIfNeeded_NoMatch(
	VOID
	);

ClearDefaultSignInAccountRegistryIfNeeded_Match(
	VOID
	);

ClearDefaultSignInAccountRegistryIfNeeded_Current(
	UNICODESTRING providerId,
	UNICODESTRING accountId
	);

ClearDefaultSignInAccountRegistryIfNeededParams(
	UNICODESTRING providerPfn,
	UNICODESTRING accountId
	);

TokenBrokerInternalClearDefaultSignInAccountRegistryIfNeeded(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalClearDefaultSignInAccountRegistryIfNeeded(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalGetWebAccountProviderGuid(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalGetWebAccountProviderGuid(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

InvokePluginToGetSignInAccount_ReturnedAccountData(
	UNICODESTRING providerId,
	UNICODESTRING accountId
	);

TokenBrokerInternalInvokePluginToGetSignInAccount(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalInvokePluginToGetSignInAccount(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalGetDefaultSignInAccountChangeHint(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalGetDefaultSignInAccountChangeHint(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalClearDefaultSignInAccount(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalClearDefaultSignInAccount(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalSetDefaultSignInAccount(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalSetDefaultSignInAccount(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TokenBrokerInternalGetDefaultSignInAccount(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TokenBrokerInternalGetDefaultSignInAccount(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetCookiesSilentlyAccessDenied(
	INT32 Error,
	UNICODESTRING ProviderPfn,
	UNICODESTRING TargetUri
	);

CTokenBrokerInternalFactoryGetCookiesSilently(
	INT32 HResult,
	UNICODESTRING providerPfn
	);

CPushCookiesToBrowserDoWork_CSMODE(
	BOOL32 RunningInCSMode
	);

CPushCookiesToBrowserDoWork(
	INT32 HResult,
	UNICODESTRING URL,
	UNICODESTRING requestId,
	BOOL32 RunningInCSMode
	);

PushCookiesAsyncAccessDenied(
	INT32 Error,
	UNICODESTRING ProviderPfn,
	UNICODESTRING TargetUri
	);

CTokenBrokerInternalFactoryPullCookiesAsync(
	INT32 HResult,
	UNICODESTRING CallerPfn,
	UNICODESTRING Uri,
	UNICODESTRING requestId,
	UINT32 Stage
	);

CTokenBrokerInternalFactoryPushCookiesAsync(
	INT32 HResult,
	UNICODESTRING providerPfn,
	UNICODESTRING Uri,
	UNICODESTRING requestId
	);

PushCookiesAsync(
	HRESULT hr
	);

ValidateProviderNotRegisteredEvent(
	INT32 Error,
	UNICODESTRING Message
	);

CTokenBrokerInternalWnfEventCallbackErrorEvent(
	INT32 Error,
	UNICODESTRING Message
	);

CTokenBrokerInternalWnfEventCallbackDetailsEvent(
	INT32 EventType,
	UNICODESTRING accountId,
	UNICODESTRING providerId,
	UNICODESTRING providerAuthority
	);

CTokenBrokerInternalWnfEventCallbackEvent(
	VOID
	);

NotifyDefaultSignInAccountChanged(
	INT32 WinRT event result,
	NTSTATUS SEB event result
	);

AccountEventPublisherNotAccountOwnerEvent(
	INT32 Error
	);

TokenBrokerInternalNotifyAccountDetailsEvent(
	INT32 EventType,
	UNICODESTRING ProviderId,
	UNICODESTRING ProviderAuthority,
	UNICODESTRING AccountId
	);

TokenBrokerInternalNotifyAccountAppContainerCallerEvent(
	VOID
	);

TokenBrokerInternalNotifyAccountEvent(
	VOID
	);

PublishTokenBrokerInternalEventFailed(
	INT32 Error
	);

GetWebAccountMapForPerAppEmptyEvent(
	VOID
	);

AddWebAccount_ScopeMismatch(
	INT32 CurrentScope,
	INT32 NewScope
	);

AddWebAccount_AccountExists(
	UNICODESTRING AccountId
	);

AddWebAccountStop(
	INT32 HResult
	);

AddWebAccount(
	INT32 HResult,
	UNICODESTRING webAccountProviderId,
	UNICODESTRING authority,
	UNICODESTRING webAccountProviderPfn,
	UNICODESTRING callingApp,
	UNICODESTRING callerProcessName,
	BOOL32 callerIsAppContainer,
	UINT64 UserContextToken,
	NULL AccountId,
	NULL PerUserAccountId,
	UINT64 DurationMs
	);

AddWebAccountStart(
	VOID
	);

AccountManagerOperation(
	UINT64 PartA_PrivTags,
	ANSISTRING EventName,
	INT32 HResult,
	UNICODESTRING AccountId,
	UNICODESTRING webAccountProviderId,
	UNICODESTRING webAccountProviderPfn,
	UNICODESTRING callingApp,
	UNICODESTRING callerProcessName,
	BOOL32 callerIsAppContainer,
	UINT64 UserContextToken,
	UINT64 DurationMs
	);

CWamObjectStore_ClearEntry(
	HRESULT hr
	);

CWamObjectStore_SetEntry(
	HRESULT hr
	);

WamObjectStoreImplementation_ClearEntry(
	HRESULT hr
	);

CWamObjectStore_GetEntry(
	HRESULT hr
	);

WamObjectStoreImplementation_SetEntry(
	HRESULT hr
	);

WamObjectStoreImplementation_GetEntry(
	HRESULT hr
	);

CWamObjectStoreManager_DeleteStore(
	HRESULT hr
	);

ClearWamObjectStoreBySessionId_Error(
	INT32 Error
	);

CWamObjectStoreManager_GetStore(
	HRESULT hr
	);

WamObjectStoreManagerImplementation_InternalGetEntry(
	HRESULT hr
	);

WamObjectStoreManagerImplementation_GetUniqueUserCollection(
	HRESULT hr
	);

WamObjectStoreManagerImplementation_DeleteEntriesBySessionId(
	HRESULT hr
	);

WamObjectStoreManagerImplementation_DeleteEntry(
	HRESULT hr
	);

WamObjectStoreManagerImplementation_GetEntry(
	HRESULT hr
	);

PluginManagerIsUriUsageAllowedDenied(
	INT32 Error
	);

PluginManagerIsUriUsageAllowedUri(
	UINT32 Usage,
	UNICODESTRING Uri
	);

Reg_GetPluginPackageFullNameResultEvent(
	UNICODESTRING PluginPackageFullName
	);

Reg_GetPluginPackageFullNameEvent(
	UNICODESTRING PluginPfn
	);

Reg_GetSsoUris_Provider(
	VOID
	);

Reg_GetAllPluginsEvent(
	VOID
	);

Reg_GetAllPluginsCountEvent(
	UINT32 numberOfRegistrations
	);

Reg_GetPluginEntryPointResultEvent(
	UNICODESTRING BG Entry Point
	);

Reg_ConvertPluginPFNToPluginIdResultEvent(
	UNICODESTRING Logo
	);

Reg_GetPluginEntryPointEvent(
	UNICODESTRING PluginPfn
	);

Reg_GetDefaultAccountLogoEvent(
	UNICODESTRING ProviderId,
	UNICODESTRING Authority,
	UNICODESTRING RealProviderId
	);

Reg_ConvertPluginPFNToPluginIdEvent(
	UNICODESTRING PluginPfn
	);

Reg_ConvertPluginPFNToPluginIdResultEvent(
	UNICODESTRING PluginId
	);

ProviderRegistrationCache_RemoveRegistrationInformation(
	INT32 HResult,
	UNICODESTRING ProviderPfn
	);

ProviderRegistrationCache_Flush(
	VOID
	);

ProviderRegistrationCache_FlushAndPause(
	VOID
	);

ProviderRegistrationCache_Refresh_CacheUpdated(
	VOID
	);

ProviderRegistrationCache_Refresh_CacheDisabled(
	VOID
	);

PackageWatcherEventFailed(
	HRESULT hr
	);

WNFEventCallBack_InvalidCallBackContext(
	VOID
	);

BI_TaskFinalEvent(
	UINT64 PartA_PrivTags,
	UNICODESTRING StateName,
	GUID WorkItemId
	);

UnregisterSession Failed(
	INT32 Error
	);

SetEventFailed(
	GUID guidWorkItemId,
	UNICODESTRING StateName,
	INT32 Error
	);

BITaskStateUpdate(
	UNICODESTRING Status,
	GUID Status_InstanceItemId,
	GUID Current_WorkItemId
	);

BI_TaskCancelled(
	UINT64 PartA_PrivTags,
	GUID WorkItemId,
	INT32 CancelReason,
	UINT64 durationMs
	);

DeleteAccountOperationWorkerDetailsEvent(
	UNICODESTRING AccountId,
	UINT32 AccountScope,
	UNICODESTRING PluginPfn
	);

CInvokeToDeleteAccountActionDoWork(
	INT32 HResult,
	INT32 HResultPlugin,
	UNICODESTRING providerPfn,
	UNICODESTRING ProviderID,
	UINT64 durationMs
	);

FindAllProvidersOperationWorkerNumberOfPluginsEvent(
	UINT32 PluginCount
	);

FindAllSystemAccountsOperationWorkerNumberOfAccountsEvent(
	UINT32 AccountCount,
	UNICODESTRING PluginPfn
	);

FindAllSystemAccountsOperationWorkerNumberOfPluginsEvent(
	UINT32 PluginCount
	);

FindAllSystemAccountsOperationWorkerNextPluginEvent(
	UNICODESTRING PluginPfn
	);

SetDefaultAccountInitializationCompleteInReg_OpenKeyFailure(
	HRESULT Error,
	ANSISTRING Message
	);

GetWebAccountProviderAndGuidFromLSA_LsaGetSSOAccountType(
	INT32 ssoAccountType
	);

ClearDefaultSignInAccountInfoInTokenBrokerReg_PreviousDefaultAccount(
	UNICODESTRING OldAccountId,
	UNICODESTRING OldProviderId
	);

PrimeTokenBrokerOnFirstInvokation_AlreadyPrimed(
	ANSISTRING Message,
	INT32 isInitialized
	);

GetRegistryValue_GetBufferSizeFailure(
	INT32 Error,
	UNICODESTRING valueName,
	ANSISTRING Message
	);

SetDefaultSignInAccountInfoInTokenBrokerReg_PreviousDefaultAccount(
	UNICODESTRING OldAccountId,
	UNICODESTRING OldProviderId
	);

SetDefaultSignInAccountInfoInTokenBrokerReg_SetAccountFailure(
	INT32 Error,
	ANSISTRING Message
	);

ClearDefaultSignInAccountInfoInTokenBrokerReg_StillConnected(
	ANSISTRING Message,
	INT32 ssoAccountType
	);

UpdateDefaultAccountChangeHintRegKey_RegSetValueEx(
	INT32 Error
	);

TrySignalDefaultAccountChangedEvent(
	VOID
	);

GetDefaultSignInAccountChangeHint_RegGetValueFailure(
	INT32 Error
	);

ClearDefaultSignInAccountInfoInTokenBrokerReg_DeleteAccountFailure(
	INT32 Error,
	ANSISTRING Message
	);

SetDefaultSignInAccountInfoInTokenBrokerReg_GetActivationFactory(
	INT32 Error
	);

SetDefaultSignInAccountInfoInTokenBrokerReg_NotificationFailed(
	INT32 Error,
	ANSISTRING Message
	);

ClearDefaultSignInAccountInfoInTokenBrokerReg_NotificationFailed(
	INT32 Error,
	ANSISTRING Message
	);

SetDefaultSignInAccountInfoInTokenBrokerReg_FindAccountFailure(
	INT32 Error,
	UNICODESTRING AccountId
	);

TrySignalDefaultAccountChangedEvent_ErrorCase(
	INT32 Error,
	INT32 SignalAccountChangeEventOnly,
	UNICODESTRING AccountId,
	UNICODESTRING ProviderId
	);

SetDefaultSignInAccountInfoInTokenBrokerReg_AccessError(
	INT32 Error,
	ANSISTRING Message,
	UNICODESTRING providerId
	);

PrimeTokenBrokerOnFirstInvokation_BlockOnCompleteFailed(
	HRESULT hr,
	ANSISTRING Message
	);

PrimeTokenBrokerOnFirstInvokation_FailedCreatingStatic(
	HRESULT hr,
	ANSISTRING Message
	);

SetDefaultSignInAccountInfoInTokenBrokerReg_OpenKeyFailure(
	INT32 Error,
	ANSISTRING Message
	);

ClearDefaultSignInAccountInfoInTokenBrokerReg_DeleteProviderFailure(
	INT32 Error,
	ANSISTRING Message
	);

PrimeTokenBrokeRunOnceCallbackInfo(
	ANSISTRING message,
	INT32 HResult
	);

SetDefaultSignInAccountInfoInTokenBrokerReg_SetProviderFailure(
	INT32 Error,
	ANSISTRING Message
	);

IsAadDefaultProvider(
	INT32 Error,
	ANSISTRING Message
	);

GetWebAccountProviderIdAndGuidFromLSA_OtherType(
	INT32 Error,
	ANSISTRING Message,
	INT32 ssoAccountType
	);

ClearDefaultSignInAccountInfoInTokenBrokerReg_OpenKeyFailure(
	INT32 Error,
	ANSISTRING Message
	);

SetDefaultSignInAccountInfoInTokenBrokerReg_NewDefaultAccount(
	UNICODESTRING NewAccountId,
	UNICODESTRING NewProviderId
	);

GetDefaultSignInAccountInfoFromTokenBrokerReg_UnknownProvider(
	ANSISTRING Message,
	UNICODESTRING tempWebAccountProviderIdRef
	);

SetDefaultAccountInitializationCompleteInReg_SetIsConnectedFailure(
	HRESULT Error,
	ANSISTRING Message
	);

GetWebAccountProviderIdAndGuidFromLSA_SSOMaybeEnabledViaDomainConnect(
	INT32 Error
	);

GetWebAccountProviderIdAndGuidFromLSA(
	INT32 Error,
	ANSISTRING Message
	);

GetWebAccountProviderIdAndGuidFromLSA_SSOEnabled(
	INT32 Error,
	ANSISTRING Message,
	GUID Guid
	);

IsCurrentUserAad_LsaGetSSOAccountType(
	INT32 ssoAccountType
	);

ClearDefaultSignInAccountInfoInTokenBrokerReg(
	INT32 Error,
	ANSISTRING Message
	);

GetWebAccountProviderIdAndGuidFromLSA_SSOUnknown_NotMSA(
	INT32 Error
	);

PrimeTokenBrokerOnFirstInvokation_GetDefaultFailed(
	HRESULT hr,
	ANSISTRING Message
	);

ClearDefaultSignInAccountInfoInTokenBrokerReg_LsaGetSSOAccountType(
	INT32 ssoAccountType
	);

IsCallerWin32OrFirstPartyPlugin(
	BOOL32 result
	);

GetRegistryValue_FillBufferFailure(
	INT32 Error,
	UNICODESTRING valueName,
	ANSISTRING Message
	);

InvokePluginToGetSignInAccountMSA(
	HRESULT hr,
	ANSISTRING Message
	);

GetDefaultSignInAccountOperation_FoundAadWhenIsNOTAadConnected(
	HRESULT Error
	);

GetDefaultSignInAccountOperation_CouldNotFindProviderId(
	INT32 Error,
	ANSISTRING Message
	);

GetDefaultSignInAccountOperation_FoundMsaWhenIsAadConnected(
	HRESULT Error
	);

GetDefaultSignInAccountOperation_InvokePluginFailure(
	INT32 Error,
	ANSISTRING Message
	);

SetDefaultSignInAccountAction_InvokePluginFailure(
	INT32 Error,
	ANSISTRING Message
	);

CGetDefaultSignInAccountOperationDoWorkAfterInvokePlugin(
	UNICODESTRING providerId,
	GUID webAccountProviderGuid
	);

SetDefaultSignInAccount_AadBlocked(
	INT32 Error
	);

NoPlugInForConnectedAccount(
	VOID
	);

GetDefaultSignInAccountOperation_RegistryResults(
	ANSISTRING Message,
	UNICODESTRING webAccountId,
	UNICODESTRING webAccountProviderId,
	GUID webAccountProviderGuid
	);

NoConnectedAccount(
	VOID
	);

GetDefaultSignInAccountOperation_StaleRegistry(
	VOID
	);

GetDefaultSignInAccountOperation_BadUserContext(
	BOOL32 IsDefaultAccount
	);

GetDefaultSignInAccountAgg(
	UINT64 PartA_PrivTags,
	NULL Count,
	NULL ElapsedTimeSum(ms),
	INT32 HResult,
	UNICODESTRING ProviderId,
	GUID ProviderGuid,
	UNICODESTRING CallingApp,
	UNICODESTRING ServiceName,
	UNICODESTRING CodePath
	);

GetDefaultSignInAccountOperation_InvokePluginPath(
	INT32 Error,
	ANSISTRING Message
	);

GetDefaultSignInAccountOperation_FailedClearStaleRegistry(
	INT32 Error
	);

CallerContext_CaptureCallerIdentityFailed(
	HRESULT hr
	);

CallerContext_Initialize_Failed(
	INT32 HResult,
	UNICODESTRING CallerPFN,
	UNICODESTRING CallerImageName
	);

CallerContext_GetImageName_Failed(
	INT32 HResult
	);

CallerContext_GetPfn_Failed(
	INT32 HResult
	);

TlgAggregateSummary(
	GUID Provider,
	UINT64 NumFlushes,
	UINT64 MaxEntriesStored,
	UINT64 TotalEntriesFlushed,
	UINT32 MaxEntriesFlushed,
	UINT32 MinEntriesFlushed,
	UINT32 NumBucketLimitReached,
	UINT32 NumAllocationFailures,
	UINT32 NumLargeEventFailures
	);

TBDeleteBinding(
	UINT8 majorVersion,
	UINT8 minorVersion,
	UNICODESTRING targetURL,
	UINT32 secStatus
	);

TBDeleteBinding(
	UINT8 majorVersion,
	UINT8 minorVersion,
	NULL targetURL,
	UINT32 secStatus
	);

Assert(
	UINT32 assertVersion,
	UINT32 rva,
	UINT32 timestamp,
	UINT32 imageSize,
	ANSISTRING imageName,
	UINT32 count,
	UINT32 totalHits,
	UINT32 ModuleCollection,
	UINT32 GlobalCollection
	);

ValidateAppCallBackUriNoHostEvent(
	INT32 Error,
	UNICODESTRING Message
	);

ValidateAppCallBackUriNotSidEvent(
	INT32 Error,
	UNICODESTRING Host,
	UNICODESTRING Message
	);

ValidateAppCallBackUriNoSchemeEvent(
	INT32 Error,
	UNICODESTRING Message
	);

ValidateAppCallBackUriInvalidSchemeEvent(
	INT32 Error,
	UNICODESTRING Scheme,
	UNICODESTRING Message
	);

ValidatePropertyBagNextPropertyEvent(
	UNICODESTRING PropertyName,
	UNICODESTRING PropertyValue
	);

ValidatePropertyBagNextPropertyInvalidKeyEvent(
	INT32 Error
	);

ValidatePropertyBagNextPropertyInvalidValueEvent(
	INT32 Error
	);

ValidatePropertyBagEvent(
	VOID
	);

AddWebTokenResponsesToCache_SetCachedTokenResponses_Success(
	BINARY Entry Index
	);

AddWebTokenResponsesToCache_SetCachedTokenResponses_Failure(
	HRESULT hr
	);

AddWebTokenResponsesToCache(
	ANSISTRING Message
	);

AddWebTokenResponsesToCache_SkipDefWABBridge(
	VOID
	);

AddWebTokenResponsesToCache(
	ANSISTRING Message,
	INT32 WebTokenRequestStatus
	);

AddWebTokenResponsesToCache - invalid parameter(
	HEXINT64 request,
	HEXINT64 appPfn,
	HEXINT64 requestId
	);

SerializeResponses_ResponseToken(
	UINT32 ResponseIndex,
	BOOLEAN IsTokenPresent
	);

SerializeResponses_Account(
	UINT32 ResponseIndex,
	UNICODESTRING AppAccountId
	);

SerializeResponses_Start(
	UINT32 LookupContext,
	UNICODESTRING PFN,
	UINT32 Status,
	BOOLEAN IsErrorProvided
	);

SerializeResponses_NumberOfResponses(
	UINT32 Count
	);

DeSerializeWebTokenRequsetResultOperationParamsFromValueSet Start(
	VOID
	);

WebTokenRequestDeseriazlieFailedEvent(
	INT32 Error
	);

NoWebAccountsToDeseriazlieEvent(
	VOID
	);

WebAccountsDeseriazlieFailedEvent(
	INT32 Error
	);

SerializeWebTokenRequestToValueSet Start(
	VOID
	);

SerializeWebTokenRequsetResultOperationParamsToValueSet Start(
	VOID
	);

WebTokenRequestSeriazlieFailedEvent(
	INT32 Error
	);

WebProviderTokenRequestGetApplicationTokenBindingKey(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

WebProviderTokenRequestGetApplicationTokenBindingKey(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

WebProviderTokenRequestGetApplicationTokenBindingKeyId(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

WebProviderTokenRequestGetApplicationTokenBindingKeyId(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

WebProviderTokenRequestCheckApplicationForCapability(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function,
	BOOL32 hasCapability
	);

WebProviderTokenRequestCheckApplicationForCapability(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	BOOL32 hasCapability
	);

WebProviderTokenRequestCheckApplicationForCapability(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING capability
	);

WebProviderTokenRequestGetApplicationTokenBindingKeyId(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

WebProviderTokenRequestGetApplicationTokenBindingKey(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

WebTokenRequestResultInvalidateCache(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

GetApplicationTokenBindingKeyIdAsyncCallDetails(
	UNICODESTRING ProviderId,
	UNICODESTRING Authority,
	UNICODESTRING CallbackUri,
	UNICODESTRING TargetUri,
	UNICODESTRING TargetDomain,
	INT32 KeyType,
	UINT64 BindingCtx
	);

GetApplicationTokenBindingKeyAsyncCallDetails(
	UNICODESTRING ProviderId,
	UNICODESTRING Authority,
	UNICODESTRING CallbackUri,
	UNICODESTRING TargetUri,
	UNICODESTRING TargetDomain,
	INT32 KeyType,
	UINT64 BindingCtx
	);

WebProviderTokenRequestCheckApplicationForCapability(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

WebProviderTokenRequestCheckApplicationForCapability(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

WebTokenRequestResultInvalidateCache(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

WebTokenRequestResultInvalidateCache(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

CWebAccountProviderAddAccountOperation ReportCompleted(
	VOID
	);

CWebAccountProviderManageAccountOperation ReportCompleted(
	VOID
	);

WebAccountProviderOperationBase_get_Kind(
	INT32 Option
	);

TokenBrokerWaitPluginRespond(
	VOID
	);

LaunchPushCookieProcessForEdgeParentAcTokenIsNullError(
	UINT32 dwError,
	UNICODESTRING browserProfile,
	UNICODESTRING requestId
	);

LaunchPushCookieProcessAtLowILResult(
	UINT32 dwError,
	UNICODESTRING codePath,
	UNICODESTRING url
	);

EdgeSid_null_token(
	UINT32 LastError
	);

LaunchPushCookieProcessForEdgeResult(
	UINT32 dwError,
	UNICODESTRING codePath,
	UNICODESTRING requestId
	);

CreateEnvironmentBlock_Failed(
	UINT32 LastError
	);

LaunchPushCookieProcessForEdgeError(
	UINT32 dwError,
	UNICODESTRING browserProfile,
	UNICODESTRING requestId
	);

GetAppContainerFolderPath_Failed(
	UINT32 LastError
	);

Sha1HashStringArgsTypeEvent(
	INT32 Error
	);

Sha256HashStringArgsTypeEvent(
	INT32 Error
	);

GetStreamFromFile_FileTooLarge(
	INT32 Error,
	ANSISTRING Message,
	UNICODESTRING ObjectFilePath
	);

ReadAccountPictureData_FlushAsync(
	ANSISTRING Message
	);

WriteBytesToStream_FlushAsync(
	ANSISTRING Message
	);

EnsurePackageIsRegisteredByFamilyNameForUserAsync_Succeeded(
	UNICODESTRING pfn
	);

TbEnsureMUMAPfnIsRegisteredForUser_Succeeded(
	VOID
	);

EnsurePackageRegisteredForMultiUserSession_Succeeded(
	UNICODESTRING pfn
	);

SetTokenCacheExpirationTime_Failed(
	HRESULT hr
	);

ClearCachedTokenResponsesForAccount_EntryError(
	INT32 Error
	);

GlobalCacheExpirationRegistry_FailedToSendEvent(
	HRESULT hr
	);

DeleteCacheEntryIfAccountMatch(
	VOID
	);

IsAccountIdMatch_Details(
	BOOL32 isMatch,
	UNICODESTRING AccountId
	);

IsAccountIdMatch_NoAccountIds(
	VOID
	);

ClearCachedTokenResponsesForAccount_AccountId(
	UNICODESTRING accountId.GetRawBuffer(0)
	);

ClearCachedTokenResponsesForAccount_ProviderPfn(
	UNICODESTRING providerPfn.GetRawBuffer(0)
	);

ClearCachedTokenResponsesForAccount(
	VOID
	);

IsAccountIdMatch(
	VOID
	);

IsProviderMatch_Details(
	BOOL32 IsMatch,
	UNICODESTRING ProviderPfn
	);

IsProviderMatch(
	VOID
	);

SetCachedTokenResponses_RequestLogging(
	INT32 Error,
	ANSISTRING Message
	);

GetAllAccountsFromResponses_Responses(
	UINT32 numberOfResponses
	);

GetAllAccountsFromResponses_Status(
	UINT32 Status
	);

GetAllAccountsFromResponses(
	VOID
	);

GetAllAccountsFromResponses_NextAccount(
	UNICODESTRING nextAccountId
	);

AddAccountIdsPropertyToCacheEntry_NumberOfAccounts(
	UINT32 NumberOfAccounts
	);

AddAccountIdsPropertyToCacheEntry(
	VOID
	);

AddAccountIdsPropertyToCacheEntry_NextAccount(
	UNICODESTRING AccountId
	);

AddProviderPropertyToCacheEntry(
	VOID
	);

CreateRequestHash_UserContext_Event(
	VOID
	);

SetCachedTokenResponses_Disabled(
	ANSISTRING Message
	);

SetCachedTokenResponses(
	UNICODESTRING appPfn,
	UNICODESTRING requestScope,
	HEXINT64 webTokenRequest,
	HEXINT64 accountIdHints,
	INT32 requestStatus,
	INT64 expirationTime,
	HEXINT64 resultBuffer,
	HEXINT64 requestBuffer,
	HEXINT64 requestId
	);

SetCachedTokenResponses_EmptyResultBuffer(
	INT32 Error
	);

SetCachedTokenResponses_ExpiredToken(
	INT32 Error,
	INT64 ExpirationTime,
	INT64 CurrentTime
	);

GetWebAccountMapForPerUserEmptyEvent(
	VOID
	);

GetWebAccountMapForPerUserEvent(
	VOID
	);

ClearWebAccountMapSkipUpdateEvent(
	VOID
	);

ClearWebAccountMapEvent(
	VOID
	);

SetWebAccountMapEvent(
	VOID
	);

SetWebAccountEnumerableStateSkipUpdateEvent(
	INT32 EnumerableState
	);

SetWebAccountEnumerableStateEvent(
	VOID
	);

SetWebAccountScopeEventDetailsEvent(
	INT32 Scope,
	UNICODESTRING ProviderPfn,
	UNICODESTRING Account Id
	);

GetWebAccountMapForPerAppEvent(
	VOID
	);

SetWebAccountMapEventDetailsEvent(
	UNICODESTRING perUserId,
	UNICODESTRING ProviderPfn,
	UNICODESTRING Account Id
	);

SetWebAccountMapSkipUpdateEvent(
	UNICODESTRING perUserId
	);

SetWebAccountScopeSkipUpdateEvent(
	INT32 Scope
	);

SetWebAccountScopeEvent(
	VOID
	);

GetWebAccountClientViewsEvent(
	VOID
	);

SetWebAccountClientViewEventEvent(
	VOID
	);

GetWebAccountClientViewSkipUpdateEvent(
	VOID
	);

SetWebAccountClientViewEvent(
	NULL AccountId,
	NULL PerUserAccountId,
	UNICODESTRING AppPfn,
	UNICODESTRING ProviderPfn
	);

ClearWebAccountClientViewEvent(
	VOID
	);

ClearWebAccountClientViewEvent(
	NULL AccountId,
	NULL PerUserAccountId,
	UNICODESTRING AppPfn,
	UNICODESTRING ProviderPfn
	);

ClearWebAccountClientViewImplEvent(
	VOID
	);

GetAllProviderAccountsFromDataStoreEvent(
	UNICODESTRING ProviderPfn
	);

ClearAccountPictureInDataStoreEvent(
	VOID
	);

SetAccountPictureInDataStoreEvent(
	VOID
	);

GetAccountPictureFromDataStoreAccessCheckEvent(
	ANSISTRING Message
	);

SetWebAccountClientViewEventImpl(
	UNICODESTRING PairwiseIdSourceString,
	BOOL32 PropertiesViewAllowed
	);

UpdateAccountSystemOnlyData_UserSidToUserContextConversionFailed(
	HRESULT Result,
	UNICODESTRING AccountUserSid
	);

GetAllProviderAccountsFromDataStoreAccountCreateFailedEvent(
	INT32 Error,
	UNICODESTRING AccountHexId,
	UNICODESTRING ProviderPfn
	);

GetAllProviderAccountsFromDataStoreAccountsCountEvent(
	UINT64 NumberOfAccounts
	);

UpdateAccountDataInDataStore_NoNeedToUpdateEvent(
	VOID
	);

UpdateAccountDataInDataStoreEvent(
	VOID
	);

IsAccountNeedUpdateEvent_PropertiesMismatchEvent(
	VOID
	);

IsAccountNeedUpdateEvent_NameMismatchEvent(
	VOID
	);

GetAccountPictureFromDataStoreEvent(
	VOID
	);

DeleteAccountFromDataStore_FailedClearDefault(
	INT32 Error
	);

IsAccountNeedUpdateEvent(
	VOID
	);

CreateAccountInDataStoreEvent(
	VOID
	);

TrySignalAccountEventFailure(
	INT32 Error,
	UNICODESTRING AccountId,
	UNICODESTRING ProviderPfn
	);

DeleteAccountPictureDataWithSize(
	ANSISTRING Message,
	UINT32 Object Type
	);

UpdateAccountRevisionNumber(
	UNICODESTRING ProviderPfn,
	UNICODESTRING Account Id,
	UNICODESTRING Old Revision Number,
	UNICODESTRING New Revision Number
	);

TrySignalAccountEvent(
	VOID
	);

SerializeAccountNextPropertyEvent(
	UNICODESTRING PropertyName,
	UNICODESTRING PropertyValue
	);

InitializeAccountFromDataStoreRealIdAccessCheckEvent(
	INT32 Error
	);

InitializeAccountFromDataStoreEvent_BadSaltEvent(
	INT32 Error
	);

InitializeAccountFromDataStore_InvalidUserContext(
	UNICODESTRING AccountUserSid,
	UINT64 AccountUserContext,
	UINT64 ProviderUserContext
	);

SerializeAccounNoPropertiesEvent(
	VOID
	);

SerializeAccountEvent(
	UNICODESTRING AccountId,
	UNICODESTRING ProviderPfn,
	UNICODESTRING AccountName
	);

InitializeAccountFromDataStoreAccessCheckEvent(
	BOOL32 PropertyViewAllowed
	);

InitializeAccountFromDataStoreEvent_InvalidTypeEvent(
	INT32 Error,
	ANSISTRING Message,
	UINT32 static_cast<UINT32>(jsonReader.GetType())
	);

InitializeAccountFromDataStoreEvent_DeleteFailedEvent(
	INT32 Error
	);

InitializeAccountFromDataStoreEvent_CorruptedEvent(
	VOID
	);

InitializeAccountFromDataStoreEvent_IdsMismatchEvent(
	INT32 Error,
	UNICODESTRING AccountId,
	UNICODESTRING ProviderPfn
	);

InitializeAccountFromDataStoreEvent(
	UNICODESTRING AccountId,
	UINT32 Flags,
	UNICODESTRING ProviderPfn,
	UNICODESTRING AppPfn
	);

GetRealIdFromPairwiseIdEvent(
	UNICODESTRING PairwiseId,
	UNICODESTRING ProviderPfn,
	UNICODESTRING AppPfn
	);

GetPairwiseIdFromRealIdEvent(
	UNICODESTRING RealId,
	UNICODESTRING ProviderPfn,
	UNICODESTRING AppPfn
	);

GetRealIdFromPairwiseId_GetAccountIdSaltAndStringIdFailedEvent(
	INT32 Error,
	UNICODESTRING AccountHexId,
	UNICODESTRING ProviderPfn
	);

GetRealIdFromPairwiseIdAgg(
	UINT64 PartA_PrivTags,
	NULL Count,
	UINT64 NumberOfAccounts
	);

AccountSystemOnlyInfo_InitializeFromAccountDetailsEvent(
	UNICODESTRING RealId,
	UNICODESTRING ProviderPfn
	);

AccountSystemOnlyInfo_InitializeFromAccountEvent(
	VOID
	);

InitializeFromAccountId_InvalidTypeEvent(
	INT32 Error,
	ANSISTRING Message,
	UINT32 static_cast<UINT32>(jsonReader.GetType())
	);

CalculatePairwiseIdEvent(
	UNICODESTRING RealAccountId,
	UNICODESTRING ProviderPfn,
	UNICODESTRING AppPfn
	);

CalculatePairwiseIdInvalidArgsEvent(
	INT32 Error
	);

AccountSystemOnlyInfo_InitializeFromAccountId(
	UNICODESTRING AccountId,
	UNICODESTRING ProviderPfn
	);

TBStoredObjectWithCacheDeleteEvent_Failed(
	INT32 HResult
	);

TBStoredObjectWithCacheWriteBytes_ClearCacheEntry_Failed(
	INT32 HResult
	);

TBStoredObjectWithCacheDelete_ClearAllObjectsCacheEntry_Failed(
	INT32 HResult
	);

TBStoredObjectWithCacheDeleteEvent(
	UNICODESTRING CacheKey
	);

TBStoredObjectWithCacheReadBytesEvent(
	UNICODESTRING CacheKey
	);

TBStoredObjectWithCacheReadBytesEvent_Failed(
	INT32 HResult
	);

TBStoredObjectWithCacheWriteBytesToCacheEvent(
	UNICODESTRING CacheKey
	);

TBStoredObjectWithCacheWriteBytesToCache_Failed(
	INT32 HResult
	);

TBStoredObjectWithCacheWriteBytesEvent(
	UNICODESTRING CacheKey
	);

TBStoredObjectWithCacheWriteBytesEvent_Failed(
	INT32 HResult
	);

TBStoredObjectReadBytesFromCacheCacheTooLargeEvent(
	UNICODESTRING CacheKey
	);

TBStoredObjectWithCacheReadBytesFromCacheEvent(
	UNICODESTRING CacheKey
	);

TBStoredObjectWithCacheReadBytesFromCache_Failed(
	INT32 HResult
	);

TBStoredObjectGetAllObjectIdsFromCacheFoundEvent(
	UNICODESTRING ObjectId,
	UNICODESTRING OwnerPfn,
	UNICODESTRING CacheKey
	);

TBStoredObjectWithCacheReadAllObjectIdsForTypeFromCacheEvent(
	INT32 ObjectType,
	UNICODESTRING OwnerPfn
	);

TBStoredObjectWithCacheWriteAllObjectIdsForTypeToCacheEvent(
	INT32 ObjectType,
	UNICODESTRING OwnerPfn
	);

TBStoredObjectWithCacheWriteAllObjectIdsForTypeToCache_Failed(
	INT32 HResult,
	INT32 ObjectType,
	UNICODESTRING OwnerPfn
	);

TBStoredObjectWithCacheGetAllObjectIdsForTypeEvent(
	INT32 ObjectType,
	UNICODESTRING OwnerPfn
	);

TBStoredObjectWithCacheGetAllObjectIdsForTypeEvent_Failed(
	INT32 HResult,
	INT32 ObjectType,
	UNICODESTRING OwnerPfn
	);

TBStoredObjectOpenFileRetryEvent(
	UINT32 RetryCount,
	UINT32 AboutToSleepTime
	);

TBStoredObjectOpenFileEvent(
	UINT32 AccessType,
	UNICODESTRING ObjectFilePath
	);

OpenFileWithRetriesInternalStart(
	VOID
	);

TBStoredObjectWithCacheReadAllObjectIdsForTypeFromCache_Failed(
	INT32 HResult,
	INT32 ObjectType,
	UNICODESTRING OwnerPfn
	);

_InstantiateAccountsWamObjectStore_Failed(
	INT32 HResult
	);

TBStoredObjectCantReadFileEvent(
	INT32 Error,
	ANSISTRING Message,
	UNICODESTRING ObjectFilePath
	);

TBStoredObjectCantMoveTruncateFileEvent(
	INT32 Error,
	UNICODESTRING ObjectFilePath
	);

TBStoredObjectCantMoveFilePointerEvent(
	INT32 Error,
	UNICODESTRING ObjectFilePath
	);

TBStoredObjectOpenFileForAccess(
	UINT32 CreateDisposition,
	UINT32 AccessType,
	UNICODESTRING ObjectFilePath
	);

TBStoredObjectCantCreateDirectoryEvent(
	INT32 Error,
	UNICODESTRING FolderPath
	);

TBStoredObjectCantCreateNewFileEvent(
	INT32 Error
	);

TBStoredObjectCreateFolderStructureEvent(
	UNICODESTRING ObjectFolderPath
	);

TBStoredObjectFolderStructureDoesntExistEvent(
	VOID
	);

TBStoredObjectCantWriteFileEvent(
	INT32 Error,
	UNICODESTRING ObjectFilePath
	);

TBStoredObjectValidateFileSizeTooLargeEvent(
	INT32 Error,
	UNICODESTRING ObjectFilePath
	);

TBStoredObjectDeleteEvent(
	VOID
	);

TBStoredObjectWriteFileTooLargeEvent(
	INT32 Error
	);

TBStoredObjectWriteBytesEvent(
	VOID
	);

TBStoredObjectCreateNewFileEvent(
	UNICODESTRING ObjectFilePath
	);

TBStoredObjectInitializeEvent(
	UNICODESTRING ObjectFolderPath,
	UNICODESTRING ObjectFilePath
	);

TBStoredObjectClockSkewEvent(
	INT32 ObjectType,
	FILETIME CreationTime,
	FILETIME CurrentTime
	);

TBStoredObjectReadBytesEvent(
	VOID
	);

TBStoredObjectGetAllObjectIdFoundEvent(
	UNICODESTRING OwnerPfn,
	UNICODESTRING FileName,
	INT32 HRESULT
	);

TBStoredObjectObjectCreateErrorEvent(
	INT32 Error
	);

TBStoredObjectCreateEvent(
	INT32 ObjectType,
	UNICODESTRING ObjectId,
	UNICODESTRING StringObjectId,
	UNICODESTRING OwnerPfn
	);

TBStoredObjectGetObjectTypeDirectoryNameFromObjectTypeEvent(
	INT32 Error
	);

TBStoredObjectGetRetriesFromObjectTypeEvent(
	INT32 Error
	);

TBStoredObjectEnumerateAllFileObjectIdsFromFilesForTypeEvent(
	INT32 ObjectType,
	UNICODESTRING OwnerPfn
	);

GetMediumFolderPath_ExpandVarsFailure(
	HRESULT hr,
	ANSISTRING Message
	);

GetMediumFolderPath_OpenThreadTokenFailure(
	HRESULT hr
	);

GetMediumFolderPath_OpenProcessFailure(
	HRESULT hr
	);

GetMediumFolderPath_OpenThreadToken_ERROR_NO_TOKEN(
	HRESULT hr
	);

TBJsonObjectInvalidTypeEvent(
	INT32 Error,
	ANSISTRING Message,
	UINT32 ObjectType
	);

TBJsonPropertyProtectInlineBytesEvent(
	VOID
	);

TBJsonPropertyNotInlineBytesEvent(
	INT32 Error,
	ANSISTRING Message,
	UINT32 PropertyType,
	UNICODESTRING PropertyName
	);

TBJsonPropertyNotBooleanEvent(
	INT32 Error,
	ANSISTRING Message,
	UINT32 PropertyType,
	UNICODESTRING PropertyName
	);

TBJsonPropertyNotSingleStringEvent(
	INT32 Error,
	ANSISTRING Message,
	UINT32 PropertyType,
	UNICODESTRING PropertyName
	);

TBJsonPropertyNotMultiStringEvent(
	INT32 Error,
	ANSISTRING Message,
	UINT32 PropertyType,
	UNICODESTRING PropertyName
	);

TBJsonPropertyUnprotectInlineBytesEvent(
	VOID
	);

TBJsonPropertyInvalidProtectedTypeEvent(
	INT32 Error,
	ANSISTRING Message,
	UINT32 PropertyType
	);

TBJsonPropertyUknownTypeEvent(
	INT32 Error,
	ANSISTRING Message,
	UNICODESTRING PropertyType
	);

TBJsonObjectUknownObjectTypeEvent(
	INT32 Error,
	ANSISTRING Message,
	UNICODESTRING ObjectType
	);

TBJsonPropertyInvalidProtectedTypeEvent(
	INT32 Error,
	ANSISTRING Message,
	UINT32 PropertyType,
	UNICODESTRING PropertyName
	);

TBJsonObjectSchemaTooHighEvent(
	INT32 Error,
	ANSISTRING Message
	);

