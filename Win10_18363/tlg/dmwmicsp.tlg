ProviderNames:
	Microsoft.Windows.DeviceManagement.WmiCsp



**** Events *****
ValidateDeleteProperty(
	VOID
	);

ValidateMove(
	VOID
	);

ValidateExecute(
	VOID
	);

ValidateCopy(
	ANSISTRING "Copy request should be blocked by DPU"
	);

ValidateSetProperty(
	VOID
	);

ValidateSetValue(
	VOID
	);

ValidateClear(
	VOID
	);

ValidateDeleteChild(
	VOID
	);

ValidateAdd(
	VOID
	);

CWmiCSP::GetNode(
	BOOL32 fAvailable
	);

CWmiCSPNode::GetProperty(
	UINT32 CFG_DATATYPE
	);

WMI Activities(
	ANSISTRING Operation,
	HEXINT32 HResult
	);

CWmiCSPNode::GetValue(
	UINT32 CFG_DATATYPE,
	HRESULT HResult
	);

DllMain(
	ANSISTRING "Unloading dmwmicsp.dll"
	);

DllMain(
	ANSISTRING "Loading dmwmicsp.dll"
	);

CRootCertProvider::DeleteNode(
	HRESULT HResult
	);

CRootCertProvider::DeleteNode(
	ANSISTRING "Delete user key failed",
	HRESULT HResult
	);

CRootCertProvider::AddNode(
	HRESULT HResult
	);

CRootCertProvider::AddNode(
	ANSISTRING "Verify user reg key failed",
	HRESULT HResult
	);

CSCEPProvider::DeleteNode(
	HRESULT HResult
	);

CSCEPProvider::DeleteNode(
	ANSISTRING "Verify user reg key failed",
	HRESULT HResult
	);

CSCEPProvider::AddNode(
	HRESULT HResult
	);

CSCEPProvider::AddNode(
	ANSISTRING "Verify user reg key failed",
	HRESULT HResult
	);

CWifiProvider::DeleteNode(
	HRESULT HResult
	);

CWifiProvider::DeleteNode(
	ANSISTRING "Verify user reg key failed",
	HRESULT HResult
	);

CWifiProvider::AddNode(
	HRESULT HResult
	);

CWifiProvider::AddNode(
	ANSISTRING "Verify user reg key failed",
	HRESULT HResult
	);

CVpnProvider::DeleteNode(
	HRESULT HResult
	);

CVpnProvider::DeleteNode(
	ANSISTRING "Verify user reg key failed",
	HRESULT HResult
	);

CVpnProvider::AddNode(
	HRESULT HResult
	);

CVpnProvider::AddNode(
	ANSISTRING "Verify user reg key failed",
	HRESULT HResult
	);

CVpnProvider::ExecNode(
	HRESULT HResult
	);

CVpnProvider::ExecNode(
	ANSISTRING "Verify user reg key failed",
	HRESULT HResult
	);

SetProperty(
	HRESULT HResult
	);

SetProperty(
	ANSISTRING "MI_Operation_GetInstance",
	INT32 miResult
	);

SetProperty(
	ANSISTRING "MI_Instance_SetElement",
	INT32 miResult
	);

SetProperty(
	ANSISTRING "MI_Instance_Clone",
	INT32 miResult
	);

SetProperty(
	ANSISTRING "MI_Instance_Add(Set)Element",
	INT32 miResult
	);

SetProperty(
	ANSISTRING "MI_Instance_AddElement",
	INT32 miResult
	);

SetProperty(
	ANSISTRING "MI_Application_NewInstance",
	INT32 miResult
	);

SetProperty(
	ANSISTRING "MI_Operation_GetClass",
	INT32 miResult
	);

CCIMProvider::DeleteInstance(
	HRESULT HResult
	);

CCIMProvider::DeleteInstance(
	ANSISTRING "MI_Operation_GetInstance",
	INT32 miResult
	);

CCIMProvider::DeleteInstance(
	ANSISTRING "MI_Instance_AddElement",
	INT32 miResult
	);

CCIMProvider::DeleteInstance(
	ANSISTRING "MI_Application_NewInstance",
	INT32 miResult
	);

CCIMProvider::DeleteInstance(
	ANSISTRING "MI_Operation_GetClass",
	INT32 miResult
	);

CCIMProvider::GetProperty(
	HRESULT HResult
	);

CCIMProvider::GetProperty(
	ANSISTRING "MI_Instance_Clone",
	INT32 miResult
	);

CCIMProvider::GetProperty(
	ANSISTRING "MI_Operation_GetInstance",
	INT32 miResult
	);

CCIMProvider::GetProperty(
	ANSISTRING "MI_Instance_AddElement",
	INT32 miResult
	);

CCIMProvider::GetProperty(
	INT32 miResult
	);

CCIMProvider::GetProperty(
	ANSISTRING "MI_Operation_GetClass",
	INT32 miResult
	);

GetKeyPropertyType(
	HRESULT HResult
	);

GetKeyPropertyType(
	ANSISTRING "MI_Class_GetElement",
	INT32 miResult
	);

GetKeyPropertyType(
	ANSISTRING "MI_Operation_GetClass",
	INT32 miResult
	);

CCIMProvider::TokenizeInstanceName(
	HRESULT HResult
	);

CCIMProvider::GetInstanceName(
	HRESULT HResult
	);

CCIMProvider::GetInstanceName(
	ANSISTRING "MI_Instance_GetElement",
	INT32 miResult
	);

CCIMProvider::GetInstanceName(
	ANSISTRING "MI_Operation_GetInstance failed for Session_EnumerateInstances"
	);

CCIMProvider::DeleteNode(
	HRESULT HResult
	);

CCIMProvider::GetNode(
	HRESULT HResult
	);

CCIMProvider::GetNode(
	ANSISTRING "MI_FLAG_NULL in flags"
	);

CCIMProvider::GetNode(
	ANSISTRING "MI_Instance_GetElement",
	INT32 miResult
	);

CCIMProvider::AddNode(
	HRESULT HResult
	);

CCIMProvider::ExecNode(
	HRESULT HResult
	);

CCIMProvider::ExecNode(
	ANSISTRING "MI_Operation_GetInstance for Session_Invoke",
	INT32 miResult
	);

CCIMProvider::ExecNode(
	ANSISTRING "MI_Instance_AddElement",
	INT32 miResult
	);

CCIMProvider::ExecNode(
	ANSISTRING "MI_Application_NewParameterSet",
	INT32 miResult
	);

GetInstanceNameAndKeyProperties(
	HRESULT HResult
	);

CCIMProvider::ConfigStringOptions(
	HRESULT HResult
	);

CCIMProvider::ConfigStringOptions(
	ANSISTRING "Failed to get session var for OMADM::TargetedUserSID"
	);

CCIMProvider::ConfigStringOptions(
	ANSISTRING "Failed to get session var for OMADM::AccountID"
	);

RevertImpersonation(
	HRESULT HResult
	);

ImpersonateUserIfRequired(
	HRESULT HResult
	);

GetPropertyType(
	HRESULT HResult
	);

GetPropertyType(
	ANSISTRING "Unexpected URI format"
	);

ConvertPropertyToString(
	ANSISTRING "Unexpected variant type",
	UINT32 VariantType
	);

