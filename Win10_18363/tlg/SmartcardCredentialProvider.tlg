ProviderNames:
	Microsoft.Windows.Security.SmartCards.CredProv



**** Events *****
ActivityStoppedAutomatically(
	VOID
	);

CredentialReportResult(
	INT32 retVal,
	NTSTATUS status,
	NTSTATUS substatus,
	UINT32 type,
	UINT32 sessionId,
	UNICODESTRING providerName,
	UNICODESTRING readerName,
	INT32 readerDeviceTypeId,
	UNICODESTRING cardName,
	UINT32 readerState,
	INT32 credentialCount
	);

CredentialReportResult(
	INT32 retVal,
	NTSTATUS status,
	NTSTATUS substatus,
	UINT32 type,
	UINT32 sessionId,
	UNICODESTRING providerName,
	UNICODESTRING readerName,
	INT32 readerDeviceTypeId,
	UNICODESTRING cardName,
	UINT32 readerState,
	INT32 credentialCount
	);

GetSerialization(
	HRESULT retVal,
	UINT32 type,
	UINT32 sessionId,
	UNICODESTRING providerName,
	UNICODESTRING readerName,
	INT32 readerDeviceTypeId,
	UNICODESTRING cardName,
	UINT32 readerState,
	INT32 credentialCount
	);

ProviderGetCredentialCount(
	INT32 retVal,
	UINT32 count,
	INT32 autoLogonWithDefault,
	UINT32 sessionId
	);

ProviderGetCredentialCount(
	INT32 retVal,
	UINT32 count,
	INT32 autoLogonWithDefault,
	UINT32 sessionId
	);

BuildCredentialList(
	HRESULT retVal,
	UINT32 usageScenario,
	UINT32 numberOfTotalCerts,
	UINT32 numberOfReaders,
	UINT32 sessionId
	);

SmartCardNgcReaderProcessing(
	INT32 usageScenario,
	UINT32 flags,
	BOOLEAN localSession,
	INT32 otherUserCert,
	BOOLEAN nonLogonKey,
	INT32 handledByNgcCredProv
	);

ReadEncodedCert(
	UINT32 certContext.CertEncodingType,
	UINT32 certContext.CertEncoded,
	UINT32 certContext.Version,
	FILETIME certContext.NotBefore,
	FILETIME certContext.NotAfter
	);

CollectCertificatesUsingCapi(
	UINT32 numberOfCertsAdded,
	UINT32 retVal
	);

ReadContainerDataCng(
	VOID
	);

ReadContainerDataCapi(
	UINT32 retVal
	);

CollectCertificatesUsingCapi(
	VOID
	);

CollectCertificatesUsingCng(
	VOID
	);

CollectRootCertificatesUsingCapi(
	VOID
	);

ReaderMonitorTriggeredCertificateUpdateStop(
	VOID
	);

ReadRootCertificatesFromReader(
	VOID
	);

ReaderMonitorTriggeredCertificateUpdateStart(
	VOID
	);

ReadCertificatesFromReader(
	VOID
	);

ReadEncodedCert(
	UINT32 certContext.CertEncodingType,
	UINT32 certContext.CertEncoded,
	UINT32 certContext.Version,
	FILETIME certContext.NotBefore,
	FILETIME certContext.NotAfter
	);

ReaderMonitorTriggeredCertificateUpdate(
	UNICODESTRING readerInfo.ReaderName,
	UINT32 readerInfo.ActivityCount,
	UNICODESTRING readerInfo.CardName,
	UNICODESTRING readerInfo.ProviderName,
	UNICODESTRING readerInfo.KeyStorageProviderName,
	UNICODESTRING readerInfo.DefaultContainer,
	UNICODESTRING readerInfo.FriendlyCardName,
	UNICODESTRING readerInfo.FriendlyDeviceName,
	UINT32 readerInfo.ProvType,
	UINT32 readerInfo.LastReaderError,
	UINT32 readerMonState.SessionId,
	BOOL32 readerMonState.Impersonate,
	BOOL32 readerMonState.ReadRootCertificatesFromCards,
	BOOL32 readerMonState.ReadCertificatesFromCards,
	BOOL32 readerMonState.ReverseSubject,
	BOOL32 readerMonState.AllowSignatureOnlyKeys,
	BOOL32 readerMonState.ForceReadAllCertificates,
	UINT32 readerMonState.SCardScope,
	UINT32 readerMonState.CertCollectionFilterOption,
	UINT32 retVal,
	UINT32 numberOfCertsRead,
	UINT32 numberOfRootCertsRead,
	UINT32 certCollectionFilter,
	UINT32 rootCertCollectionFilter
	);

ReadContainerDataCapi(
	VOID
	);

ReadRootCertificatesFromReader(
	UNICODESTRING readerInfo.ReaderName,
	UINT32 readerInfo.ActivityCount,
	UNICODESTRING readerInfo.CardName,
	UNICODESTRING readerInfo.ProviderName,
	UNICODESTRING readerInfo.KeyStorageProviderName,
	UNICODESTRING readerInfo.DefaultContainer,
	UNICODESTRING readerInfo.FriendlyCardName,
	UNICODESTRING readerInfo.FriendlyDeviceName,
	UINT32 readerInfo.ProvType,
	UINT32 readerInfo.LastReaderError,
	UINT32 readerMonState.SessionId,
	BOOL32 readerMonState.Impersonate,
	BOOL32 readerMonState.ReadRootCertificatesFromCards,
	BOOL32 readerMonState.ReadCertificatesFromCards,
	BOOL32 readerMonState.ReverseSubject,
	BOOL32 readerMonState.AllowSignatureOnlyKeys,
	BOOL32 readerMonState.ForceReadAllCertificates,
	UINT32 readerMonState.SCardScope,
	UINT32 readerMonState.CertCollectionFilterOption,
	UINT32 retVal
	);

CollectRootCertificatesUsingCng(
	UINT32 numberOfCertsAdded,
	UINT32 retVal
	);

CollectCertificatesUsingCng(
	UINT32 numberOfCertsAdded,
	UINT32 retVal
	);

ReadCngKey(
	BOOL32 useHelloCertsAsSmartCardCerts,
	UINT32 deviceTypeId,
	UNICODESTRING provName,
	BOOL32 certPropagated,
	UINT32 retVal
	);

ReadCertificatesFromReader(
	BOOL32 readCerts,
	BOOL32 readRootCerts,
	UNICODESTRING readerInfo.ReaderName,
	UINT32 readerInfo.ActivityCount,
	UNICODESTRING readerInfo.CardName,
	UNICODESTRING readerInfo.ProviderName,
	UNICODESTRING readerInfo.KeyStorageProviderName,
	UNICODESTRING readerInfo.DefaultContainer,
	UNICODESTRING readerInfo.FriendlyCardName,
	UNICODESTRING readerInfo.FriendlyDeviceName,
	UINT32 readerInfo.ProvType,
	UINT32 readerInfo.LastReaderError,
	UINT32 readerMonState.SessionId,
	BOOL32 readerMonState.Impersonate,
	BOOL32 readerMonState.ReadRootCertificatesFromCards,
	BOOL32 readerMonState.ReadCertificatesFromCards,
	BOOL32 readerMonState.ReverseSubject,
	BOOL32 readerMonState.AllowSignatureOnlyKeys,
	BOOL32 readerMonState.ForceReadAllCertificates,
	UINT32 readerMonState.SCardScope,
	UINT32 readerMonState.CertCollectionFilterOption,
	UINT32 retVal
	);

CollectRootCertificatesUsingCapi(
	UINT32 numberOfCertsAdded,
	UINT32 retVal
	);

ReadCertificatesFromReader(
	VOID
	);

ReadCertificatesFromReader(
	UNICODESTRING readerInfo.ReaderName,
	UINT32 readerInfo.ActivityCount,
	UNICODESTRING readerInfo.CardName,
	UNICODESTRING readerInfo.ProviderName,
	UNICODESTRING readerInfo.KeyStorageProviderName,
	UNICODESTRING readerInfo.DefaultContainer,
	UNICODESTRING readerInfo.FriendlyCardName,
	UNICODESTRING readerInfo.FriendlyDeviceName,
	UINT32 readerInfo.ProvType,
	UINT32 readerInfo.LastReaderError,
	UINT32 readerMonState.SessionId,
	BOOL32 readerMonState.Impersonate,
	BOOL32 readerMonState.ReadRootCertificatesFromCards,
	BOOL32 readerMonState.ReadCertificatesFromCards,
	BOOL32 readerMonState.ReverseSubject,
	BOOL32 readerMonState.AllowSignatureOnlyKeys,
	BOOL32 readerMonState.ForceReadAllCertificates,
	UINT32 readerMonState.SCardScope,
	UINT32 readerMonState.CertCollectionFilterOption,
	UINT32 retVal
	);

ReadContainerDataCng(
	UINT32 retVal
	);

SessionUnlockTriggeredCertificateUpdate(
	UINT32 numberOfReaders,
	UINT32 numberOfCertsRead,
	UINT32 numberOfRootCertsRead
	);

SessionUnlockTriggeredCertificateUpdateStop(
	UINT32 numberOfReaders
	);

CollectRootCertificatesUsingCng(
	VOID
	);

SessionUnlockTriggeredCertificateUpdateStart(
	VOID
	);

ReaderMonStateAndReaderInfoData(
	UNICODESTRING readerInfo.ReaderName,
	UINT32 readerInfo.ActivityCount,
	UNICODESTRING readerInfo.CardName,
	UNICODESTRING readerInfo.ProviderName,
	UNICODESTRING readerInfo.KeyStorageProviderName,
	UNICODESTRING readerInfo.DefaultContainer,
	UNICODESTRING readerInfo.FriendlyCardName,
	UNICODESTRING readerInfo.FriendlyDeviceName,
	UINT32 readerInfo.ProvType,
	UINT32 readerInfo.LastReaderError,
	UINT32 readerMonState.SessionId,
	BOOL32 readerMonState.Impersonate,
	BOOL32 readerMonState.ReadRootCertificatesFromCards,
	BOOL32 readerMonState.ReadCertificatesFromCards,
	BOOL32 readerMonState.ReverseSubject,
	BOOL32 readerMonState.AllowSignatureOnlyKeys,
	BOOL32 readerMonState.ForceReadAllCertificates,
	UINT32 readerMonState.SCardScope,
	UINT32 readerMonState.CertCollectionFilterOption
	);

ParseNgcKeyNameStringAccountId(
	INT32 retVal
	);

ParseNgcKeyNameStringTenant(
	INT32 retVal
	);

ParseNgcKeyNameStringDomain(
	INT32 retVal
	);

BuildNgcKeyNameStringConvertContainerId(
	INT32 retVal
	);

ParseNgcKeyNameStringContainerId(
	INT32 retVal
	);

BuildNgcKeyNameStringConvertSid(
	INT32 retVal
	);

ParseNgcKeyNameStringSid(
	INT32 retVal
	);

ParseNgcKeyNameStringInvalidLength(
	INT32 retVal
	);

GetTokenInformation(
	UINT32 retVal
	);

NgcCredProvEnumLogonKeysFailed(
	INT32 retVal
	);

ActivityStoppedAutomatically(
	VOID
	);

ConversionFromSmartCardPolicyOptionFailedInvalidValue(
	INT32 retVal
	);

InvalidPinDigitSequenceNotAllowed(
	INT32 retVal
	);

InvalidPinOtherCharacterNotAllowed(
	INT32 retVal
	);

InvalidPinSpecialCharacterNotAllowed(
	INT32 retVal
	);

InvalidPinDigitNotAllowed(
	INT32 retVal
	);

InvalidPinLowercaseLetterNotAllowed(
	INT32 retVal
	);

InvalidPinUppercaseLetterNotAllowed(
	INT32 retVal
	);

InvalidPinOtherCharacterRequired(
	INT32 retVal
	);

InvalidPinSpecialCharacterRequired(
	INT32 retVal
	);

InvalidPinDigitRequired(
	INT32 retVal
	);

InvalidPinLowercaseLetterRequired(
	INT32 retVal
	);

InvalidPinUppercaseLetterRequired(
	INT32 retVal
	);

InvalidPinUnknownCharacterClass(
	INT32 retVal
	);

InvalidPinTooManyCharacters(
	INT32 retVal
	);

InvalidPinTooFewCharacters(
	INT32 retVal
	);

PinPolicyRulesNotInitializedBeforeValidation(
	INT32 retVal
	);

PinPolicyRules.ValidatePin(
	INT32 retVal,
	UINT32 resultValidatePin
	);

PinPolicyRules.ValidatePin(
	INT32 retVal,
	UINT32 resultValidatePin
	);

InvalidPinPolicySerializationUnsupportedVersion(
	INT32 retVal
	);

InvalidPinPolicySerializationWrongSizeV3(
	INT32 retVal
	);

InvalidPinPolicySerializationWrongSizeV2(
	INT32 retVal
	);

InvalidPinPolicySerializationWrongSizeV1(
	INT32 retVal
	);

InvalidPinPolicySerializationTooSmall(
	INT32 retVal
	);

PinPolicyRulesAlreadyInitialized(
	INT32 retVal
	);

ValidationFailedInvalidExpiration(
	INT32 retVal
	);

ValidationFailedInvalidPinHistoryCount(
	INT32 retVal
	);

ValidationFailedAllCharacterClassesDisallowed(
	INT32 retVal
	);

ValidationFailedInvalidCharacterPolicyOption(
	INT32 retVal
	);

ValidationFailedInvalidMinOrMaxLength(
	INT32 retVal
	);

InvalidPinPolicySerializationVersion(
	INT32 retVal
	);

InvalidOtherCharactersPolicyOption(
	INT32 retVal
	);

InvalidSpecialCharactersPolicyOption(
	INT32 retVal
	);

InvalidDigitsPolicyOption(
	INT32 retVal
	);

InvalidLowercaseCharacterPolicyOption(
	INT32 retVal
	);

InvalidUppercaseCharacterPolicyOption(
	INT32 retVal
	);

