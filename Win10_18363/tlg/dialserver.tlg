ProviderNames:
	Microsoft.Windows.Cast.Dial
	TelemetryAssert
	TelemetryAssertDiagTrack



**** Events *****
DIALServerControl::SetAppsAreAvailable()(
	HRESULT HRESULT
	);

DIALServerControl::SetAppsAreAvailable()(
	VOID
	);

DIALServerControl::OnSessionLockChanged()(
	HRESULT HRESULT
	);

DIALServerControl::OnSessionLockChanged()(
	VOID
	);

DIALServerControl::OnSessionChanged()(
	HRESULT HRESULT
	);

DIALServerControl::OnSessionChanged()(
	VOID
	);

DIALServerControl::SetEnableControl()(
	HRESULT HRESULT
	);

DIALServerControl::SetEnableControl()(
	VOID
	);

DIALServerControl::GetEnableControl()(
	HRESULT HRESULT
	);

DIALServerControl::GetEnableControl()(
	VOID
	);

DIALNetworkServer::DeviceNotifyCallback(), power state on(
	VOID
	);

DIALNetworkServer::DeviceNotifyCallback(), power state off(
	VOID
	);

DIALNetworkServer::DoPowerStateToggle()(
	HRESULT HRESULT
	);

DIALNetworkServer::StartListeningInternal()(
	HRESULT HRESULT
	);

DIALNetworkServer::StartListeningInternal()(
	VOID
	);

RequestQueueCallback() Unexpected completion port structure(
	HEXINT64 Io,
	HEXINT64 m_tpIoCompletionPort
	);

RequestQueueCallback()(
	UINT32 I/O error handling HTTP request
	);

RequestQueueCallback() Unexpected overlapped structure(
	HEXINT64 Overlapped,
	HEXINT64 m_readOverlapped
	);

DIALNetworkServer::RegisterWithUPnP()(
	HRESULT HRESULT
	);

DIALNetworkServer::RegisterWithUPnP()(
	VOID
	);

DIALNetworkServer::RegisterHttpEndpoints()(
	HRESULT HRESULT
	);

DIALNetworkServer::RegisterHttpEndpoints()(
	VOID
	);

Unable to create HTTP request handler(
	VOID
	);

HTTP operation on a URL path that did not start with /apps(
	VOID
	);

HTTP operation on a URL path of /apps(
	VOID
	);

HandleHttpRequest(
	UNICODESTRING HTTP request on URL of /app/<someappname>/<somesuffix> with unexpected suffix
	);

HandleHttpRequest(
	UNICODESTRING Too many path segments in URL
	);

HandleHttpRequest(
	UINT32 URL path too long. Length in characters
	);

DIALNetworkServer::Unregister()(
	HRESULT HRESULT
	);

DIALNetworkServer::Unregister()(
	VOID
	);

DIALNetworkServer::StopListening()(
	HRESULT HRESULT
	);

DIALNetworkServer::StopListening()(
	VOID
	);

DIALNetworkServer::StartListening()(
	HRESULT HRESULT
	);

DIALNetworkServer::StartListening()(
	VOID
	);

DIALNetworkServer::Register()(
	HRESULT HRESULT
	);

DIALNetworkServer::Register()(
	VOID
	);

DIALNetworkServer::~DIALNetworkServer()(
	VOID
	);

DIALNetworkServer::~DIALNetworkServer()(
	VOID
	);

DIALNetworkServer::DIALNetworkServer()(
	VOID
	);

DIALNetworkServer::DIALNetworkServer()(
	VOID
	);

DIALAppManager::StopApplication()(
	HRESULT HRESULT
	);

DIALAppManager::StartApplication()(
	UNICODESTRING applicationDIALName
	);

DIALAppManager::StartApplication()(
	HRESULT HRESULT
	);

StartApplication(
	UNICODESTRING AUMID
	);

DIALAppManager::IsStopSupported()(
	UNICODESTRING applicationDIALName
	);

DIALAppManager::IsApplicationRunning()(
	HRESULT HRESULT
	);

GetApplicationState(
	UNICODESTRING Package Full Name,
	INT32 Execution State,
	HRESULT HRESULT
	);

DIALAppManager::GetApplicationState()(
	UNICODESTRING applicationDIALName
	);

DIALAppManager::IsApplicationInstalled()(
	UNICODESTRING applicationDIALName
	);

DIALAppManager::IsApplicationInstallable()(
	UNICODESTRING applicationDIALName
	);

DIALAppManager::InstallApplication()(
	UNICODESTRING applicationDIALName
	);

DIALAppManager::Unadvise()(
	HRESULT HRESULT
	);

DIALAppManager::Unadvise()(
	VOID
	);

DIALAppManager::Advise()(
	HRESULT HRESULT
	);

DIALAppManager::Advise()(
	VOID
	);

DIALServer::GetApplicationData()(
	HRESULT HRESULT
	);

DIALServer::GetApplicationData()(
	UNICODESTRING applicationName
	);

DIALServer::StopApplication()(
	HRESULT HRESULT
	);

DIALServer::StopApplication()(
	UNICODESTRING applicationName
	);

DIALServer::LaunchApplication()(
	HRESULT HRESULT
	);

DIALServer::LaunchApplication()(
	UNICODESTRING applicationName
	);

DIALServer::InstallApplication()(
	HRESULT HRESULT
	);

DIALServer::InstallApplication()(
	UNICODESTRING applicationName
	);

DIALServer::GetApplicationInformation()(
	HRESULT HRESULT
	);

DIALServer::GetApplicationInformation()(
	UNICODESTRING applicationName
	);

DIALHttpRequestHandler::ReadRawEntityBody() -- entity body too large(
	VOID
	);

DIALHttpRequestHandler::ProcessHttpRequest()(
	HRESULT HRESULT
	);

DIALHttpRequestHandler::ProcessHttpRequest()(
	VOID
	);

DIALHttpRequestApplicationInstallUrlHandler::ProcessGETRequest()(
	HRESULT HRESULT
	);

DIALHttpRequestApplicationInstallUrlHandler::ProcessGETRequest()(
	UNICODESTRING TTP GET request on Applicaiton Install URL for application
	);

DIALHttpRequestApplicationInstallUrlHandler::ProcessRequest()(
	HRESULT HRESULT
	);

DIALHttpRequestApplicationInstallUrlHandler::ProcessRequest()(
	VOID
	);

DIALHttpRequestApplicationInstanceUrlHandler::ValidateHeaders()(
	HRESULT HRESULT
	);

DIALHttpRequestApplicationInstanceUrlHandler::ValidateHeaders()(
	VOID
	);

DIALApplicationLaunchRequest(
	HRESULT HRESULT,
	UNICODESTRING applicationName
	);

DIALHttpRequestApplicationResourceUrlHandler::ProcessPOSTRequest()(
	UNICODESTRING HTTP POST request on Application Resource URL for application 
	);

DIALApplicationInformationRequest(
	HRESULT HRESULT,
	UNICODESTRING applicationName,
	UINT32 applicationState
	);

DIALHttpRequestApplicationResourceUrlHandler::ProcessGETRequest()(
	UNICODESTRING HTTP GET request on Application Resource URL for application 
	);

DIALHttpRequestApplicationResourceUrlHandler::ProcessRequest()(
	HRESULT HRESULT
	);

DIALHttpRequestApplicationResourceUrlHandler::ProcessRequest()(
	VOID
	);

DIALStringHelpers::GetSystemIPAddressInIPV4Format()(
	HRESULT HRESULT
	);

GetSystemIPAddressInIPV4Format()(
	SOCKETADDRESS Found IP address
	);

DIALStringHelpers::GetSystemIPAddressInIPV4Format()(
	VOID
	);

DIALStringHelpers::GetApplicationUrlHeader()(
	HRESULT HRESULT
	);

DIALStringHelpers::GetApplicationUrlHeader()(
	VOID
	);

DIALDeviceController::GetAdditionalSsdpHeaders()(
	HRESULT HRESULT
	);

DIALDeviceController::GetAdditionalSsdpHeaders()(
	VOID
	);

DIALDeviceController::GetAdditionalResponseHeaders()(
	HRESULT HRESULT
	);

GetAdditionalResponseHeaders(
	UNICODESTRING Application-URL header
	);

DIALDeviceController::GetAdditionalResponseHeaders()(
	VOID
	);

ScanRegistryForRemoteLaunchApps()(
	UNICODESTRING Failed to enumerate,
	HRESULT HRESULT
	);

DIALRegistryReader::ScanRegistryForRemoteLaunchApps()(
	VOID
	);

ProcessPackageIdForRemoteLaunch()(
	UNICODESTRING Failed to get Application User Model Id from Package Full Name,
	UNICODESTRING PackageRelativeAppId,
	HRESULT HRESULT
	);

ProcessDIALNameAppUserModelIdPair()(
	UNICODESTRING Adding DIALName,
	UNICODESTRING AMUID,
	BOOLEAN Replaced,
	HRESULT HRESULT
	);

FindRemoteLaunchKeyAndPackageRelativeAppId()(
	UNICODESTRING Failed to open,
	UNICODESTRING wszPackageId,
	HRESULT HRESULT
	);

FindRemoteLaunchKeyAndPackageRelativeAppId()(
	UNICODESTRING Failed to enumerate,
	UNICODESTRING wszPackageId,
	HRESULT HRESULT
	);

DIALRegistryReader::GetAppUserModelIdForDIALName()(
	VOID
	);

DIALRegistryReader::Stop()(
	HRESULT HRESULT
	);

DIALRegistryReader::Stop()(
	VOID
	);

DIALRegistryReader::Start()(
	HRESULT HRESULT
	);

DIALRegistryReader::Start()(
	VOID
	);

Assert(
	UINT32 assertVersion,
	UINT32 rva,
	UINT32 timestamp,
	UINT32 imageSize,
	ANSISTRING imageName,
	UINT32 count,
	UINT32 totalHits,
	UINT32 ModuleCollection,
	UINT32 GlobalCollection
	);

