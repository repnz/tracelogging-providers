ProviderNames:
	Microsoft.Windows.Print.USBMon
	Microsoft.Windows.Print.JScriptLib
	Microsoft.Windows.Print.IppMon
	Microsoft.Windows.Print.IppAdapterCommon
	Microsoft.Windows.Print.IppCommon
	Microsoft.Windows.Print.IppConfigConverter



**** Events *****
FallbackError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

CreatePort(
	INT32 IsPortActive,
	UNICODESTRING PortName,
	UINT32 PortType,
	UNICODESTRING DevicePath,
	UNICODESTRING HardwareId,
	UINT64 PartA_PrivTags
	);

FallbackError(
	UINT64 PartA_PrivTags,
	SIGNED wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

HostBasedDevice(
	UNICODESTRING DriverName,
	UINT32 Version,
	UINT64 PartA_PrivTags
	);

TraceWarning(
	ANSISTRING Function,
	UNICODESTRING Message
	);

TraceInfo(
	ANSISTRING Function,
	UNICODESTRING Message
	);

JavaScriptException(
	UNICODESTRING File,
	UNICODESTRING Source,
	UINT32 Line,
	INT32 Column,
	UNICODESTRING ErrorMessage
	);

ActivityStoppedAutomatically(
	VOID
	);

ActivityError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

JobActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

JobActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetPrinterDataActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING Schema,
	UNICODESTRING PortType
	);

ActivityIntermediateStop(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

RetrievePrinterDataResult(
	UINT64 PartA_PrivTags,
	UNICODESTRING RequestLang,
	INT32 HResult
	);

GetPrinterDataActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

GetPrinterDataActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

JobEnd(
	UINT64 PartA_PrivTags,
	INT32 HResult,
	INT16 IppJobStatus,
	ANSISTRING __TlgCV__
	);

JobCancel(
	UINT64 PartA_PrivTags,
	INT32 HResult,
	INT16 IppJobStatus,
	ANSISTRING __TlgCV__
	);

JobWrite(
	UINT64 PartA_PrivTags,
	UINT32 BufferSize,
	INT32 HResult,
	ANSISTRING __TlgCV__
	);

Compliance(
	ANSISTRING PrinterMakeAndModel,
	UNICODESTRING Detail,
	UNICODESTRING SubDetail
	);

