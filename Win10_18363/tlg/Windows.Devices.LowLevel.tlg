ProviderNames:
	Microsoft.Windows.IoT.Devices



**** Events *****
AdcControllerFactory_GetDefaultAsync(
	UNICODESTRING providerName,
	HRESULT hr
	);

AdcController_GetControllersAsync(
	UNICODESTRING providerName,
	HRESULT hr
	);

I2cController_GetControllersAsync(
	UNICODESTRING providerName,
	HRESULT hr
	);

I2cControllerFactory_GetDefaultAsync(
	UNICODESTRING providerName,
	HRESULT hr
	);

I2cControllerServer_GetDevice(
	UNICODESTRING deviceId,
	INT32 slaveAddress,
	INT32 busSpeed,
	INT32 sharingMode,
	HRESULT hr
	);

I2cDeviceStaticsImpl_FromIdAsync(
	UNICODESTRING deviceId,
	INT32 slaveAddress,
	INT32 busSpeed,
	INT32 sharingMode,
	HRESULT hr
	);

GpioChangeReaderFactory_CreateWithCapacity(
	INT32 minCapacity,
	HRESULT hr
	);

GpioChangeReaderServer_Start(
	HRESULT hr,
	INT32 polarity
	);

GpioChangeCounterServer_Start(
	HRESULT hr,
	INT32 polarity
	);

GpioController_GetControllersAsync(
	UNICODESTRING providerName,
	HRESULT hr
	);

GpioControllerFactory_GetDefaultAsync(
	UNICODESTRING providerName,
	HRESULT hr
	);

GpioControllerServer_OpenPinWithSharingMode(
	INT32 pinNumber,
	INT32 sharingMode,
	HRESULT hr
	);

GpioPinServer_SetDriveMode(
	INT32 driveMode,
	HRESULT hr
	);

GpioControllerWithProviderServer_OpenPinWithSharingMode(
	INT32 pinNumber,
	INT32 sharingMode,
	HRESULT hr
	);

GpioPinWithProviderServer_SetDriveMode(
	INT32 driveMode,
	HRESULT hr
	);

PwmControllerFactory_FromIdAsync(
	UNICODESTRING deviceId,
	HRESULT hr
	);

PwmControllerFactory_GetDefaultAsync(
	UNICODESTRING providerName,
	HRESULT hr
	);

PwmController_GetControllersAsync(
	UNICODESTRING providerName,
	INT32 numControllers,
	HRESULT hr
	);

PwmControllerServer_OpenPin(
	INT32 pinNumber,
	HRESULT hr
	);

SpiController_GetControllersAsync(
	UNICODESTRING providerName,
	HRESULT hr
	);

SpiControllerFactory_GetDefaultAsync(
	UNICODESTRING providerName,
	HRESULT hr
	);

SpiControllerWithProviderServer_GetDevice(
	UNICODESTRING deviceId,
	INT32 chipSelectLine,
	INT32 clockFrequency,
	INT32 dataBitLength,
	INT32 mode,
	INT32 sharingMode,
	HRESULT hr
	);

SpiDeviceStaticsImpl_FromIdAsync(
	UNICODESTRING deviceId,
	INT32 chipSelectLine,
	INT32 clockFrequency,
	INT32 dataBitLength,
	INT32 mode,
	INT32 sharingMode,
	HRESULT hr
	);

SpiControllerWithProviderServer_GetDevice(
	UNICODESTRING providerName,
	INT32 chipSelectLine,
	INT32 clockFrequency,
	INT32 dataBitLength,
	INT32 mode,
	INT32 sharingMode,
	HRESULT hr
	);

I2cControllerWithProviderServer_GetDevice(
	UNICODESTRING providerName,
	INT32 slaveAddress,
	INT32 busSpeed,
	INT32 sharingMode,
	HRESULT hr
	);

PwmControllerWithProviderServer_OpenPin(
	INT32 pinNumber,
	HRESULT hr
	);

