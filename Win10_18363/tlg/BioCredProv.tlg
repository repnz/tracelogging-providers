ProviderNames:
	Microsoft.Windows.Security.Biometrics.BioCredProv
	Microsoft.Windows.Security.Biometrics.BioCredProv
	TelemetryAssert
	TelemetryAssertDiagTrack



**** Events *****
SetDisplayState(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UINT32 displayState
	);

GetCredentialAt(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UINT32 index
	);

SetSerialization(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UINT32 authPackage
	);

SetSerialization(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING authPackage
	);

SetUsageScenario(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UINT32 scenario,
	UINT32 flags
	);

SetUserArray(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

GetCredentialCount(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

UnAdvise(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

Advise(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

SetDisplayState(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

SetDisplayState(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

Info:SetUserArraySkipped(
	INT32 ResultCode
	);

SetUserArray(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

SetUserArray(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetCredentialAt(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

GetCredentialAt(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetCredentialCount(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 count,
	UINT32 default,
	INT32 autoLogon
	);

GetCredentialCount(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	UINT32 count,
	UINT32 default,
	INT32 autoLogon
	);

GetCredentialCount(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

GetCredentialCount(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

UnAdvise(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

UnAdvise(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

Advise(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

Advise(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

SetSerialization(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

SetSerialization(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityIntermediateStop(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

BioCredprovV1Wrapper(
	VOID
	);

ActivityError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

SetUsageScenario(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

SetUsageScenario(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityStoppedAutomatically(
	VOID
	);

FallbackError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

FallbackError(
	UINT64 PartA_PrivTags,
	SIGNED wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

BioCredprovEnumerateFail(
	INT32 retVal
	);

CredentialsChanged(
	VOID
	);

Error:IWinBioCredentialGetUserSid(
	INT32 ResultCode
	);

Error:ComPtrAs(
	INT32 ResultCode
	);

Error:IWinBioCredentialInitialize(
	INT32 ResultCode
	);

Error:CoCreateInstance(
	INT32 ResultCode,
	GUID credentialClassId
	);

Error:FieldDescriptorCoAllocCopy(
	INT32 ResultCode
	);

Error:IWinBioCredentialSetIdentifyResult(
	INT32 ResultCode
	);

Error:MoreThanOneUserInTheCredUIUserArray(
	INT32 ResultCode
	);

Info:UserIsNotEnrolled(
	INT32 ResultCode
	);

Error:SetBioEventsFailed(
	INT32 ResultCode
	);

Error:WinBioCredentialAsNgcCredentialFailed(
	INT32 ResultCode
	);

Error:NgcFingerprintCredentialLogonUIInitialize(
	INT32 ResultCode
	);

Error:MakeNgcFingerprintCredentialLogonUI(
	INT32 ResultCode
	);

Error:CHammerGuardGetLockoutState(
	INT32 ResultCode
	);

Error:CHammerGuardIncrementFailureCount(
	INT32 ResultCode
	);

Info:NoInSessionUserSidFound(
	INT32 ResultCode
	);

Warning:IsBioLogonDisallowedFailed(
	INT32 ResultCode
	);

Info:IdentifyIgnored(
	INT32 ResultCode,
	BOOL32 acceptingCreds,
	BOOL32 appAboveLock
	);

Info:PlaceholderTile(
	INT32 ResultCode,
	SID sid
	);

Warning:NoNgcBioLogonKeys(
	INT32 ResultCode,
	BOOL32 ngcKeysEmpty,
	SID sid
	);

Error:BioUserSidCredentialState(
	INT32 ResultCode
	);

Error:NgcCredProvEnumLogonKeys(
	INT32 ResultCode
	);

Error:SwitchCredentialProviderFailed(
	INT32 ResultCode
	);

Error:CredentialEventsAsCredentialSwitchEventsFailed(
	INT32 ResultCode
	);

Error:NgcUtilsCoMemAllocCopy(
	INT32 ResultCode
	);

Error:SizeofResource(
	UINT32 ResultCode
	);

Error:LockResource(
	UINT32 ResultCode
	);

Error:LoadResource(
	UINT32 ResultCode
	);

Error:FindResourceExW(
	UINT32 ResultCode
	);

Warning:NgcFingerprintCredentialSerializationInvalid(
	INT32 ResultCode,
	UNICODESTRING statusText
	);

Error:LoadBitmapW(
	UINT32 ResultCode
	);

Error:LoadBitmapWIsNotPresent(
	INT32 ResultCode
	);

Info:NgcFingerprintCredentialReportResult(
	INT32 ResultCode
	);

Error:NgcFingerprintCredentialReportResult(
	INT32 ResultCode,
	INT32 subStatus
	);

NgcFingerprintCredential.GetSerialization(
	INT32 retVal
	);

NgcFingerprintCredential.GetSerialization(
	INT32 retVal
	);

Error:SerializationFailed(
	INT32 ResultCode
	);

Info:NgcKeyInfo(
	INT32 ResultCode,
	UNICODESTRING keyName,
	UINT32 accountType,
	BOOLEAN convenienceCredential
	);

SerializeResponse(
	INT32 retVal,
	UINT32 serializationResult,
	UINT32 accountType,
	BOOLEAN isConvenienceCredential,
	UINT32 keyImplType,
	UINT32 serializationType
	);

Error:ConvertSidToStringSidW(
	UINT32 ResultCode
	);

Info:ReportResultString(
	INT32 ResultCode,
	UNICODESTRING text
	);

Error:BuildNgcLogonErrorStringFailed(
	INT32 ResultCode
	);

Warning:ConvertSidToStringSidW(
	UINT32 ResultCode
	);

NgcFingerprintCredentialLogonUI.ReportResultInternal(
	INT32 hr,
	UINT64 e2eUnlockEndTime,
	BOOLEAN isUnlockScenario,
	INT32 status,
	INT32 subStatus
	);

Error:UnexpectedAutoLogon(
	INT32 ResultCode
	);

Error:WrongUserForGestureCollection(
	INT32 ResultCode
	);

Error:WrongUserForNegotiate(
	INT32 ResultCode
	);

Info:PausedFeedbackNotShown(
	INT32 ResultCode,
	UNICODESTRING feedback
	);

Info:UpdateFeedback(
	INT32 ResultCode,
	UINT32 visualState,
	UNICODESTRING feedback
	);

FPSignInResult(
	UINT64 PartA_PrivTags,
	UNICODESTRING Result,
	INT32 HResult,
	INT32 SubStatus,
	INT64 BadCaptures,
	INT64 BadMatches,
	INT64 FirstSwipeToLogonDelta,
	INT64 LastSwipeToLogonDelta,
	UINT32 BioUnitCount,
	UINT32 Capabilties,
	UNICODESTRING Description,
	UNICODESTRING DeviceInstanceId,
	UNICODESTRING Manufacturer,
	UNICODESTRING Model,
	UINT32 SensorSubtype,
	UINT32 MajorFirmwareVersion,
	UINT32 MinorFirmwareVersion,
	UINT32 SecurityLevel
	);

WinBioOpenSessions(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

WinBioCloseSessions(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

WinBioIdentifyOperation(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

ListenerThread(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

EnrollmenmtFinished(
	UINT32 UnitId
	);

EnrollmentInProgress(
	UINT32 UnitId
	);

WinBioOperationOpen(
	INT32 apiStatus,
	UINT64 sequenceNumber
	);

WinBioOperationClose(
	INT32 apiStatus,
	UINT64 sequenceNumber
	);

WinBioOperationEnumUserEnrollments(
	INT32 apiStatus,
	UINT64 sequenceNumber,
	UINT32 unitId,
	SID sid,
	UINT64 subFactorCount
	);

WinBioOperationEnumEnrollments(
	INT32 apiStatus,
	UINT64 sequenceNumber,
	UINT32 unitId,
	UINT32 sidType,
	UINT64 subFactorCount
	);

WinBioOperationOpenFramework(
	INT32 apiStatus,
	UINT64 sequenceNumber
	);

WinBioOperationCloseFramework(
	INT32 apiStatus,
	UINT64 sequenceNumber
	);

WinBioOperationEnumBiometricUnits(
	INT32 apiStatus,
	UINT64 sequenceNumber,
	UINT64 unitCount
	);

WinBioUnitSchema(
	UINT32 unitId,
	UINT32 factor,
	UINT32 capabilities,
	UNICODESTRING description,
	UNICODESTRING deviceInstanceId,
	UNICODESTRING manufacturer,
	UNICODESTRING model,
	UINT32 sensorSubType,
	UINT32 firwareVersionMajor,
	UINT32 firmwareVersionMinor
	);

WinBioOperationUnitArrival(
	INT32 apiStatus,
	UINT64 sequenceNumber,
	UINT32 unitId
	);

WinBioOperationUnitRemoval(
	INT32 apiStatus,
	UINT64 sequenceNumber,
	UINT32 unitId
	);

WinBioOperationNotifyUnitStatusChange(
	INT32 apiStatus,
	UINT64 sequenceNumber,
	UINT32 unitId,
	UINT32 availability,
	UINT32 reasonCode
	);

WinBioOperation(
	UINT32 operation,
	INT32 apiStatus,
	UINT64 sequenceNumber
	);

WorkItem(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING operation
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

ListenerThread(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

ListenerThread(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityIntermediateStop(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

WinBioIdentifyOperation(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	INT32 apiStatus,
	UINT64 sequenceNumber,
	UINT32 unitId,
	SID sid,
	UINT32 rejectDetail,
	UINT32 factor,
	UINT32 capabilities,
	UNICODESTRING description,
	UNICODESTRING deviceInstanceId,
	UNICODESTRING manufacturer,
	UNICODESTRING model,
	UINT32 sensorSubType,
	UINT32 firwareVersionMajor,
	UINT32 firmwareVersionMinor
	);

WinBioIdentifyOperation(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	INT32 apiStatus,
	UINT64 sequenceNumber,
	UINT32 unitId,
	SID sid,
	UINT32 rejectDetail,
	UINT32 factor,
	UINT32 capabilities,
	UNICODESTRING description,
	UNICODESTRING deviceInstanceId,
	UNICODESTRING manufacturer,
	UNICODESTRING model,
	UINT32 sensorSubType,
	UINT32 firwareVersionMajor,
	UINT32 firmwareVersionMinor
	);

WinBioIdentifyOperation(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

WinBioIdentifyOperation(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

BUCreationFailed(
	UINT64 PartA_PrivTags,
	BOOLEAN FPEnrolled,
	INT32 HResult
	);

WinBioCloseSessions(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

WinBioCloseSessions(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

WinBioOpenSessions(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

WinBioOpenSessions(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ControlThread(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

WorkItemExecute(
	ANSISTRING operation
	);

WorkItem(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function,
	ANSISTRING operation
	);

WorkItem(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	ANSISTRING operation
	);

ControlThread(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

ControlThread(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

WorkItem(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

WorkItem(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityStoppedAutomatically(
	VOID
	);

RegEnumKeyExFailed(
	INT32 retVal
	);

RegQueryInfoKeyFailed(
	INT32 retVal
	);

RegOpenKeyExFailed(
	INT32 retVal
	);

SetProtectorUpdateNeededRegKey(
	INT32 retVal,
	UNICODESTRING SID,
	UINT32 Value
	);

RegSetValueProtectorUpdateNeededFailed(
	INT32 retVal
	);

RegOpenKeySensorInfoFailed(
	INT32 retVal
	);

memcpy_sFailed(
	INT32 retVal
	);

LoadStringWFailed(
	UINT32 retVal
	);

LsaLookupAuthenticationPackageError(
	INT32 retVal
	);

RtlUnicodeStringToAnsiStringError(
	INT32 retVal
	);

LsaConnectUntrustedError(
	INT32 retVal
	);

CacheGetUserNameAndDomain(
	SID userSid,
	UNICODESTRING userName,
	UNICODESTRING domain
	);

CacheGetUserSid(
	UNICODESTRING userName,
	SID sid
	);

InvalidSidNameUse(
	INT32 retVal,
	UINT32 sidNameUse
	);

LsaLookupSids2(
	INT32 retVal
	);

LookupAccountSidLocalW(
	UINT32 retVal
	);

FallBackToLocalSidLookup(
	INT32 retVal
	);

LsaOpenPolicy(
	INT32 retVal
	);

GetTokenInformation(
	UINT32 retVal
	);

LookupAccountNameLocalWFailed(
	UINT32 retVal
	);

LookupAccountNameLocalWSizeQuerySucceededUnexpectedly(
	INT32 retVal
	);

LookupAccountNameLocalWSizeQueryFailed(
	UINT32 retVal
	);

HideNegoCredDueToNoLogonEku(
	VOID
	);

CertGetEnhancedKeyUsage(
	UINT32 retVal
	);

CertGetEnhancedKeyUsageRequiredByteCount(
	UINT32 retVal
	);

HideNegoCredDueToNoSignatureKeyUseOnCert(
	VOID
	);

CertGetIntendedKeyUsage(
	UINT32 retVal
	);

HideNegoCredDueToCertVerifyFailure(
	BOOL32 isSelfSigned,
	BOOL32 isExpired
	);

CertVerifySubjectCertificateContext(
	UINT32 retVal
	);

CertCreateCertificateContext(
	UINT32 retVal
	);

HideNegoCredDueToCertLookupFailure(
	INT32 retVal
	);

HideNegoCredDueToNoSmartCardEmulation(
	INT32 retVal
	);

HideNegoCredDueToCertMissing(
	INT32 retVal
	);

NCryptOpenKey(
	INT32 retVal
	);

NCryptOpenStorageProvider(
	INT32 retVal
	);

HideNegoCredDueToPolicy(
	VOID
	);

HideNegoCredForUnknownUser(
	VOID
	);

HideNegoCredForPackAsSSPIWithLocalUser(
	VOID
	);

HideNegoCredForPackAsSmartCardWithLocalUser(
	VOID
	);

HideNegoCredForKeyNameFilterMismatch(
	VOID
	);

ShouldShowNegoCredential(
	NULL keyName,
	UINT32 accountType,
	UINT32 allowedGestures,
	BOOLEAN packAsSmartCard,
	BOOLEAN packAsSspi,
	BOOLEAN certRequiredForOnPremAuth,
	UINT32 hideNegoCredReason,
	BOOLEAN shouldShowNegoCredential,
	INT32 retVal
	);

NgcCredProvEnumLogonKeysFailed(
	INT32 retVal
	);

UnsupportedBiometricType(
	INT32 retVal
	);

InvalidSerializationBufferUserSidTooLarge(
	INT32 retVal
	);

InvalidSerializationBufferTooSmall(
	INT32 retVal
	);

NCryptGetProperty(
	INT32 retVal
	);

NCryptGetPropertyRequiredByteCount(
	INT32 retVal
	);

UnmarshaledCredentialUnsupportedType(
	INT32 retVal
	);

CredUnmarshalCredential(
	UINT32 retVal
	);

CredUnPackAuthenticationBufferWFailed(
	UINT32 retVal
	);

CredUnPackAuthenticationBufferWSizeQuerySucceededUnexpectedly(
	INT32 retVal
	);

CredUnPackAuthenticationBufferWSizeQueryFailed(
	UINT32 retVal
	);

InvalidSerializationBufferBadSubmitType(
	INT32 retVal
	);

UnmarshaledSspiCredentialNotV2(
	INT32 retVal
	);

SspiUnmarshalCredUIContext(
	INT32 retVal
	);

CredUnPackAuthenticationBufferWIsNotPresent(
	INT32 retVal
	);

CertGetCertificateContextProperty(
	UINT32 retVal
	);

CertGetCertificateContextPropertyRequiredSize(
	UINT32 retVal
	);

CertFindCertificateInStore(
	UINT32 retVal
	);

CertNotPresentInMyStore(
	UINT32 retVal
	);

CertOpenSystemStore(
	UINT32 retVal
	);

Assert(
	UINT32 assertVersion,
	UINT32 rva,
	UINT32 timestamp,
	UINT32 imageSize,
	ANSISTRING imageName,
	UINT32 count,
	UINT32 totalHits,
	UINT32 ModuleCollection,
	UINT32 GlobalCollection
	);

