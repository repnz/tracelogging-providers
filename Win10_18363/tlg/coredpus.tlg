ProviderNames:
	Microsoft.Windows.DeviceManagement.SyncMLDpu
	Microsoft.Windows.DeviceManagement.WAPDpu
	Microsoft.Windows.EnterpriseManagement.Enrollment
	Microsoft.Windows.EMPS.Enrollment



**** Events *****
GetResultsData(
	VOID
	);

CommandFailedBatching(
	UINT32 Command,
	HEXINT32 Hresult
	);

IgnoreOpeningElement(
	INT32 SizeOfNamespaceUri,
	UNICODESTRING NamespaceUri,
	INT32 LocalNameUri,
	UNICODESTRING LocalName
	);

OmaDmSyncMLDpuStart(
	VOID
	);

ParseClosingElement(
	INT32 SizeOfNamespaceUri,
	UNICODESTRING NamespaceUri,
	INT32 LocalNameUri,
	UNICODESTRING LocalName
	);

ResultsRetrievalFailed(
	UINT32 Command,
	HEXINT32 Hresult
	);

BeginPkgProcessing(
	HEXINT32 Hresult
	);

InvokingConfigManager(
	VOID
	);

IgnoreClosingElement(
	INT32 SizeOfNamespaceUri,
	UNICODESTRING NamespaceUri,
	INT32 LocalNameUri,
	UNICODESTRING LocalName
	);

GetResultsData(
	HEXINT32 Hresult
	);

BeginPkgProcessing(
	VOID
	);

IgnoringElementContent(
	INT32 SizeOfChars,
	UNICODESTRING Chars
	);

Initialize(
	HEXINT32 Hresult
	);

SyncMLSize(
	UINT32 SyncMLSize
	);

FailedParsingElementContent(
	HEXINT32 Hresult
	);

BatchingAllCommands(
	VOID
	);

AppendAlertStatus(
	HEXINT32 Hresult
	);

FailedParsingClosingElement(
	HEXINT32 Hresult
	);

OmaDmSyncMLDpuEnd(
	VOID
	);

SessionAbortedByServer(
	VOID
	);

FailedParsingOpeningElement(
	HEXINT32 Hresult
	);

InitializeSyncMLProcessingUnit(
	VOID
	);

UnknownElement(
	HEXINT32 Hresult
	);

ConfigManagerFailed(
	HEXINT32 Hresult
	);

OmaDmSyncMLDpuProcessDataEnd(
	HEXINT32 Hresult
	);

CommandFailedParsing(
	UINT32 Command,
	HEXINT32 Hresult
	);

FreePkgProcessing(
	VOID
	);

ParsingOpeningElement(
	INT32 SizeOfNamespaceUri,
	UNICODESTRING NamespaceUri,
	INT32 LocalNameUri,
	UNICODESTRING LocalName
	);

ActivityStoppedAutomatically(
	VOID
	);

FailedToParseOpeningTag(
	VOID
	);

TooManySourceElements(
	VOID
	);

TooManyDataElements(
	VOID
	);

GetItemExecHresult(
	HEXINT32 Hresult
	);

FailedParsingEndElement(
	HEXINT32 Hresult
	);

StartElement(
	HEXINT32 Hresult
	);

SetNodeProperties(
	HEXINT32 Hresult
	);

GetDataAsVariant(
	HEXINT32 Hresult
	);

GetExecutionHresult(
	HEXINT32 Hresult
	);

UnknownElementType(
	UINT32 SizeOfLocalName,
	UNICODESTRING LocalName
	);

FailedToParseClosingTag(
	VOID
	);

TooManyMetaElements(
	VOID
	);

EmptyLocUri(
	VOID
	);

EndElement(
	HEXINT32 Hresult
	);

ParseLocUri(
	HEXINT32 Hresult
	);

TooManyTargetElements(
	VOID
	);

ValidateData(
	HEXINT32 Hresult
	);

BatchUpItemExecution(
	HEXINT32 Hresult
	);

CmdIsInvalidCommand(
	VOID
	);

StatusCodeNotSpecified(
	VOID
	);

GetResultsData(
	HEXINT32 Hresult
	);

ItemElementCantBeNested(
	VOID
	);

ServerChallengedTheClient(
	VOID
	);

CreateStatusForItem(
	HEXINT32 Hresult
	);

NestedCommandsNotAllowed(
	VOID
	);

DoRecursiveQuery(
	HEXINT32 Hresult
	);

GetCannotNestUnderAtomicEvent(
	VOID
	);

StartCmdSpecificElement(
	HEXINT32 Hresult
	);

CreateResultForGet(
	HEXINT32 Hresult
	);

NestFailedBatchingUnderAtomic(
	INT32 Command,
	HEXINT32 Hresult
	);

DoShallowGet(
	HEXINT32 Hresult
	);

DataEmpty(
	VOID
	);

ShowUI(
	HEXINT32 Hresult
	);

CmdRefEmpty(
	VOID
	);

GetResultsDataGeneric(
	BOOL32 RebootNeeded,
	HEXINT32 Hresult
	);

NestFailedBatchingUnderSequence(
	INT32 NestedCommand,
	HEXINT32 Hresult
	);

UnknownNestedCommand(
	VOID
	);

AppendResultItem(
	HEXINT32 Hresult
	);

MetaUnderStatusOnlyWithinChal(
	VOID
	);

UnsupportedAuthType(
	UNICODESTRING pszType
	);

NonEmptyCmdID(
	VOID
	);

CreateCmd(
	HEXINT32 Hresult
	);

MsgRefEmpty(
	VOID
	);

BatchUpExecution(
	HEXINT32 Hresult
	);

CmdMustBeSyncHdrOrCommand(
	VOID
	);

VerifyDTD(
	HEXINT32 Hresult
	);

ReplaceNodeProperty(
	HEXINT32 Hresult
	);

EndCmdSpecificElement(
	HEXINT32 Hresult
	);

MsgRefAndMsgIDMismatch(
	INT32 StatusMsgRef,
	INT32 PreviousClientMsgID
	);

TooManyChallengesInPacket(
	VOID
	);

NotEnoughItemElements(
	INT32 m_cMinItems
	);

SequenceUnderSequenceCommand(
	VOID
	);

GetPropertyResult(
	HEXINT32 Hresult
	);

UnsupportedChalFormat(
	VOID
	);

TooMuchItemElements(
	INT32 m_cMaxItems
	);

MissingNestedUnderAtomicCommand(
	VOID
	);

OnlyOneChalUnderStatus(
	VOID
	);

OnlyOneChalWithinChal(
	VOID
	);

EmptyCmdFound(
	VOID
	);

ChalOnStatus(
	UNICODESTRING m_pszCmdRef
	);

MissingMetaUnderCommand(
	VOID
	);

ChalCanNotBeNested(
	VOID
	);

ParseUIOptions(
	HEXINT32 Hresult
	);

ReplaceNodeValue(
	HEXINT32 Hresult
	);

MissingNestedUnderSequenceCommand(
	VOID
	);

GetPropFromNode(
	HEXINT32 Hresult
	);

EmptyProperty(
	VOID
	);

UnknownProperty(
	VOID
	);

UnknownElementType(
	UINT32 SizeOfFullTag,
	UNICODESTRING FullTag
	);

NotSupportedOrUnknownProperty(
	VOID
	);

NotSupportedProperty(
	VOID
	);

CSPNodeBegin(
	UNICODESTRING NodeName,
	UNICODESTRING GUID
	);

SimpleNodeBegin(
	UNICODESTRING OriginalElementName,
	UNICODESTRING TranslatedPath
	);

CSPNodeEnd(
	HEXINT32 Hresult
	);

ApplicationNodeError(
	HEXINT32 Hresult,
	UNICODESTRING NodeName,
	UNICODESTRING AppId,
	UNICODESTRING GUID
	);

WapDpuRootNodeError(
	UNICODESTRING NodeName,
	UNICODESTRING GUID,
	HEXINT32 Hresult
	);

SimpleNodeEnd(
	HEXINT32 Hresult,
	UNICODESTRING OriginalElementName,
	UNICODESTRING TranslatedPath
	);

SimpleCSPNodeError(
	HEXINT32 Hresult,
	UNICODESTRING NodeName,
	UNICODESTRING TranslatedPath
	);

AddV2Node(
	INT32 HasNode,
	UNICODESTRING NodePath,
	UNICODESTRING AddV2Node
	);

QueryV2Node(
	INT32 HasNode,
	UNICODESTRING NodePath,
	UNICODESTRING QueryV2Node
	);

ExecV2Node(
	INT32 HasNode,
	UNICODESTRING NodePath,
	UNICODESTRING ExecV2Node
	);

HelperProcessNodeError(
	HEXINT32 Hresult,
	UNICODESTRING ElementName,
	UNICODESTRING NodeName,
	UNICODESTRING NodePath,
	UNICODESTRING NodePathWithScope
	);

SetV2Node(
	INT32 HasNode,
	UNICODESTRING NodePath,
	UNICODESTRING SetV2NodeValue
	);

HasV2Node(
	INT32 HasNode,
	UNICODESTRING NodePath,
	UNICODESTRING HasV2Node
	);

DeleteV2Node(
	INT32 HasNode,
	UNICODESTRING NodePath,
	UNICODESTRING DeleteV2Node
	);

ProcessDataProvisioningXML(
	ANSISTRING StdException
	);

ProcessDataProcessedRootNode(
	HEXINT32 Hresult
	);

OmaDmWapDpuEnd(
	VOID
	);

ProcessDataProvisioningXML(
	ANSISTRING "ValidateNode failed",
	UNICODESTRING bstrIri,
	HRESULT hr
	);

ProcessDataProvisioningXML(
	ANSISTRING "Removed non-supported node",
	UNICODESTRING bstrIri
	);

ProcessDataError(
	HEXINT32 Hresult,
	BINARY Data
	);

ProcessDataParsed(
	HEXINT32 Hresult
	);

OmaDmWapDpuStart(
	VOID
	);

ProcessDataCfgMgr2Skipped(
	HEXINT32 Hresult
	);

ProcessDataEnd(
	HEXINT32 Hresult
	);

ProcessDataProvisioningXML(
	HRESULT AtlException
	);

ActivityStoppedAutomatically(
	VOID
	);

ProcessDataCfgMgr2Executed(
	HEXINT32 Hresult
	);

WapNodeValidation(
	ANSISTRING "Failed to load DDF",
	UNICODESTRING pszDDFFileFullPath,
	HRESULT hr,
	BOOL32 fSuccess
	);

WapNodeValidation(
	ANSISTRING "IsPolicyNodeSupported failed",
	HRESULT hr
	);

WapNodeValidation(
	ANSISTRING "Enumerating DDFs under subfolder",
	UNICODESTRING directoryName.data(),
	BOOL32 IsMobilePlatform
	);

WapNodeValidation(
	HRESULT AtlException
	);

WapNodeValidationStart(
	ANSISTRING __TlgCV__
	);

WapNodeValidation(
	ANSISTRING StdException
	);

WapNodeValidationEnd(
	UINT32 Removed non-supported node count,
	HRESULT m_OperationHResult
	);

WapNodeValidationEnd(
	UINT32 Removed non-supported node count,
	HRESULT m_OperationHResult,
	ANSISTRING __TlgCV__
	);

WapNodeValidation(
	ANSISTRING "Failed to find DDF for CSP",
	UNICODESTRING pszCspName
	);

WapNodeValidationStart(
	VOID
	);

WapNodeValidation(
	HRESULT DefaultExceptionHr
	);

