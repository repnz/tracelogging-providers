ProviderNames:
	Microsoft.Windows.Security.Biometrics.CredentialProvider.FaceDiag
	Microsoft.Windows.Security.Biometrics.CredentialProvider.Face
	TelemetryAssert
	TelemetryAssertDiagTrack
	Microsoft.Windows.Wil.FeatureLogging



**** Events *****
EnableAutoLoggerForFeedback.WinBioDataModelProvider_WriteEventProvider(
	HRESULT ResultCode
	);

EnableAutoLoggerForFeedback.BioEnrollMentProvider_WriteEventProvider(
	HRESULT ResultCode
	);

EnableAutoLoggerForFeedback.BioEnrollment_WriteDataCollectorSet(
	HRESULT ResultCode
	);

EnableAutoLoggerForFeedback.FaceUnlockProvider_WriteEventProvider(
	HRESULT ResultCode
	);

EnableAutoLoggerForFeedback.FaceUnlock_WriteDataCollectorSet(
	HRESULT ResultCode
	);

EnableAutoLoggerForFeedback.FaceTelProvider_WriteEventProvider(
	HRESULT ResultCode
	);

EnableAutoLoggerForFeedback.FaceTel_WriteDataCollectorSet(
	HRESULT ResultCode
	);

WriteDataCollectorSet.LogFileMode_RegSetValueEx(
	HRESULT ResultCode
	);

WriteDataCollectorSet.MaxFileSize_RegSetValueEx(
	HRESULT ResultCode
	);

WriteDataCollectorSet.BufferSize_RegSetValueEx(
	HRESULT ResultCode
	);

WriteDataCollectorSet.FlushTimer_RegSetValueEx(
	HRESULT ResultCode
	);

WriteDataCollectorSet.Start_RegSetValueEx(
	HRESULT ResultCode
	);

WriteDataCollectorSet.LogFilePath_RegSetValueEx(
	HRESULT ResultCode
	);

WriteDataCollectorSet.LogFilePath_PathCchCombine(
	HRESULT ResultCode
	);

WriteDataCollectorSet.Guid_RegSetValueEx(
	HRESULT ResultCode
	);

WriteDataCollectorSet.RegCreateKey(
	HRESULT ResultCode
	);

WriteDataCollectorSet.RegPath_PathCchCombine(
	HRESULT ResultCode
	);

WriteEventProvider.RegSetValueEx(
	HRESULT ResultCode
	);

WriteEventProvider.RegCreateKey(
	HRESULT ResultCode
	);

WriteEventProvider.PathCchAppend(
	HRESULT ResultCode
	);

WriteEventProvider.PathCchCombine(
	HRESULT ResultCode
	);

AutoLogonRestriction::CanAutoDismissLockScreenWhenNotRecognized.True(
	VOID
	);

AutoLogonRestriction::CanAutoDismissLockScreenWhenNotRecognized.False(
	ANSISTRING Reason
	);

AutoLogonRestriction::IsFaceSeenImmediatelyAfterTheModuleIsLoaded(
	UINT64 FaceSeenTime,
	UINT64 ModuleLoadTime
	);

AutoLogonRestriction::IsConfirmationGreetingRequired.False(
	VOID
	);

AutoLogonRestriction::IsConfirmationGreetingRequired.False(
	ANSISTRING Reason
	);

AutoLogonRestriction::IsConfirmationGreetingRequired.True(
	ANSISTRING Reason
	);

AutoLogonRestriction::IsDismissLockScreenGreetingRequired.False(
	VOID
	);

AutoLogonRestriction::IsDismissLockScreenGreetingRequired.True(
	ANSISTRING Reason
	);

AutoLogonRestriction::IsDismissLockScreenGreetingRequired.False(
	ANSISTRING Reason
	);

AutoLogonRestriction::IsAutoLogonAllowed.True(
	VOID
	);

AutoLogonRestriction::IsAutoLogonAllowed.True(
	ANSISTRING Reason
	);

AutoLogonRestriction::IsAutoLogonAllowed.False(
	ANSISTRING Reason
	);

AutoLogonRestriction::IsAutoLogonAllowed.False(
	ANSISTRING Reason,
	BOOL32 IsFrameworkDownTimeActive
	);

AutoLogonRestriction::CanUserAutoLogon(
	BOOLEAN canAutoLogon
	);

AutoLogonRestriction::SetAutoLogonInProgress(
	BOOL32 value
	);

AutoLogonRestriction::SetDisplayState.LockScreenDismissedAtLeastOnce(
	VOID
	);

AutoLogonRestriction::SetDisplayState.DisplayTurnedOffAtLeastOnce(
	VOID
	);

AutoLogonRestriction::SetDisplayState.FailedToStoreLastLoggedOnUserSid(
	HRESULT ResultCode
	);

AutoLogonRestriction::SetDisplayState.LogOutScenario(
	VOID
	);

AutoLogonRestriction::SetDisplayState.UserSwitchScenario(
	VOID
	);

AutoLogonRestriction::SetDisplayState.LockScenario(
	VOID
	);

AutoLogonRestriction::SetDisplayState.ARSOLockScenario(
	VOID
	);

AutoLogonRestriction::SetDisplayState.ResumeFromHibernateOrScreenSaverScenario(
	VOID
	);

FrameworkNotAcceptingCredentials(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT64 DownTime
	);

FrameworkNotAcceptingCredentials(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 DownTime
	);

AutoLogonRestriction::ReadTimerValue.TimeToRequireConfirmationBeforeAutoLogon(
	UINT32 TimeInMilliSeconds
	);

AutoLogonRestriction::AutoLogonRestriction(
	UINT64 ModuleLoadTime
	);

BioPresenceCache::ManageRenewTicketTask.SchedulingTask(
	VOID
	);

BioPresenceCache::ManageRenewTicketTask.EndingTask(
	VOID
	);

BioPresenceCache::AddNewEntry.FaceAddedToCache(
	UINT64 trackingId
	);

RecognizedFaceButBlocked(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT64 TrackingId,
	ANSISTRING Reason,
	HRESULT Hresult
	);

RecognizedFaceButBlocked(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 TrackingId,
	ANSISTRING Reason,
	HRESULT Hresult
	);

RecognizedFaceButBlocked(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT64 TrackingId,
	ANSISTRING Reason
	);

RecognizedFaceButBlocked(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 TrackingId,
	ANSISTRING Reason
	);

Error(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	ANSISTRING FailureInfo,
	HRESULT ResultCode,
	UINT8 Category
	);

Error(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	ANSISTRING FailureInfo,
	HRESULT ResultCode,
	UINT8 Category
	);

NotRecognizedFace(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT64 TrackingId,
	BOOL32 LockScreenVisible
	);

NotRecognizedFace(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 TrackingId,
	BOOL32 LockScreenVisible
	);

RecognizedFace(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT64 TrackingId
	);

RecognizedFace(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 TrackingId
	);

BioPresenceCache::UpdateRecognizedFace.FaceUpdatedInCache(
	UINT64 trackingId
	);

BioPresenceCache::RemoveTrackedFace.FaceRemovedFromCache(
	UINT64 trackingId
	);

BioPresenceCache::RemoveTrackedFace.FaceNotFoundInCache(
	HRESULT ResultCode,
	UINT64 trackingId
	);

BioPresenceCache::Clear(
	VOID
	);

BioStateManager::GetNextStateToMoveTo.PersistingState(
	VOID
	);

BioStateManager::GetNextStateToMoveTo.SwitchingState(
	VOID
	);

BioStateManager::SetNewListenerState.Set(
	ANSISTRING NewState,
	UNICODESTRING Reason
	);

EventWrapper::Wait.Failed(
	HRESULT ResultCode
	);

EventWrapper::Set.Failed(
	HRESULT ResultCode
	);

BioUnitMonitor::ShouldWaitForPnpEnumeration.False(
	INT64 CallDuration
	);

BioUnitMonitor::ShouldWaitForPnpEnumeration.True(
	INT64 CallDuration
	);

BioUnitMonitor::ShouldWaitForPnpEnumeration.WinBioEnumBiometricUnitsFailed(
	HRESULT ResultCode
	);

PnpEnumerationDelayWorkerInfo(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	INT64 TimeSpentOnWaitingForTheBioUnit,
	BOOL32 WasWorkerDisabled,
	BOOL32 WasBioUnitFound
	);

PnpEnumerationDelayWorkerInfo(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	INT64 TimeSpentOnWaitingForTheBioUnit,
	BOOL32 WasWorkerDisabled,
	BOOL32 WasBioUnitFound
	);

BioUnitMonitor::EnableMonitor.Enabling...(
	VOID
	);

BioUnitMonitor::DisableMonitor.Disabling...(
	VOID
	);

ActivityStoppedAutomatically(
	VOID
	);

CredUIContext::ShouldShowNegotiateCredential(
	HRESULT ResultCode
	);

CredUIContext::ShouldShowNegotiateCredential(
	VOID
	);

CredUIContext::ProcessInputCredential(
	VOID
	);

CredUIContext::ProcessInputCredential::<lambda_dd5b974e86254a6472b70de3a58be28f>::operator ()(
	HRESULT ResultCode
	);

DeviceStateMonitor::OnPowerMessage.PowerSourceConnected(
	VOID
	);

DeviceStateMonitor::OnPowerMessage.PowerSourceDisconnected(
	VOID
	);

DeviceStateMonitor::OnWTSSessionChange.RemoteSessionInactive(
	VOID
	);

DeviceStateMonitor::OnWTSSessionChange.RemoteSessionActive(
	VOID
	);

DeviceStateMonitor::MonitorThread.FailedToDestroyWindow(
	HRESULT ResultCode
	);

DeviceStateMonitor::MonitorThread.Failed.RtlSubscribeWnfStateChangeNotification.TileSelected(
	HRESULT ResultCode
	);

DeviceStateMonitor::MonitorThread.Failed.RtlSubscribeWnfStateChangeNotification.UserLogon(
	HRESULT ResultCode
	);

DeviceStateMonitor::MonitorThread.Failed.PowerRegisterSuspendResumeNotification(
	HRESULT ResultCode
	);

DeviceStateMonitor::MonitorThread.Failed.RtlSubscribeWnfStateChangeNotification.ConnectedStandByExit(
	HRESULT ResultCode
	);

DeviceStateMonitor::MonitorThread.FailedToRegisterForPowerSettingNotifications.DisplayStatus(
	HRESULT ResultCode
	);

DeviceStateMonitor::MonitorThread.FailedToRegisterForSessionNotifications(
	HRESULT ResultCode
	);

DeviceStateMonitor::MonitorThread.FailedToSetWindowLongPtr(
	HRESULT ResultCode
	);

DeviceStateMonitor::MonitorThread.FailedToCreateWindow(
	HRESULT ResultCode
	);

DeviceStateMonitor::MonitorThread.FailedToRegisterClass(
	HRESULT ResultCode
	);

DeviceStateMonitor::MonitorThread(
	VOID
	);

DeviceStateMonitor::StopMonitoring.FailedToSetEvent(
	HRESULT ResultCode
	);

DeviceStateMonitor::StopMonitoring(
	VOID
	);

DeviceStateMonitor::RefreshData(
	VOID
	);

DeviceStateMonitor::StartMonitoring(
	VOID
	);

DeviceStateMonitor::DeviceStateMonitor.CreateStopEventFailed(
	HRESULT ResultCode
	);

DeviceStateMonitor::TileSelectionChangedCallback.SelectedUserHasNoEnrollment(
	VOID
	);

DeviceStateMonitor::UserLogonCallback.UserLogonWithPin(
	VOID
	);

DeviceStateMonitor::SuspendResumeCallback(
	VOID
	);

DeviceStateMonitor::ConnectedStandbyExitCallback(
	VOID
	);

DisplayOnRequester::BlockUntilReleased.WaitComplete(
	VOID
	);

DisplayOnRequester::BlockUntilReleased(
	VOID
	);

DisplayOnRequester::SetIfDisplayOnRequestsCanBeMade.CannotRequest(
	VOID
	);

DisplayOnRequester::SetIfDisplayOnRequestsCanBeMade.CanRequest(
	VOID
	);

DisplayOnRequester::RequestRelease.Released(
	UINT64 DisplayOnDurationLeftForSession
	);

DisplayOnRequester::RequestRelease.Failed(
	HRESULT ResultCode
	);

DisplayOnRequester::RequestRelease(
	UINT32 ReferenceCount
	);

DisplayOnRequester::ShouldAllowRequests.True(
	UINT32 MaxDisplayOnDurationAllowed
	);

DisplayOnRequester::RequestActive.Active(
	VOID
	);

DisplayOnRequester::RequestActive.Failed(
	HRESULT ResultCode
	);

DisplayOnRequester::RequestActive(
	UINT32 ReferenceCount
	);

DisplayOnRequester::ResetDisplayOnRequestInformation(
	VOID
	);

DisplayOnRequester::DisplayOnRequester.FailedToActivateIDisplayRequest(
	HRESULT ResultCode
	);

EventWrapper::Reset.Failed(
	HRESULT ResultCode
	);

DisplayStateManager::GetNextStateToMoveTo.PersistingState(
	VOID
	);

DisplayStateManager::GetNextStateToMoveTo.SwitchingState(
	VOID
	);

DisplayStateManager::QueueDisplayState.QueueDisplayState(
	HEXINT32 Flags,
	HEXINT32 Event
	);

DisplayStateManager::StopWorkerThread(
	VOID
	);

DisplayStateManager::StartWorkerThread(
	VOID
	);

EnrollOnFailureManager::LeaveCameraOn(
	BOOL32 leaveCameraOn
	);

EnrollOnFailureEnrollmentDiscarded(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT8 DiscardReason
	);

EnrollOnFailureEnrollmentDiscarded(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT8 DiscardReason
	);

EnrollOnFailureManager::ProcessCommitSignal.UnexpectedUserEnrolledState(
	SID sid
	);

EnrollOnFailureManager::ProcessCommitSignal.CommitEnrollment(
	SID sid
	);

EnrollOnFailureManager::ProcessCommitSignal(
	VOID
	);

EnrollOnFailureModeEnabled(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

EnrollOnFailureModeEnabled(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

FaceBioListener::DismissLockScreen(
	VOID
	);

FaceBioListener::ProcessUnlockUnitResult.WinBioUnlockUnit(
	HRESULT ResultCode
	);

EnrollOnFailureEnrollmentFailedToCommit(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	HRESULT Hresult
	);

EnrollOnFailureEnrollmentFailedToCommit(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	HRESULT Hresult
	);

EnrollOnFailureEnrollmentCommitted(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

EnrollOnFailureEnrollmentCommitted(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

FaceBioListener::ProcessControlUnitPrivilegeResult.WinBioControlUnitPrivilege(
	HRESULT ResultCode
	);

FaceBioListener::ProcessControlUnitPrivilegeResult(
	VOID
	);

FaceBioListener::ProcessLockUnitResult.WinBioLockUnit(
	HRESULT ResultCode
	);

FaceBioListener::ProcessLockUnitResult(
	VOID
	);

FaceBioListener::CommitEnrollmentOnFailure(
	HRESULT ResultCode
	);

FaceBioListener::CommitEnrollmentOnFailure(
	VOID
	);

FaceBioListener::HandleEnrollOnFailureTask(
	UNICODESTRING reason
	);

SwitchedProviderToFace(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

SwitchedProviderToFace(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

FaceBioListener::SwitchToFaceProviderIfRequired(
	VOID
	);

FaceBioListener::SwitchToPinProvider(
	VOID
	);

FaceBioListener::StopPowerSaverTask.StoppingPowerSaverTask(
	UINT16 PowerSaverTaskId
	);

FaceBioListener::StartPowerSaverTask.StartingPowerSaverTask(
	UINT16 PowerSaverTaskId,
	UINT32 TriggerTime
	);

FaceBioListener::RevertStateFromBeingDisabled(
	VOID
	);

PowerSavingModeEnded(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	BOOL32 IsUserTriggerredAction
	);

PowerSavingModeEnded(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	BOOL32 IsUserTriggerredAction
	);

FaceBioListener::EndPowerSavingMode.EndPowerSaverIfActive(
	VOID
	);

PowerSavingModeStarted(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

PowerSavingModeStarted(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

FaceBioListener::SwitchToPowerSavingMode.AbortingDueToPowerSaverTaskIdMismatch(
	VOID
	);

FaceBioListener::SwitchToPowerSavingMode.AbortingDueToPowerSaverTaskBeingCancelled(
	VOID
	);

FaceBioListener::SwitchToPowerSavingMode.AbortingDueToAutoLogon(
	VOID
	);

FaceBioListener::SwitchToPowerSavingMode(
	UINT16 PowerSaverTaskId
	);

FaceBioListener::HandlePowerStateChangesInternal.RestartingPowerSaverTask(
	VOID
	);

FaceBioListener::HandlePowerStateChangesInternal.InRemoteSessionModeAlready_Aborting(
	VOID
	);

FaceBioListener::HandlePowerStateChangesInternal(
	VOID
	);

FaceBioListener::StopHandlePowerStateChangesThread(
	VOID
	);

FaceBioListener::HandlePowerStateChanges(
	VOID
	);

RemoteSessionModeEnded(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	BOOL32 IsUserTriggerredAction
	);

RemoteSessionModeEnded(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	BOOL32 IsUserTriggerredAction
	);

RemoteSessionModeStarted(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

RemoteSessionModeStarted(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

FaceBioListener::HandleRemoteSessionStateChanges.InPowerSavingModeAlready_Aborting(
	VOID
	);

FaceBioListener::HandleRemoteSessionStateChanges(
	VOID
	);

FaceBioListener::HandleDelayLockScenario.DelayLockEnded(
	VOID
	);

FaceBioListener::HandleDelayLockScenario.DelayLocked(
	VOID
	);

FaceBioListener::SwitchProviderIfInFailedState.EnrollOnFailureNotRequired(
	BOOL32 *didSwitchProvider,
	BOOL32 IsLastLoggedOnProviderPIN
	);

FaceBioListener::HandleUnitStatusChange.HighBackLightingDetected(
	VOID
	);

FaceBioListener::HandleUnitStatusChange.SensorUnavailable(
	VOID
	);

FaceBioListener::HandleUnitStatusChange.MovingToListeningState_TriggerredByUnitArrival(
	VOID
	);

FaceBioListener::HandleUnitStatusChange.SensorAvailable(
	VOID
	);

FaceBioListener::ProcessFrameworkEvents.SensorStatusChanged(
	UINT32 Availability,
	UINT32 ReasonCode
	);

FaceBioListener::ProcessFrameworkEvents.FrameworkClosed(
	VOID
	);

FaceBioListener::EnableUserSwitchMode.InUserSwitchMode(
	VOID
	);

FaceBioListener::StartBioMonitoring(
	HRESULT ResultCode
	);

FaceBioListener::StartBioMonitoring(
	VOID
	);

TooManyWbiosrvcDisconnectionsStoppedRetrying(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

TooManyWbiosrvcDisconnectionsStoppedRetrying(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

ServerConnectionLost(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	HRESULT Hresult,
	UINT32 Retries
	);

ServerConnectionLost(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	HRESULT Hresult,
	UINT32 Retries
	);

FaceBioListener::TryReconnectingToServer.ServerConnectionLostAlreadyInProgress(
	VOID
	);

FaceBioListener::SetLogonSucceeded(
	VOID
	);

FaceBioListener::DisableBioListener.DisablingBioListener(
	VOID
	);

BioListenerDisabledDueToCredProvTimeout(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT32 state,
	BOOL32 PnpEnumerationDelay
	);

BioListenerDisabledDueToCredProvTimeout(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT32 state,
	BOOL32 PnpEnumerationDelay
	);

BioListenerDisabledDueToCameraStartupTimeout(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

BioListenerDisabledDueToCameraStartupTimeout(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

BioListenerDisabledDueToCameraConflict(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

BioListenerDisabledDueToCameraConflict(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

BioListenerDisabledActivatedDueToStartStreamingFailure(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

BioListenerDisabledActivatedDueToStartStreamingFailure(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

LockoutActivatedDueToNoEnrollments(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

LockoutActivatedDueToNoEnrollments(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

LockoutActivatedDueToLogonFailure(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

LockoutActivatedDueToLogonFailure(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

LockoutActivatedDueToSessionTeardownEvent(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

LockoutActivatedDueToSessionTeardownEvent(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

LockoutActivatedDueToDriverIntegrityCheckFailure(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

LockoutActivatedDueToDriverIntegrityCheckFailure(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

LockoutActivated(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

LockoutActivated(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

FaceBioListener::SetAutoLogonInProgress.Completed(
	VOID
	);

FaceBioListener::SetAutoLogonInProgress.InProgress(
	VOID
	);

FaceBioListener::ProcessWinBioRecognizeResult(
	VOID
	);

FaceBioListener::RequestSerializationIfRequiredInternal.SerializationRequested(
	VOID
	);

FaceBioListener::RequestSerializationIfRequiredInternal(
	VOID
	);

CameraTurnedOnSignalReceived(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	GUID CameraSessionID
	);

CameraTurnedOnSignalReceived(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	GUID CameraSessionID
	);

FaceBioListener::MoveToListeningState.RestartMonitorPresenceFailed(
	HRESULT ResultCode
	);

FaceBioListener::ProcessMonitorPresenceResult(
	HRESULT ResultCode
	);

FaceDepart(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT64 TrackingId
	);

FaceDepart(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 TrackingId
	);

FaceBioListener::ProcessMonitorPresenceResult.FaceTrackBadCapture(
	UINT64 TrackingId,
	UINT32 RejectDetail
	);

FaceArrive(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT64 TrackingId
	);

FaceArrive(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 TrackingId
	);

RecognitionPresenceEventReceived(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT64 TrackingId,
	UINT32 ChangeType,
	UINT32 IdentityType
	);

RecognitionPresenceEventReceived(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 TrackingId,
	UINT32 ChangeType,
	UINT32 IdentityType
	);

FaceBioListener::ProcessMonitorPresenceResult.MovingToListeningState_TriggerredByAPresenceEvent(
	VOID
	);

FaceBioListener::ProcessMonitorPresenceResult(
	INT32 presenceChangeType
	);

FaceBioListener::SetSpecificUser(
	HRESULT ResultCode
	);

FaceBioListener::SetSpecificUser(
	VOID
	);

FaceBioListener::SetUserArray(
	HRESULT ResultCode,
	UINT32 userCount
	);

FaceBioListener::SetUserArray(
	HRESULT ResultCode
	);

FaceBioListener::SetUserArray(
	VOID
	);

FaceBioListener::RestartMonitorPresence.ResumeMonitoringFailed(
	HRESULT ResultCode
	);

FaceBioListener::RestartMonitorPresence.CancelMonitoringFailed(
	HRESULT ResultCode
	);

FaceBioListener::RestartMonitorPresence(
	VOID
	);

FaceBioListener::RenewWinBioTicket(
	HRESULT ResultCode
	);

FaceBioListener::RenewWinBioTicket(
	VOID
	);

FaceBioListener::RenewSessionIfWasUnAdvised(
	VOID
	);

FaceBioListener::CancelMonitoring(
	HRESULT hr
	);

FaceBioListener::CancelMonitoring.WinbioCancelNotRequired(
	VOID
	);

FaceBioListener::StartListening(
	VOID
	);

CameraTurningOff(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	GUID CameraSessionID,
	BOOL32 DoesCameraProvideTurnOnNotifications,
	UINT8 CameraOnOffReason,
	UINT8 ACPowerStatus
	);

CameraTurningOff(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	GUID CameraSessionID,
	BOOL32 DoesCameraProvideTurnOnNotifications,
	UINT8 CameraOnOffReason,
	UINT8 ACPowerStatus
	);

FaceBioListener::StopListening.CameraTurningOffReason(
	UNICODESTRING Reason
	);

FaceBioListener::StopListening(
	VOID
	);

FaceBioListener::ResumeListening.ResumeListening(
	VOID
	);

FaceBioListener::ResumeListening.NoAccessToResumeSession(
	UINT32 NewState,
	UINT32 CurrentState
	);

FaceBioListener::ResumeListening.ResumeListening(
	UNICODESTRING reason
	);

FaceBioListener::SuspendListening.SuspendListening(
	UNICODESTRING reason
	);

FaceBioListener::CloseSessionAndWait(
	HRESULT ResultCode
	);

FaceBioListener::CloseSessionAndWait(
	VOID
	);

FaceBioListener::CloseSession(
	HRESULT ResultCode
	);

FaceBioListener::CloseSession(
	VOID
	);

FaceBioListener::StartMonitorPresence.MonitorPresenceSucceeded(
	VOID
	);

FaceBioListener::GetBiometricUnitId.ClosingSessionFirst...(
	VOID
	);

FaceBioListener::GetBiometricUnitId.PnpEnumerationDelayDetected(
	VOID
	);

FaceBioListener::OpenSession(
	HRESULT ResultCode
	);

FaceBioListener::OpenSession.MonitoringFrameworkChanges(
	VOID
	);

CameraTurningOn(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	GUID CameraSessionID,
	UINT8 CameraOnOffReason,
	UINT8 ACPowerStatus
	);

CameraTurningOn(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	GUID CameraSessionID,
	UINT8 CameraOnOffReason,
	UINT8 ACPowerStatus
	);

FaceBioListener::OpenSession.CameraTurningOnReason(
	UNICODESTRING Reason
	);

FaceBioListener::OpenSession.AbortingDueToPnpEnumerationDelay(
	VOID
	);

FaceBioListener::OpenSession(
	VOID
	);

FaceBioListener::UnAdvise(
	VOID
	);

FaceBioListener::Advise(
	VOID
	);

FaceBioListener::~FaceBioListener(
	HRESULT ResultCode
	);

FaceBioListener::~FaceBioListener(
	VOID
	);

FaceBioListener::FrameworkCallbackHandler.ProviderObjectIsInvalid(
	HRESULT ResultCode
	);

FaceBioListener::SessionCallbackHandler.ProviderObjectIsInvalid(
	HRESULT ResultCode
	);

FaceBioListener::SessionCallbackHandler.SessionClosed(
	VOID
	);

FaceBioListener::SessionCallbackHandler.CommitEnrollmentIsInProgress(
	VOID
	);

FaceBioListener::SessionCallbackHandler.Data(
	HRESULT ApiStatus,
	UINT32 Operation
	);

FaceLoggingInformation::SetAuthScenario(
	UNICODESTRING AuthScenario
	);

FaceProvider::IsDeviceCapable(
	BOOL32 isDeviceCapable,
	UINT32 CredentialProviderType
	);

FaceProvider_CreateInstance.ProviderObjectCreated(
	UINT32 Index
	);

FaceProvider::DoesBioServiceRequireExtraTimeToBootstrapFaceDriver.True(
	VOID
	);

FaceProvider::ShowSubmitButtonsOnCredentials.ShowingSubmitButtonOnTiles(
	VOID
	);

FaceProvider::GetCredentialTileOnlyIfOneCredentialIsEnumerated(
	BOOL32 IsTileFound
	);

FaceProvider::GetCredentialTileOnlyIfOneCredentialIsEnumerated.MultipleUserTilesAreEnumerated(
	VOID
	);

FaceProvider::GetSelectedCredentialTile.FoundSelectedCredentialTile(
	VOID
	);

FaceProvider::SetDisplayStateInternal.NotSuspendingOrResuming(
	VOID
	);

FaceProvider::SetDisplayStateInternal.StartSuspension(
	VOID
	);

FaceProvider::SetDisplayStateInternal.SessionTeardownFlagReceivedAgain(
	VOID
	);

FaceProvider::SetDisplayStateInternal.PassiveMode(
	VOID
	);

FaceProvider::SetDisplayStateInternal(
	HEXINT32 CurrentFlags,
	HEXINT32 Event,
	HEXINT32 PreviousFlags
	);

FaceProvider::SetDisplayStateInternal::<lambda_61b68b9284acc1b5ed9a867cab7f7b0e>::operator ()(
	HRESULT ResultCode
	);

FaceProvider::HandleDeviceStateChanges(
	UINT8 StateChange
	);

FaceProvider::RefreshCredentials.CredentialsChanged(
	HRESULT hresult
	);

FaceProvider::RefreshCredentials(
	VOID
	);

FaceProvider::CreateCredential.FailedToInitializeCredential(
	HRESULT ResultCode
	);

FaceProvider::SetUserArray(
	VOID
	);

FaceProvider::GetCredentialAt(
	UINT32 index
	);

FaceProvider::GetCredentialCount.EnumeratedCredentials(
	UINT32 Count,
	UINT32 Default,
	INT32 AutoLogonWithDefault
	);

FaceProvider::GetCredentialCount.PassiveMode(
	VOID
	);

FaceProvider::UnAdvise.Resetting.SessionState(
	VOID
	);

FaceProvider::UnAdvise.PassiveMode(
	VOID
	);

FaceProvider::UnAdvise(
	VOID
	);

FaceProvider::Advise.PassiveMode(
	VOID
	);

FaceProvider::Advise(
	VOID
	);

FaceProvider::CanAutoDismissLockScreenWhenNotRecognized.True(
	VOID
	);

FaceProvider::CanAutoDismissLockScreenWhenNotRecognized.False(
	ANSISTRING Reason
	);

FaceProvider::DismissLockScreen(
	VOID
	);

FaceProvider::RequestSerialization.MatchingCredentialNotFound(
	HRESULT ResultCode
	);

FaceProvider::RequestSerialization(
	VOID
	);

DeviceInformation(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	BOOLEAN AreEnrollmentsPresent,
	UINT32 EnrollmentType
	);

DeviceInformation(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	BOOLEAN AreEnrollmentsPresent,
	UINT32 EnrollmentType
	);

DeviceInformation(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	BOOLEAN AreEnrollmentsPresent,
	UINT32 EnrollmentType,
	BOOLEAN IsDeviceFaceCapable,
	BOOLEAN IsSourceProviderAvailable,
	BOOLEAN IsFrameServerInfraredSensorAvailable,
	BOOLEAN IsFrameServerColorSensorAvailable,
	UINT64 ExtraTimeToCompleteSensorCapabilityCheck,
	UNICODESTRING SourceProvidersAvailable
	);

DeviceInformation(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	BOOLEAN AreEnrollmentsPresent,
	UINT32 EnrollmentType,
	BOOLEAN IsDeviceFaceCapable,
	BOOLEAN IsSourceProviderAvailable,
	BOOLEAN IsFrameServerInfraredSensorAvailable,
	BOOLEAN IsFrameServerColorSensorAvailable,
	UINT64 ExtraTimeToCompleteSensorCapabilityCheck,
	UNICODESTRING SourceProvidersAvailable
	);

FaceProvider::SetUsageScenario(
	HRESULT ResultCode,
	ANSISTRING type
	);

FaceProvider::SetUsageScenario.PassiveMode(
	VOID
	);

SettingUsageScenarioCompleted(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT16 Counter
	);

SettingUsageScenarioCompleted(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT16 Counter
	);

DisabledDueToTooManyUncompletedCredentialProviderInstances(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT32 UncompletedCredentialProviderInstances
	);

DisabledDueToTooManyUncompletedCredentialProviderInstances(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT32 UncompletedCredentialProviderInstances
	);

SessionStart(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

SessionStart(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

BioLogonDisallowed(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT32 EnrollmentType
	);

BioLogonDisallowed(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT32 EnrollmentType
	);

BiometricsBlockedByGroupPolicy(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

BiometricsBlockedByGroupPolicy(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

FaceProvider::SetUsageScenario(
	UINT8 usageScenario,
	UINT32 usageFlags,
	ANSISTRING type
	);

FaceProvider::FireFaceAuthenticationFeatureUsageEvent.Suppressed(
	UINT32 CredentialProviderType,
	BOOL32 isFeatureUsageTrackingEnabled
	);

FaceProvider::FireFaceAuthenticationFeatureUsageEvent.UniqueOpportunity(
	VOID
	);

FaceProvider::FireFaceAuthenticationFeatureUsageEvent.UniqueUsage(
	VOID
	);

FaceProvider::ReadOneSettings.ReadOneSettingsFailed(
	HRESULT ResultCode
	);

FaceProvider::~FaceProvider(
	HRESULT ResultCode
	);

SessionEnd(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	BOOL32 IsLoggedOnUserEnrolled,
	UINT16 MaxSimultaneousDetections,
	UINT8 AuthScenario,
	BOOL32 IsDelayLocked,
	HEX AutoRotationState,
	UINT8 ACPowerStatus,
	BOOL32 IsRemoteSessionActive,
	UINT64 MaxRecognizingMessageShownTime,
	UINT64 FrameworkDownTime,
	INT32 NumberOfDisplaysConnectedOnDevice,
	BOOL32 IsMultiFactorScenario,
	BOOL32 IsHeadMountedDisplayEnvironment,
	BOOL32 IsHolographicEnvironment
	);

SessionEnd(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	BOOL32 IsLoggedOnUserEnrolled,
	UINT16 MaxSimultaneousDetections,
	UINT8 AuthScenario,
	BOOL32 IsDelayLocked,
	HEX AutoRotationState,
	UINT8 ACPowerStatus,
	BOOL32 IsRemoteSessionActive,
	UINT64 MaxRecognizingMessageShownTime,
	UINT64 FrameworkDownTime,
	INT32 NumberOfDisplaysConnectedOnDevice,
	BOOL32 IsMultiFactorScenario,
	BOOL32 IsHeadMountedDisplayEnvironment,
	BOOL32 IsHolographicEnvironment
	);

FaceProvider::~FaceProvider.RefreshEnrolledUsersRegistryFailed(
	HRESULT ResultCode
	);

FaceProvider::~FaceProvider.IsFaceAuthenticationBlockedByGroupPolicyForLastLoggedOnUser(
	BOOL32 isFaceAuthenticationBlockedByGroupPolicy
	);

FaceProvider::~FaceProvider(
	VOID
	);

ShowFaceToastsIfRequired(
	BOOL32 isDeviceCapable,
	BOOL32 areEnrollmentsPresent,
	UINT32 CredentialProviderType
	);

FaceBiometricReaderQueryManager::{ctor}::<lambda_e0318b5d5f2344b982b88bd5f8103083>::operator ()(
	BOOL32 _doesBioServiceRequireExtraTimeToBootstrapFaceDriver,
	BOOL32 isReaderInstalled
	);

FaceBiometricReaderQueryManager::{ctor}::<lambda_e0318b5d5f2344b982b88bd5f8103083>::operator ().DriverPackageVersion(
	UNICODESTRING infDriverVersion.c_str()
	);

Windows::Analog::Face::QueryFaceBiometricReader::ReadSoftwareDeviceInformation.FoundHelloFaceSoftwareDevice(
	VOID
	);

Windows::Analog::Face::QueryFaceBiometricReader::ReadSoftwareDeviceInformation.ReadDriverRecognitionTechVersionRegKey(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::ReadSoftwareDeviceInformation.ReadDriverPackageTypeRegKey(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::CheckIfDriverPackageIsAvailable.AllocateString(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::CheckIfDriverPackageIsAvailable.PathCchCombineMigrationInfPath(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::CheckIfDriverPackageIsAvailable.CopyInfPath(
	HRESULT ResultCode,
	UINT32 returnValue
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsTheFaceBiometricReaderInstalled(
	BOOL32 isInstalled
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsTheFaceBiometricReaderInstalled.FoundDeviceNode(
	VOID
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsTheFaceBiometricReaderInstalled.OpenDeviceNodeKey(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsTheFaceBiometricReaderInstalled.LocateDeviceNode(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsTheFaceBiometricReaderInstalled.GetDeviceInterfaceProperty(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsTheFaceBiometricReaderInstalled.FoundInterfaceNode(
	VOID
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsTheFaceBiometricReaderInstalled.GetSymbolicLinkName(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsTheFaceBiometricReaderInstalled.FoundSensors(
	UINT32 Count
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsTheFaceBiometricReaderInstalled.NoDevicesFound(
	VOID
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsTheFaceBiometricReaderInstalled.get_Size(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsTheFaceBiometricReaderInstalled.FindAllAsyncAqsFilterCompletion(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsTheFaceBiometricReaderInstalled.FindAllAsyncAqsFilter(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsTheFaceBiometricReaderInstalled.ActivateDeviceInformationClass(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsTheFaceBiometricReaderInstalled.StartingQuery(
	VOID
	);

Windows::Analog::Face::QueryFaceBiometricReader::ParseDriverInf.ParseRecognitionTech(
	HRESULT ResultCode,
	UNICODESTRING infPath.c_str()
	);

Windows::Analog::Face::QueryFaceBiometricReader::ParseDriverInf.OpenFile(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::ParseDriverInf.AllocateString(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::ParseDriverInf.ReadRecognitionTechVersion(
	HRESULT ResultCode,
	UNICODESTRING line.c_str()
	);

Windows::Analog::Face::QueryFaceBiometricReader::ParseDriverInf.InfPathIsEmpty(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsDriverUpdateRequired(
	BOOL32 returnValue
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsDriverUpdateRequired.DriverInfVersionWasPreviouslyUsedForInstallationAttempt_DoNotRetry(
	VOID
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsDriverUpdateRequired.DriverVersions(
	UNICODESTRING driverInfVersionPreviouslyUsedForInstallationAttempt
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsDriverUpdateRequired.GetDriverInfVersionPreviouslyUsedForInstallationAttempt(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsDriverUpdateRequired.DriverPackageIsAlreadyInstalled(
	VOID
	);

Windows::Analog::Face::QueryFaceBiometricReader::IsDriverUpdateRequired.DriverVersions(
	UNICODESTRING driverVersionInInf.c_str(),
	UNICODESTRING installedDriverVersion.c_str()
	);

Windows::Analog::Face::QueryFaceBiometricReader::CheckIfDriverPackagesAreAvailable(
	BOOL32 doesCleanInstallInfExist,
	BOOL32 doesMigrationInfExist
	);

Windows::Analog::Face::QueryFaceBiometricReader::CheckIfDriverPackagesAreAvailable.FailedToGetSystemDirectory(
	HRESULT ResultCode
	);

Windows::Analog::Face::QueryFaceBiometricReader::CheckIfDriverPackagesAreAvailable.PickingTestDriverPackagePath(
	VOID
	);

FeatureError(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	HRESULT hr,
	ANSISTRING file,
	UINT16 lineNumber,
	ANSISTRING module,
	ANSISTRING process,
	ANSISTRING originFile,
	UINT16 originLineNumber,
	ANSISTRING originModule,
	ANSISTRING originName,
	ANSISTRING message,
	ANSISTRING callerModule,
	UINT32 callerReturnAddressOffset,
	ANSISTRING originCallerModule,
	UINT32 originCallerReturnAddressOffset
	);

FeatureVariantUsage(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	BOOLEAN enabled,
	UINT32 variantKind,
	UINT8 variant,
	UINT64 addend
	);

EnabledFeatureUsage(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	BOOLEAN enabled,
	UINT32 kind,
	UINT64 addend
	);

FeatureUsage(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	BOOLEAN enabled,
	UINT32 kind,
	UINT64 addend
	);

FallbackError(
	UINT64 PartA_PrivTags,
	SIGNED wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

FallbackError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

FaceCredential::SwitchProvider.Failed(
	HRESULT hresult
	);

FaceCredential::SwitchProvider.SwitchToPinProvider(
	VOID
	);

FaceCredential::SwitchProvider.SwitchToPasswordProvider(
	VOID
	);

FaceCredential::SwitchProvider.SwitchToFaceProvider(
	VOID
	);

FaceCredential::SerializeNgcSmartCardCredential(
	VOID
	);

FaceCredential::SerializeNgcSmartCardCredential::<lambda_bc08f3fc9086c3dabca27890a2bf40c9>::operator ()(
	HRESULT ResultCode
	);

FaceCredential::SerializeNgcGestureCredential(
	VOID
	);

FaceCredential::SerializeNgcGestureCredential::<lambda_9bdbceff1ce4d0fe60df8565fc34e7db>::operator ()(
	HRESULT ResultCode
	);

FaceCredential::SerializeNgcConvenienceCredential(
	VOID
	);

FaceCredential::SerializeNgcConvenienceCredential::<lambda_3a711f1ca3865f519a580ae9694c37d2>::operator ()(
	HRESULT ResultCode
	);

FaceCredential::SerializeNgcSspiCredential(
	VOID
	);

FaceCredential::SerializeNgcSspiCredential::<lambda_f136551f8846e4b9073ddbb086a025da>::operator ()(
	HRESULT ResultCode
	);

FaceCredential::SerializeNgcCredential(
	VOID
	);

FaceCredential::SerializeNgcCredential::<lambda_6d0cb71a37a3bf348102835b8bf36957>::operator ()(
	HRESULT ResultCode
	);

ForceDismissedLockScreen(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

ForceDismissedLockScreen(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

FaceCredential::DismissLockScreen.ForceDismissLockScreenFailed(
	HRESULT ResultCode
	);

FaceCredential::DismissLockScreen(
	VOID
	);

LogOnInitiated(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT64 TrackingId
	);

LogOnInitiated(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 TrackingId
	);

FaceCredential::RequestSerialization.RequestSerializationSucceeded(
	BOOL32 IsOtherUserTile
	);

FaceCredential::RequestSerializationHelper.RequestUserTileSelectionSucceeded(
	VOID
	);

FaceCredential::RequestSerializationHelper.SerializationAlreadyRequested(
	VOID
	);

Error(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	ANSISTRING FailureInfo,
	HRESULT ResultCode,
	UINT8 Category,
	BOOLEAN ShouldEnableButton
	);

Error(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	ANSISTRING FailureInfo,
	HRESULT ResultCode,
	UINT8 Category,
	BOOLEAN ShouldEnableButton
	);

FaceCredential::UpdateSubmitButtonState.DisablingSubmitButton(
	VOID
	);

FaceCredential::UpdateSubmitButtonState.EnablingSubmitButton(
	VOID
	);

FaceCredential::UpdateSubmitButtonState.UpdatingCredUISubmitButton(
	BOOLEAN EnableButton
	);

FaceCredential::UpdateCredUiButtonState.Failed(
	INT32 hresult
	);

FaceCredential::SetFieldString.SetFieldStringFailed(
	HRESULT hresult
	);

FaceCredential::GetBitmapBufferValue(
	HRESULT ResultCode
	);

FaceCredential::GetBitmapBufferValue(
	VOID
	);

FaceCredential::ReportResult(
	HRESULT ResultCode
	);

FaceCredential::ReportResult.RequireSwitchToPasswordProvider(
	VOID
	);

FaceCredential::ReportResult.ConvertSidToStringSidWFailed(
	HRESULT ResultCode
	);

LogonFailed(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	NTSTATUS Status,
	NTSTATUS Substatus
	);

LogonFailed(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	NTSTATUS Status,
	NTSTATUS Substatus
	);

LogonSucceeded(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

LogonSucceeded(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

FaceCredential::ReportResult(
	INT32 ntstatus,
	INT32 ntsubstatus
	);

FaceCredential::GetSerialization(
	HRESULT ResultCode
	);

AuthenticationFailed(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT64 TrackingId
	);

AuthenticationFailed(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 TrackingId
	);

AuthenticationSucceeded(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT64 TrackingId,
	BOOLEAN IsAutoDismissSettingEnabled
	);

AuthenticationSucceeded(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 TrackingId,
	BOOLEAN IsAutoDismissSettingEnabled
	);

SerializingCredential(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT64 TrackingId
	);

SerializingCredential(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 TrackingId
	);

FaceCredential::GetSerialization(
	VOID
	);

FaceCredential::GetSerialization.GetSerialization.EarlyReturn(
	VOID
	);

SerializeResponse(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT64 TrackingId,
	HRESULT Hresult,
	BOOLEAN IsConvenienceCredential,
	UINT32 AccountType,
	UINT32 KeyImplType,
	UINT32 SerializationType
	);

SerializeResponse(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 TrackingId,
	HRESULT Hresult,
	BOOLEAN IsConvenienceCredential,
	UINT32 AccountType,
	UINT32 KeyImplType,
	UINT32 SerializationType
	);

FaceCredential::GetBitmapValue.FailedToLoadBitmap(
	HRESULT hresult
	);

FaceCredential::GetBitmapValue.GetBitmapVal(
	UINT32 expected,
	UINT32 actual
	);

TileDeselected(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

TileDeselected(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

TileSelected(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

TileSelected(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

FaceCredential::UnAdvise(
	VOID
	);

FaceCredential::Advise.FailedToCopyCredentialEventsInterface(
	HRESULT hresult
	);

FaceCredential::Advise(
	VOID
	);

ReadyToProduceCredentials(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	UINT64 TrackingId
	);

ReadyToProduceCredentials(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 TrackingId
	);

FaceCredential::UpdateCredential.UserManagerInitializationFailed(
	HRESULT hresult
	);

FaceCredential::UpdateCredential.TrackedFaceIsRecognized(
	VOID
	);

FaceCredential::UpdateCredential.UpdatingTrackedFace(
	UINT64 TrackingID,
	BOOL32 IsOtherTile
	);

FaceCredential::Initialize.OutOfMemoryException(
	VOID
	);

FaceCredential::Initialize(
	VOID
	);

FailureHandler::SetShouldErrorFeedbackPersist.ReleasingTheFreezeOnErrorFeedback(
	VOID
	);

FailureHandler::SwitchProviderIfInFailedState(
	BOOL32 isInErrorState,
	BOOL32 didSwitchProvider
	);

FailureHandler::SetShouldErrorFeedbackPersist.PersistingErrorFeedback(
	VOID
	);

SwitchedProviderDueToFailure(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	BOOL32 DidSwitchToPassword,
	UINT32 FailureResourceID
	);

SwitchedProviderDueToFailure(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	BOOL32 DidSwitchToPassword,
	UINT32 FailureResourceID
	);

FailureHandler::StoreFeedbackType(
	VOID
	);

FeedbackUpdater::UpdateFeedback.Feedback(
	UNICODESTRING string
	);

FeedbackUpdater::UpdateFeedback.Failed(
	HRESULT ResultCode
	);

FeedbackUpdater::UpdateBioFeedback.Failed(
	HRESULT ResultCode
	);

FeedbackUpdater::UpdateFeedback.SelectedCredentialIsNull(
	HRESULT ResultCode
	);

FeedbackUpdater::UpdateBioFeedback.BioFeedback(
	UNICODESTRING String,
	UNICODESTRING AccessibilityText,
	UNICODESTRING BioFeedbackPriority,
	UINT16 VisualState,
	UINT32 BlankedResourceId,
	BOOL32 WasShown
	);

FeedbackUpdater::SetNewFeedback(
	VOID
	);

ShouldWaitForJobCompletion.True(
	VOID
	);

ShouldShowFeedbackImmediately.True(
	VOID
	);

FrameServerHelper::ProcessMediaFrameSourceGroup.MultipleFaceDDI-IgnoringSourceGroup(
	HRESULT ResultCode
	);

FrameServerHelper::ProcessMediaFrameSourceGroup.GetDeviceInformationFailed(
	HRESULT ResultCode
	);

FrameServerHelper::ProcessMediaFrameSourceGroup.GetSourceKindFailed(
	HRESULT ResultCode
	);

FrameServerHelper::ProcessMediaFrameSourceGroup.GetStreamKindFailed(
	HRESULT ResultCode
	);

FrameServerHelper::ProcessMediaFrameSourceGroup.GetSourceInfoFailed(
	HRESULT ResultCode,
	UINT32 Index
	);

FrameServerHelper::ProcessMediaFrameSourceGroup.GetSizeOfSourceInfoFailed(
	HRESULT ResultCode
	);

FrameServerHelper::CheckIfIsFrameServerSourceGroupIsAvailable.ProcessMediaFrameSourceGroupFailed(
	HRESULT hresult
	);

FrameServerHelper::CheckIfIsFrameServerSourceGroupIsAvailable.AnalysisCompleted(
	HRESULT result
	);

FrameServerHelper::CheckIfIsFrameServerSourceGroupIsAvailable.GetMediaFrameSourceGroupFromIdAsyncFailed(
	HRESULT hresult
	);

FrameServerHelper::CheckIfIsFrameServerSourceGroupIsAvailable.GetMediaFrameSourceGroupFromIdAsyncCompletionFailed(
	HRESULT ResultCode
	);

FrameServerHelper::CheckIfIsFrameServerSourceGroupIsAvailable.FailedToGetTheDeviceId(
	HRESULT ResultCode
	);

FrameServerHelper::CheckIfIsFrameServerSourceGroupIsAvailable.FailedToActivateMediaFrameSourceGroupStatics(
	HRESULT ResultCode
	);

FrameServerHelper::CheckIfIsFrameServerSourceGroupIsAvailable.FailedToGetDeviceAtIndex(
	HRESULT ResultCode,
	UINT32 Index
	);

FrameServerHelper::CheckIfIsFrameServerSourceGroupIsAvailable.FailedToGetDeviceCollectionSize(
	HRESULT ResultCode
	);

FrameServerHelper::CheckIfIsFrameServerSourceGroupIsAvailable.FailedToFindAllAsyncAqsFilter(
	HRESULT ResultCode
	);

FrameServerHelper::CheckIfIsFrameServerSourceGroupIsAvailable.FindAllAsyncAqsFilterFailedToComplete(
	HRESULT ResultCode
	);

FrameServerHelper::CheckIfIsFrameServerSourceGroupIsAvailable.FailedToActivateDeviceInformation(
	HRESULT ResultCode
	);

CheckForFaceDDI.GetFaceAuthCapabilityFailed(
	HRESULT ResultCode
	);

CheckForFaceDDI.FailedToMeetFaceAuthCapabilityRequirement(
	HRESULT ResultCode
	);

CheckForFaceDDI.CastAsIPropertyValueFailed(
	HRESULT ResultCode
	);

CheckForFaceDDI.PropertyLookupFailed(
	HRESULT hresult
	);

HelloToastHandler::DeleteShowEnrollmentFlowTaskIfExists.FailedToResetEnrollmentFlowTaskCreatedRegValue(
	HRESULT ResultCode
	);

HelloToastHandler::DeleteShowEnrollmentFlowTaskIfExists.FailedToDeleteTask(
	HRESULT ResultCode
	);

HelloToastHandler::DisableCreateEnrollmentToast.SetRegKeyFailed(
	HRESULT ResultCode
	);

HelloToastHandler::DeleteShowEnrollmentFlowTaskIfExists.DeletedTask(
	VOID
	);

HelloToastHandler::ShowToast(
	UNICODESTRING toastTag
	);

HelloToastHandler::ShowImproveRecognitionToast.SuppressedShowImproveRecognitionToast(
	BOOL32 hasEnoughTimePassedSinceLastNotification
	);

HelloToastHandler::HasEnoughTimePassedSinceLastNotification(
	UNICODESTRING subKey,
	UNICODESTRING notificationRegKey,
	UINT32 notificationIntervalInDays
	);

ImproveRecognitionToastShown(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

HelloToastHandler::ShowImproveRecognitionToast.ShowToastFailed(
	HRESULT ResultCode
	);

HighBackLightingDetectedToastShown(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

ImproveRecognitionToastShown(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

HelloToastHandler::ShowImproveRecognitionToast(
	UNICODESTRING userSid
	);

HighBackLightingDetectedToastShown(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.RegisterTaskDefinitionFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.Succeeded(
	VOID
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.SetExecuteActionFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.CreateExecuteActionFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.SetTaskExecutableFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.CreateActionFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.SetTriggerDelayFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.GetActionCollectionReferenceFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.SetTriggerIDFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.CreateTriggerFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.FailedToQueryForIRegistrationTrigger(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.GetTriggerCollectionFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.SetDoNotStopIfGoingOnBatteriesFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.SetStartWhenAvailableFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.SetAllowStartIfOnBatteriesFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.CreateTaskSettingsFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.SetPrincipalRunLevelFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.SetPrincipalIdFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.SetPrincipalLogonTypeFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.GetTaskPrincipalFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.SetAuthorInfoFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.CreateTaskDefinitionFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow.GetRegistrationInfoFailed(
	HRESULT ResultCode
	);

HelloToastHandler::CreateTaskToShowEnrollmentFlow(
	VOID
	);

HelloToastHandler::ShowEnrollmentFlow.FailedToSetEnrollmentFlowTaskCreatedRegValue(
	HRESULT ResultCode
	);

HelloToastHandler::ShowEnrollmentFlow(
	VOID
	);

HelloToastHandler::ShowEnrollmentFlow.Failed(
	HRESULT ResultCode
	);

HelloToastHandler::ShouldShowCreateEnrollmentToast.True(
	VOID
	);

HelloToastHandler::ShouldShowCreateEnrollmentToast.False(
	BOOL32 enrollmentPromptCount,
	UINT32 MaxCreateEnrollmentNotifications,
	BOOL32 hasEnoughTimePassedSinceLastNotification
	);

HelloToastHandler::ShouldShowCreateEnrollmentToast.FailedToCreatbzeRegKey(
	HRESULT ResultCode
	);

HelloToastHandler::ShowCreateEnrollmentToast.SHRegSetFILETIMEFailed(
	HRESULT ResultCode
	);

HelloToastHandler::ShowCreateEnrollmentToast.SHRegIncrementDWORDFailed(
	HRESULT ResultCode
	);

HelloToastHandler::ShowCreateEnrollmentToast.SettingCurrentTimeToBeUsedForFutureNotifications(
	VOID
	);

CreateEnrollmentToastShown(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

HelloToastHandler::ShowCreateEnrollmentToast.ShowToastFailed(
	HRESULT ResultCode
	);

CreateEnrollmentToastShown(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

CreateEnrollmentFlowShown(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

CreateEnrollmentFlowShown(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

HelloToastHandler::ShowCreateEnrollmentToast(
	VOID
	);

NoEnrollmentToastShown(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

NoEnrollmentToastShown(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

HelloToastHandler::ShowFaceToasts.SuppressedShowImproveRecognitionToast(
	BOOL32 didUserHaveTroubleGettingLoggedOnWithFace,
	BOOL32 isEnrollOnFailureEnrollmentCommitted
	);

HelloToastHandler::ShowFaceToasts.FailedToShowImproveRecognitionToast(
	HRESULT ResultCode
	);

HelloToastHandler::ShowFaceToasts.ConvertStringSidToSidFailed(
	HRESULT ResultCode
	);

HelloToastHandler::ShowFaceToasts.SHRegGetStringFailed(
	HRESULT ResultCode
	);

HelloToastHandler::ShowFaceToasts.FailedToShowNoEnrollmentsToast(
	HRESULT ResultCode
	);

HelloToastHandler::ShowFaceToasts(
	VOID
	);

HelloToastHandler::ShowFaceToasts.FailedToShowCreateEnrollmentToast(
	HRESULT ResultCode
	);

HelloToastHandler::Activate(
	UNICODESTRING appUserModelId,
	UNICODESTRING invokedArgs
	);

OneSettingsHelper::ReadOneSettings.OneSettingsGetSetting(
	INT32 hr,
	UNICODESTRING SettingName,
	UINT32 SettingValue
	);

OneSettingsHelper::ReadOneSettings.OneSettingsQueryCache(
	INT32 hr
	);

OneSettingsHelper::ReadOneSettings(
	VOID
	);

OneSettingsHelper::ReadOneSettings.CreateOneSettingsQuery(
	INT32 hr
	);

OneSettingsHelper::ReadOneSettings::<lambda_5e6ce46ccc74a7c68a2898821609ef3a>::operator ()(
	HRESULT ResultCode
	);

SessionStateManager::Revert.SessionState(
	UINT16 NewState
	);

SessionStateManager::DecreaseSuspendLevel.True(
	VOID
	);

SessionStateManager::operator =.SessionState(
	UINT16 NewState,
	BOOL32 HasCallbackSet
	);

SuspendedTask::EndSuspendedTask.Failed(
	HRESULT ResultCode
	);

SuspendedTask::RunTask(
	BOOL32 _isDisabled
	);

SuspendedTask::RunSuspendedTask.Failed(
	HRESULT ResultCode
	);

FaceUtils::ThreadUILanguageHandler::RestoreThreadPreferredUILanguages.FailedToRestoreThreadPreferredUILanguages(
	HRESULT ResultCode,
	UINT64 originalLanguagesBufferSize,
	UNICODESTRING originalLanguagesBuffer
	);

FaceUtils::ThreadUILanguageHandler::SaveThreadPreferredUILanguages.FailedToGetThreadPreferredUILanguages(
	HRESULT ResultCode,
	UINT32 numLanguages,
	UINT32 languagesBufferSize
	);

FaceUtils::ThreadUILanguageHandler::ThreadUILanguageHandler.FailedToSaveThreadPreferredUILanguages(
	HRESULT ResultCode,
	UINT16 LangId,
	UINT16 CurrentLangId
	);

FaceUtils::ThreadUILanguageHandler::ThreadUILanguageHandler.FailedToSetThreadUILanguage(
	HRESULT ResultCode,
	UINT16 LangId,
	UINT16 CurrentLangId
	);

TimeoutCredProv::EndPnpDelayStateTimerIfActivated.StoppingPnpDelayTimer(
	VOID
	);

TimeoutCredProv::HandleLockScreenStateChange(
	VOID
	);

TimeoutCredProv::HandleTimerExpired(
	UINT32 state
	);

TimeoutCredProv::UpdateState.StartingTask(
	VOID
	);

TimeoutCredProv::EndTimer(
	UINT32 state
	);

TimeoutCredProv::Disable(
	VOID
	);

TimeoutCredProv::UpdateState(
	UINT32 TimeOutMs,
	UINT32 state
	);

UserManager::GetNgcLogonKey(
	HRESULT ResultCode
	);

UserManager::GetNgcLogonKey(
	VOID
	);

Error(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	ANSISTRING FailureInfo,
	HRESULT ResultCode,
	UINT8 Category,
	UNICODESTRING userStringSid
	);

Error(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	ANSISTRING FailureInfo,
	HRESULT ResultCode,
	UINT8 Category,
	UNICODESTRING userStringSid
	);

FaceUtils::QueryOneSettings.CreateProcessFailed(
	HRESULT ResultCode,
	UNICODESTRING applicationPath
	);

FaceUtils::QueryOneSettings.FailedToConstructdPath(
	HRESULT ResultCode,
	UNICODESTRING applicationPath
	);

FaceUtils::QueryOneSettings.FailedToLocateApplication(
	HRESULT ResultCode,
	UNICODESTRING applicationPath
	);

FaceUtils::QueryOneSettings(
	VOID
	);

FaceUtils::QueryOneSettings.FailedToGetSystemDirectory(
	HRESULT ResultCode
	);

FaceUtils::ResetOneSettingRegistryCache.SetIsSetKey(
	HRESULT ResultCode
	);

FaceUtils::IsOneSettingRegistryCacheSet(
	UINT32 isSet
	);

FaceUtils::ResetOneSettingRegistryCache(
	VOID
	);

FaceUtils::HasEnoughTimePassed.SHRegSetFILETIMEFailed(
	HRESULT ResultCode
	);

FaceUtils::IsOneSettingRegistryCacheSet.GetIsSetKey(
	HRESULT ResultCode
	);

FaceUtils::HasEnoughTimePassed.SHRegGetFILETIMEFailed(
	HRESULT ResultCode
	);

FaceUtils::DidBuildInformationChangeToTriggerOneSettingQuery.SetBuildInfoStringFailed(
	HRESULT ResultCode
	);

FaceUtils::DidBuildInformationChangeToTriggerOneSettingQuery.SetCurrentBuildTimeFailed(
	HRESULT ResultCode
	);

FaceUtils::DidBuildInformationChangeToTriggerOneSettingQuery.GetStoredBuildInfoStringFailed(
	HRESULT ResultCode
	);

FaceUtils::ShouldSwitchToFaceProviderHelper.SwitchToFaceProviderCounter.Reset(
	VOID
	);

FaceUtils::DidBuildInformationChangeToTriggerOneSettingQuery.GetBuildLabInfoStringFailed(
	HRESULT ResultCode
	);

FaceUtils::ShouldSwitchToFaceProviderHelper.SwitchToFaceProviderCounter.Incremented(
	VOID
	);

FaceUtils::ShouldSwitchToFaceProviderHelper.FailedToSetRegKey(
	HRESULT ResultCode
	);

FaceUtils::ShouldSwitchToFaceProviderHelper.FailedToIncrementRegKey(
	HRESULT ResultCode
	);

FaceUtils::ShouldSwitchToFaceProvider.SwitchToFaceProviderCounter.Reset(
	VOID
	);

FaceUtils::ShouldSwitchToFaceProvider(
	BOOL32 shouldSwitch
	);

FaceUtils::ShouldSwitchToFaceProvider.FailedToReadRegKey(
	HRESULT ResultCode
	);

FaceUtils::ShouldSwitchToFaceProvider.FailedToSetRegKey(
	HRESULT ResultCode
	);

FaceUtils::StartServiceSync.ServiceStartSignalSent(
	VOID
	);

FaceUtils::StartServiceSync.StartServiceFailed(
	HRESULT ResultCode
	);

FaceUtils::StartServiceSync.QueryServiceStatusEx(
	HRESULT ResultCode
	);

FaceUtils::StartServiceSync.ServiceIsAlreadyRunning(
	VOID
	);

FaceUtils::StartServiceSync.OpenServiceFailed(
	HRESULT ResultCode
	);

FaceUtils::StartServiceSync.OpenSCManagerFailed(
	HRESULT ResultCode
	);

FaceUtils::StartServiceSync(
	UNICODESTRING ServiceName
	);

FaceUtils::GetACPowerStatusInformation.Failed(
	HRESULT ResultCode
	);

FaceUtils::GetAutoRotationStateInformation.Failed(
	HRESULT ResultCode
	);

FaceUtils::IsNoEnrollmentsToastRequired(
	BOOL32 isNoEnrollmentsToastRequired,
	UINT32 userHadEnrollment,
	UINT32 MaxNoEnrollmentsNotifications
	);

FaceUtils::ClearUnenrolledUsersFromRegistry.FailedToDeleteEnrolledUsersRegKey(
	HRESULT ResultCode
	);

FaceUtils::IsNoEnrollmentsToastRequired.SHRegGetStringFailed(
	HRESULT ResultCode
	);

FaceUtils::ClearUnenrolledUsersFromRegistry.ConvertStringSidToSidFailed(
	HRESULT ResultCode
	);

FaceUtils::AddEnrolledUserToRegistryHelper.ConvertSidToSidString(
	HRESULT ResultCode
	);

FaceUtils::AddEnrolledUserToRegistryHelper.FailedToSetEnrolledUsersRegKey(
	HRESULT ResultCode,
	SID sid
	);

FaceUtils::AddEnrolledUsersToRegistry.ProcessUserSid(
	SID sid
	);

FaceUtils::AddEnrolledUsersToRegistry.ProcessLastLoggedOnUserSid(
	SID sid
	);

FaceUtils::RefreshEnrolledUsersRegistry.FailedToAddEnrolledUsersToRegistry(
	HRESULT ResultCode
	);

FaceUtils::SetEnrollmentsCorruptedRegKeyValue.FailedToSetEnrollmentsCorruptionRegKey(
	HRESULT ResultCode
	);

FaceUtils::IsFirstPartyRetailDevice.FailedToRetrieveManufacurerInformation(
	HRESULT ResultCode
	);

FaceUtils::IsFirstPartyRetailDevice(
	BOOL32 result
	);

FaceUtils::ResetCredentialProviderInstanceCount(
	VOID
	);

FaceUtils::ResetCredentialProviderInstanceCount.FailedToResetCredentialProviderInstanceCount(
	HRESULT ResultCode
	);

FaceUtils::IncrementCredentialProviderInstanceCount.FailedToIncrementCredProvUncompletedInstances(
	HRESULT ResultCode
	);

FaceUtils::IncrementCredentialProviderInstanceCount(
	UINT32 CredentialProviderInstanceCount
	);

FaceUtils::IsUserEnrolled.UserNotEnrolled(
	SID sid,
	UINT32 CredentialProviderType
	);

FaceUtils::IsUserEnrolled.UserEnrolled(
	SID sid,
	UINT32 CredentialProviderType
	);

BiometricsForDomainUserBlockedByGroupPolicy(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags
	);

FaceUtils::IsUserEnrolled.Skipping built-in account.(
	VOID
	);

BiometricsForDomainUserBlockedByGroupPolicy(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario
	);

FaceUtils::GetLastLoggedOnPersistentUserPSID.ConvertStringSidToSidFailed(
	HRESULT ResultCode
	);

FaceUtils::IsRemoteSessionActive.ActiveRemoteSessionDetected(
	VOID
	);

FaceUtils::GetLastLoggedOnPersistentUserPSID.GetLastLoggedOnUserSidFailed(
	HRESULT ResultCode
	);

FaceUtils::StringAllocAndInitStringResource.LoadStringFailedButReturnedSuccess(
	HRESULT ResultCode,
	UINT32 ResourceId
	);

VisualFeedback::UpdateFeedbackBasedOnCurrentState(
	VOID
	);

VisualFeedback::GetUpdatedResourceIDBasedOnCurrentState.UpdatedToLockScreenVersion(
	VOID
	);

VisualFeedback::GetUpdatedResourceIDBasedOnCurrentState.UpdatedToLogonScreenVersion(
	VOID
	);

VisualFeedback::GetUpdatedResourceIDBasedOnCurrentState.UpdatedToNonBlankVersion(
	VOID
	);

VisualFeedback::GetUpdatedResourceIDBasedOnCurrentState.UpdatedToBlankVersion(
	VOID
	);

VisualFeedback::FreezeFeedbackDisplayAndTextUpdates(
	ANSISTRING State
	);

VisualFeedback::ClearStoredVisuals(
	VOID
	);

VisualFeedback::FreezeFeedbackDisplay(
	ANSISTRING State
	);

VisualFeedback::Disable.PersistingError(
	VOID
	);

VisualFeedback::Clear(
	VOID
	);

VisualFeedback::Enable.Enabled(
	VOID
	);

VisualFeedback::Disable.Disabled(
	VOID
	);

VisualFeedback::UpdateAuthenticated.FormatGreetingForCredentialProviderUserFailed(
	HRESULT ResultCode
	);

VisualFeedback::UpdateAuthenticated.FormatGreetingFailed(
	HRESULT ResultCode
	);

VisualFeedback::UpdateAuthenticated.FormatGreetingForLogonFailed(
	HRESULT ResultCode
	);

VisualFeedback::UpdateStoredVisuals(
	VOID
	);

VisualFeedback::UpdateAuthenticated(
	VOID
	);

VisualFeedback::GetDisplayString(
	HRESULT ResultCode
	);

VisualFeedback::ForceUpdateStoredVisuals(
	VOID
	);

Error(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	ANSISTRING FailureInfo,
	HRESULT ResultCode,
	UINT8 Category,
	UINT32 BlankedResourceId,
	UINT16 ThreadUILanguage
	);

Error(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	ANSISTRING FailureInfo,
	HRESULT ResultCode,
	UINT8 Category,
	UINT32 BlankedResourceId,
	UINT16 ThreadUILanguage
	);

Error(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	ANSISTRING FailureInfo,
	HRESULT ResultCode,
	UINT8 Category,
	UINT32 ResourceId,
	UINT16 ThreadUILanguage
	);

Error(
	UINT8 CredentialProviderType,
	GUID SessionID,
	UINT32 UsageScenario,
	UINT64 PartA_PrivTags,
	ANSISTRING FailureInfo,
	HRESULT ResultCode,
	UINT8 Category,
	UINT32 ResourceId,
	UINT16 ThreadUILanguage
	);

VisualFeedback::GetDisplayString(
	VOID
	);

VisualFeedback::EnableFeedbackStringTask(
	VOID
	);

VisualFeedback::StartDelayedEnableFeedbackStringTask(
	VOID
	);

VisualFeedback::Advise.FailedToCreateGreetingFormatterObject(
	HRESULT ResultCode
	);

VisualFeedback::Advise.SettingThreadUILanguage(
	UINT16 LangId
	);

WinBioSession::ControlUnitPrivileged(
	HRESULT hr
	);

WinBioSession::UnlockUnit(
	HRESULT hr
	);

WinBioSession::LockUnit(
	HRESULT hr
	);

WinBioSession::ConfirmSessionClose.BioSessionHandleIsInvalid(
	HRESULT ResultCode
	);

WinBioSession::ConfirmFrameworkClose.BioFrameworkHandleIsInvalid(
	HRESULT ResultCode
	);

WinBioSession::MonitorFrameworkChanges.BioFrameworkHandleIsInvalid(
	HRESULT ResultCode
	);

WinBioSession::MonitorPresence.WinBioAcquireFocus(
	HRESULT ResultCode
	);

WinBioSession::MonitorPresence.WinBioFocusAcquired(
	VOID
	);

WinBioSession::MonitorPresence.SensorUnitIDIsInvalid(
	HRESULT ResultCode
	);

WinBioSession::EnumerateBiometricUnits.DeviceNotCapable(
	VOID
	);

WinBioSession::MonitorPresence.BioSessionHandleIsInvalid(
	HRESULT ResultCode
	);

WinBioSession::EnumerateBiometricUnits.MultipleSensorsPresent(
	HRESULT ResultCode
	);

WinBioSession::EnumerateBiometricUnits.DeviceIsCapable(
	ANSISTRING Type
	);

WinBioSession::EnumerateBiometricUnits.WinBioEnumBiometricUnitsFailed(
	HRESULT ResultCode
	);

WinBioSession::EnumerateBiometricUnits.NoSensorFound(
	HRESULT hresult
	);

WinBioSession::CancelSession.WinBioReleaseFocus(
	HRESULT ResultCode
	);

WinBioSession::CancelSession.WinBioFocusReleased(
	VOID
	);

WinBioSession::OpenFramework.OpenFramework(
	HRESULT ResultCode
	);

WinBioSession::OpenSession.OpenSession(
	HRESULT ResultCode
	);

CacheGetUserNameAndDomain(
	SID userSid,
	UNICODESTRING userName,
	UNICODESTRING domain
	);

InvalidSidNameUse(
	INT32 retVal,
	UINT32 sidNameUse
	);

LookupAccountSidLocalW(
	UINT32 retVal
	);

LsaLookupSids2(
	INT32 retVal
	);

FallBackToLocalSidLookup(
	INT32 retVal
	);

LsaOpenPolicy(
	INT32 retVal
	);

GetTokenInformation(
	UINT32 retVal
	);

LsaLookupUserAccountType(
	INT32 retVal
	);

RtlUnicodeStringToAnsiStringError(
	INT32 retVal
	);

LsaLookupAuthenticationPackageError(
	INT32 retVal
	);

LsaConnectUntrustedError(
	INT32 retVal
	);

CertGetEnhancedKeyUsage(
	UINT32 retVal
	);

HideNegoCredDueToNoLogonEku(
	VOID
	);

CertGetEnhancedKeyUsageRequiredByteCount(
	UINT32 retVal
	);

CertGetIntendedKeyUsage(
	UINT32 retVal
	);

HideNegoCredDueToNoSignatureKeyUseOnCert(
	VOID
	);

HideNegoCredDueToCertVerifyFailure(
	BOOL32 isSelfSigned,
	BOOL32 isExpired
	);

CertVerifySubjectCertificateContext(
	UINT32 retVal
	);

CertCreateCertificateContext(
	UINT32 retVal
	);

HideNegoCredDueToNoSmartCardEmulation(
	INT32 retVal
	);

HideNegoCredDueToCertLookupFailure(
	INT32 retVal
	);

HideNegoCredDueToCertMissing(
	INT32 retVal
	);

NCryptOpenStorageProvider(
	INT32 retVal
	);

NCryptOpenKey(
	INT32 retVal
	);

HideNegoCredDueToPolicy(
	VOID
	);

HideNegoCredForPackAsSSPIWithLocalUser(
	VOID
	);

HideNegoCredForUnknownUser(
	VOID
	);

HideNegoCredForKeyNameFilterMismatch(
	VOID
	);

HideNegoCredForPackAsSmartCardWithLocalUser(
	VOID
	);

ShouldShowNegoCredential(
	NULL keyName,
	UINT32 accountType,
	UINT32 allowedGestures,
	BOOLEAN packAsSmartCard,
	BOOLEAN packAsSspi,
	BOOLEAN certRequiredForOnPremAuth,
	UINT32 hideNegoCredReason,
	BOOLEAN shouldShowNegoCredential,
	INT32 retVal
	);

NgcCredProvEnumLogonKeysFailed(
	INT32 retVal
	);

LoadStringWFailed(
	UINT32 retVal
	);

UnsupportedBiometricType(
	INT32 retVal
	);

InvalidSerializationBufferTooSmall(
	INT32 retVal
	);

InvalidSerializationBufferUserSidTooLarge(
	INT32 retVal
	);

NCryptGetProperty(
	INT32 retVal
	);

NCryptGetPropertyRequiredByteCount(
	INT32 retVal
	);

UnmarshaledCredentialUnsupportedType(
	INT32 retVal
	);

CredUnmarshalCredential(
	UINT32 retVal
	);

CredUnPackAuthenticationBufferWFailed(
	UINT32 retVal
	);

CredUnPackAuthenticationBufferWSizeQueryFailed(
	UINT32 retVal
	);

CredUnPackAuthenticationBufferWSizeQuerySucceededUnexpectedly(
	INT32 retVal
	);

InvalidSerializationBufferBadSubmitType(
	INT32 retVal
	);

UnmarshaledSspiCredentialNotV2(
	INT32 retVal
	);

CredUnPackAuthenticationBufferWIsNotPresent(
	INT32 retVal
	);

SspiUnmarshalCredUIContext(
	INT32 retVal
	);

CertGetCertificateContextPropertyRequiredSize(
	UINT32 retVal
	);

CertGetCertificateContextProperty(
	UINT32 retVal
	);

CertFindCertificateInStore(
	UINT32 retVal
	);

CertNotPresentInMyStore(
	UINT32 retVal
	);

CertOpenSystemStore(
	UINT32 retVal
	);

Assert(
	UINT32 assertVersion,
	UINT32 rva,
	UINT32 timestamp,
	UINT32 imageSize,
	ANSISTRING imageName,
	UINT32 count,
	UINT32 totalHits,
	UINT32 ModuleCollection,
	UINT32 GlobalCollection
	);

