ProviderNames:
	ActivationManager
	Microsoft.Windows.ProcessLifetimeManager
	TelemetryAssert
	TelemetryAssertDiagTrack
	ActivationManager



**** Events *****
WIL_Failover(
	HEXINT32 HRESULT,
	ANSISTRING File,
	UINT32 Line,
	ANSISTRING failure->pszFunction,
	UNICODESTRING failure->pszMessage,
	ANSISTRING failure->pszCode,
	UINT32 GetCurrentThreadId(),
	UINT32 static_cast<DWORD>(failure->type),
	INT32 failure->cFailureCount
	);

ExtendedExecution_ExtendedExecutionSummary(
	UINT32 Version,
	UNICODESTRING PsmKey,
	UINT8 Reason,
	HEXINT64 ActivityId,
	INT32 SessionDurationMs,
	UINT8 EndReason,
	UINT8 RevokeReason
	);

ExtendedExecution_OnActivityClosed(
	HEXINT64 ObjectId,
	HEXINT64 ActivityId
	);

ExtendedExecution_OnActivityClosed(
	HEXINT64 ObjectId,
	HEXINT64 ActivityId
	);

ExtendedExecution_OnActivityStopRequested(
	HRESULT Hr,
	HEXINT64 ObjectId,
	HEXINT64 ActivityId,
	UINT32 EeState,
	UINT8 RevokeReason
	);

ExtendedExecution_OnActivityStopRequested(
	HEXINT64 ObjectId,
	HEXINT64 ActivityId
	);

ExtendedExecution_OnActivityStarted(
	HRESULT Hr,
	HEXINT64 ObjectId,
	HEXINT64 ActivityId,
	UINT32 EeState
	);

ExtendedExecution_OnActivityStarted(
	HEXINT64 ObjectId,
	HEXINT64 ActivityId
	);

ExtendedExecution_Close(
	HEXINT64 ObjectId
	);

ExtendedExecution_Close(
	HEXINT64 ObjectId
	);

ExtendedExecution_RequestExtension(
	UINT32 Version,
	HRESULT Hr,
	UINT8 FailureCode,
	HEXINT64 ObjectId,
	UNICODESTRING PsmKey,
	UINT8 Reason,
	HEXINT64 ActivityId
	);

ExtendedExecution_RequestExtension(
	HEXINT64 ObjectId,
	UINT8 Reason
	);

ExtendedExecution_ObjectDestroyed(
	HEXINT64 ObjectId
	);

ExtendedExecution_ObjectCreated(
	HEXINT64 ObjectId
	);

ExtendedExecution_SkipDisconnectFromHamOnProcessExit(
	VOID
	);

ExtendedExecution_DisconnectFromHam(
	NTSTATUS Status,
	HEXINT64 ConnectionContext
	);

ExtendedExecution_ConnectToHam(
	NTSTATUS Status,
	HEXINT64 ConnectionContext
	);

ActivityStoppedAutomatically(
	VOID
	);

ActivityIntermediateStop(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

GetActivatedEventArgsClient(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

GetActivatedEventArgsClient(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetActivatedEventArgsClient(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

FallbackError(
	UINT64 PartA_PrivTags,
	SIGNED wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

FallbackError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

Assert(
	UINT32 assertVersion,
	UINT32 rva,
	UINT32 timestamp,
	UINT32 imageSize,
	ANSISTRING imageName,
	UINT32 count,
	UINT32 totalHits,
	UINT32 ModuleCollection,
	UINT32 GlobalCollection
	);

