ProviderNames:
	Microsoft.Windows.PlatformExtensions
	Microsoft.Windows.Security.NGC.NgcCtnr
	TelemetryAssert
	TelemetryAssertDiagTrack



**** Events *****
TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING extensionPointName,
	UINT32 contextWindowId,
	GUID requestedIid
	);

ActivityError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityStoppedAutomatically(
	VOID
	);

ActivityError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityStoppedAutomatically(
	VOID
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING extensionPointName
	);

EvaluatingRegistration(
	UNICODESTRING acid,
	BOOLEAN isDefault
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UNICODESTRING implementationAcid
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	UNICODESTRING implementationAcid
	);

FallbackError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

FallbackError(
	UINT64 PartA_PrivTags,
	SIGNED wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	BOOLEAN wasImplementationReturned,
	BOOLEAN wasRedirectorUsed,
	UNICODESTRING registeredAcid
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	BOOLEAN wasImplementationReturned,
	BOOLEAN wasRedirectorUsed,
	UNICODESTRING registeredAcid
	);

DeviceWipeAttemptLimitReachedButPinBlockProtectionNotComplete(
	VOID
	);

PublishWnfStateData(
	INT32 retVal
	);

CopySid(
	UINT32 retVal
	);

ConvertStringSidToSid(
	UINT32 retVal
	);

GetContainerPropertyForSid(
	INT32 retVal
	);

ContainerCreateClaim(
	INT32 retVal
	);

ContainerGetAikCertificate(
	INT32 retVal
	);

ContainerDecryptPkcs1(
	INT32 retVal
	);

ContainerSignHashPkcs1(
	INT32 retVal
	);

ContainerEnumerateKeys(
	INT32 retVal
	);

ContainerDeleteKey(
	INT32 retVal
	);

CannotDeleteSpecialKey(
	INT32 retVal,
	UNICODESTRING keyName
	);

ContainerGetKeyImplType(
	INT32 retVal
	);

KeySizeUnexpectedSize(
	INT32 retVal
	);

INgcCtnrContainer::GetKeyProperty(
	INT32 retVal
	);

KeyUsageUnexpectedSize(
	INT32 retVal
	);

ContainerExportRsaPublicKey(
	INT32 retVal
	);

ContainerImportRsaKey(
	INT32 retVal
	);

ContainerCreateRsaKey(
	INT32 retVal
	);

ContainerRemoveProtector(
	INT32 retVal
	);

ContainerAddProtector(
	INT32 retVal
	);

ContainerChangeProtector(
	INT32 retVal
	);

ContainerIsProtectorAuthenticated(
	INT32 retVal
	);

ContainerGetSoftLockoutInfo(
	INT32 retVal
	);

DeauthenticateInvalidReason(
	INT32 retVal
	);

DeauthenticateInvalidTicket(
	INT32 retVal
	);

ContainerIsProtectorSupported(
	INT32 retVal
	);

ContainerSetProtectorProperty(
	INT32 retVal
	);

ContainerGetProtectorProperty(
	INT32 retVal
	);

ContainerSetKeyProperty(
	INT32 retVal
	);

ContainerGetKeyProperty(
	INT32 retVal
	);

ContainerSetContainerProperty(
	INT32 retVal
	);

ContainerGetContainerProperty(
	INT32 retVal
	);

ContainerGetImplType(
	INT32 retVal
	);

ContainerGetKeyScopeHandlerDataPath(
	INT32 retVal
	);

ContainerIsKeyScopeSupported(
	INT32 retVal
	);

ContainerCreateKeyScope(
	INT32 retVal
	);

InvalidContainerState(
	INT32 retVal,
	UINT32 containerStatus
	);

ContainerUnload(
	INT32 retVal
	);

ContainerDelete(
	INT32 retVal
	);

ContainerLoad(
	INT32 retVal
	);

ContainerCreate(
	INT32 retVal
	);

GetImplTypePropertyFailed(
	INT32 retVal
	);

OpenStorageProvider(
	INT32 retVal
	);

ValidateProviderNameBytes(
	INT32 retVal
	);

ProtectorManagerDeleteDeviceProtector(
	INT32 retVal
	);

ProtectorManagerDeletePrebootProtector(
	INT32 retVal
	);

ProtectorManagerDeleteRecoveryProtector(
	INT32 retVal
	);

ProtectorManagerDeleteBioProtector(
	INT32 retVal
	);

ProtectorManagerDeletePinProtector(
	INT32 retVal
	);

UpgradeAuthBlobsToRedstone2(
	INT32 retVal
	);

UpgradeAuthBlobsToRedstone2Failure(
	HRESULT retVal,
	ANSISTRING errorContext,
	UINT32 protectorId
	);

UpgradeAuthBlobsToRedstone2(
	INT32 retVal
	);

ValidateSequencesPolicyFailed(
	INT32 retVal
	);

ValidatePinFailed(
	INT32 retVal
	);

InitializeNgcPolicyFailed(
	INT32 retVal
	);

ChangePinCharacteristicsPropertyFailed(
	INT32 retVal
	);

BadPinCharacteristicsMetadata(
	INT32 retVal
	);

InvalidNewPin(
	INT32 retVal
	);

ResetPinCharacteristicsPropertyFailed(
	INT32 retVal
	);

NgcCtnrContainer.InternalCreateProtectors(
	INT32 retVal,
	UINT64 PartA_PrivTags
	);

NgcCtnrContainer.InternalCreateProtectors(
	INT32 retVal,
	UINT64 PartA_PrivTags
	);

DeleteContainerDirectory(
	INT32 retVal
	);

PropertyManagerDeleteContainer(
	INT32 retVal
	);

InternalDeleteKeySkippingKey(
	INT32 retVal,
	UNICODESTRING keyName
	);

ConvertMultiStringToStringVector(
	INT32 retVal
	);

InternalDeleteInternalEnumerateKeys(
	INT32 retVal
	);

InternalUnload(
	INT32 retVal
	);

InvalidContainerVersion(
	INT32 retVal,
	UINT32 containerVersion,
	GUID containerId
	);

InternalUpgradeKeyCacheTypesFromPreRedstone2ToRedstone2(
	INT32 retVal,
	GUID containerId
	);

GetContainerVersion(
	INT32 retVal,
	GUID containerId
	);

InitializeKeyManager(
	INT32 retVal,
	GUID containerId
	);

ContainerLoad(
	UINT64 PartA_PrivTags,
	UINT32 containerVersion,
	BOOLEAN isHardwareContainer,
	BOOLEAN hasCachedLogonKey,
	UINT32 status,
	INT32 retVal
	);

GetProviderName(
	INT32 retVal
	);

InitializePolicyFromBytes(
	INT32 retVal
	);

SetContainerPropertyPolicy(
	INT32 retVal
	);

CreateContainerDirectory(
	INT32 retVal
	);

CreateContainerId(
	INT32 retVal
	);

NgcCtnrContainerInternalCreate(
	INT32 retVal,
	UINT64 PartA_PrivTags
	);

DeleteContainerDirectoryRecursively(
	INT32 retVal
	);

NgcCtnrContainerInternalCreate(
	INT32 retVal,
	UINT64 PartA_PrivTags
	);

ActivityStoppedAutomatically(
	VOID
	);

KeyManagerCreateUserKey(
	INT32 retVal
	);

KeyManagerGuidKeyNameCollision(
	INT32 retVal
	);

CoCreateGuid(
	INT32 retVal
	);

KeyManagerDeleteKey(
	INT32 retVal
	);

NgcCtnrContainer::InternalCreateProviderUserKey(
	INT32 retVal
	);

NgcCtnrContainer::InternalCreateProviderUserKey(
	INT32 retVal
	);

InternalCreateRsaKey(
	INT32 retVal
	);

PropertyManagerSetKeyProviderKeyUsage(
	INT32 retVal,
	UNICODESTRING keyName,
	UINT32 keyUsage
	);

PropertyManagerSetKeyProviderKeySize(
	INT32 retVal,
	UNICODESTRING keyName,
	UINT32 keySize
	);

PropertyManagerSetKeyProviderCacheType(
	INT32 retVal,
	UNICODESTRING keyName,
	UINT32 cacheType
	);

PropertyManagerSetKeyProviderFidoSignCount(
	INT32 retVal,
	UNICODESTRING keyName,
	UINT32 fidoSignCount
	);

PropertyManagerSetKeyProviderFidoAccountInformation(
	INT32 retVal,
	UNICODESTRING keyName
	);

PropertyManagerSetKeyProviderKeyName(
	INT32 retVal,
	UNICODESTRING keyName,
	UNICODESTRING providerKeyName
	);

PropertyManagerSetKeyProviderName(
	INT32 retVal,
	UNICODESTRING keyName,
	UNICODESTRING providerName
	);

PropertyManagerSetKeyProviderLogonCapable(
	INT32 retVal,
	UNICODESTRING keyName,
	INT32 logonCapable
	);

ValidateKeyProviderKeyName(
	INT32 retVal,
	UNICODESTRING KeyName
	);

PropertyManagerGetKeyProviderKeyName(
	INT32 retVal,
	UNICODESTRING KeyName
	);

ValidateKeyProviderName(
	INT32 retVal,
	UNICODESTRING KeyName
	);

PropertyManagerGetKeyProviderName(
	INT32 retVal,
	UNICODESTRING KeyName
	);

CopyKeyName(
	INT32 retVal
	);

PropertyManagerDeleteKey(
	INT32 retVal
	);

DeleteProviderKey(
	INT32 retVal
	);

RetrieveUserKeyInformation(
	INT32 retVal
	);

GetStringFromGuid(
	INT32 retVal
	);

BCryptHash(
	INT32 retVal
	);

InternalGetSCardKeyContainerNameNoReaderName(
	INT32 retVal
	);

SetKeyPropertyKeySize(
	INT32 retVal
	);

GetKeyPropertyKeySize(
	INT32 retVal
	);

SetKeyPropertyKeyUsage(
	INT32 retVal
	);

GetKeyPropertyKeyUsage(
	INT32 retVal
	);

DeletePreviousKey(
	INT32 retVal
	);

CacheTypeInvalid(
	INT32 retVal
	);

KeyAlreadyExists(
	INT32 retVal
	);

NgcCtnrContainer.InternalImportRsaKey(
	INT32 retVal,
	UINT64 PartA_PrivTags,
	UINT32 keyUsage,
	INT32 logonCapable,
	INT32 overwrite,
	UINT32 cacheType,
	BOOLEAN exists,
	UNICODESTRING providerName
	);

PropertyManagerDeleteKey(
	INT32 retVal
	);

NgcCtnrContainer.InternalImportRsaKey(
	INT32 retVal,
	UINT64 PartA_PrivTags,
	UINT32 keyUsage,
	INT32 logonCapable,
	INT32 overwrite,
	UINT32 cacheType,
	BOOLEAN exists,
	UNICODESTRING providerName
	);

CreatePassportKey(
	UINT64 PartA_PrivTags,
	HRESULT retVal,
	UINT32 keyUsage,
	UINT32 cacheType,
	BOOL32 forceSoftwareKey,
	UNICODESTRING providerName,
	UINT32 keyType,
	BOOL32 logonCapable,
	BOOL32 overwrite,
	BOOL32 exists
	);

VectorTooLarge(
	INT32 retVal
	);

IndexTooLarge(
	INT32 retVal
	);

ContainerVectorAppend(
	INT32 retVal
	);

ContainerVectorGetAt(
	INT32 retVal
	);

ContainerVectorGetSize(
	INT32 retVal
	);

TpmUnsealFailed(
	INT32 retVal
	);

TpmUnsealSizeQueryFailed(
	INT32 retVal
	);

TpmSealFailed(
	INT32 retVal
	);

TpmSealFailedAfterResize(
	INT32 retVal
	);

OpenSRK(
	INT32 retVal
	);

OpenStorageProviderHardware(
	INT32 retVal
	);

ClearPinPropertyHardware(
	INT32 retVal
	);

SetPinPropertyHardware(
	INT32 retVal
	);

NgcImportRsaKeyTpmPerf(
	DOUBLE duration
	);

NgcClaimPregenRsaKeyTpmPerf(
	DOUBLE duration
	);

NgcCreateRsaKeyTpmPerf(
	DOUBLE duration
	);

CtnrCommonCreateClaim(
	INT32 retVal
	);

CtnrCommonGetAikCertificate(
	INT32 retVal
	);

NgcDecryptTpmPerf(
	DOUBLE duration
	);

DecryptHardware(
	INT32 retVal
	);

HardwareKey.DecryptPkcs1(
	INT32 retVal
	);

Deauthenticate(
	INT32 retVal
	);

HardwareKey.DecryptPkcs1(
	INT32 retVal
	);

EncryptHardware(
	INT32 retVal
	);

GetEncryptedDataSizeHardware(
	INT32 retVal
	);

HardwareKey.EncryptPkcs1(
	INT32 retVal
	);

HardwareKey.EncryptPkcs1(
	INT32 retVal
	);

NgcSignHashTpmPerf(
	DOUBLE duration
	);

SignHashHardware(
	INT32 retVal
	);

ChangePasswordHardware(
	INT32 retVal
	);

GetKeySizePropertyHardware(
	INT32 retVal
	);

GetKeyUsagePropertyHardware(
	INT32 retVal
	);

UnexpectedHexConversion(
	INT32 retVal
	);

ProviderNotFound(
	INT32 retVal,
	UNICODESTRING providerName
	);

InvalidKeyUseType(
	INT32 retVal
	);

ProviderNotFound(
	INT32 retVal,
	UNICODESTRING ProviderName
	);

InvalidKeyBitCount(
	INT32 retVal
	);

HardwareKeyFactoryRequiredButInitializationFailed(
	INT32 retVal
	);

InitializeHardwareKeyFactory(
	INT32 retVal
	);

FailureInfo(
	INT32 retVal,
	UNICODESTRING debugString
	);

InvalidKeyProperty(
	INT32 retVal
	);

SetReadOnlyKeyProperty(
	INT32 retVal
	);

InvalidProtectorProperty(
	INT32 retVal
	);

SetReadOnlyProtectorProperty(
	INT32 retVal
	);

InvalidContainerProperty(
	INT32 retVal
	);

SetReadOnlyContainerProperty(
	INT32 retVal
	);

InvalidCacheTypeSet(
	INT32 retVal,
	UNICODESTRING keyName
	);

NoCacheTypeSet(
	INT32 retVal,
	UNICODESTRING keyName
	);

EnumerateNextKeyDirectory(
	UINT32 retVal
	);

ValidateKeyNameBuffer(
	INT32 retVal,
	UNICODESTRING directoryName
	);

GetKeyNameProperty(
	INT32 retVal,
	UNICODESTRING directoryName
	);

EnumerateKeyDirectory(
	UINT32 retVal
	);

GetKeyIndexProperty(
	INT32 retVal
	);

CalculateKeyNameLength(
	INT32 retVal
	);

CreateKeyDirectory(
	UINT32 retVal
	);

DeleteKeyDirectory(
	INT32 retVal
	);

KeyScopeNotSupported(
	INT32 retVal,
	GUID KeyScope
	);

CreateKeyScopeHandlerDataDirectory(
	UINT32 retVal
	);

CreateKeyScopeDirectory(
	UINT32 retVal
	);

DeleteKeyScopeDirectory(
	INT32 retVal
	);

InvalidPropertyType(
	INT32 retVal,
	UINT32 protectorId,
	UINT32 propertyId
	);

GetProtectorProperty(
	INT32 retVal,
	UINT32 protectorId,
	UINT32 propertyId
	);

CreateProtectorDirectory(
	UINT32 retVal
	);

CheckTempDirectory(
	INT32 retVal
	);

CheckProtectorsDirectory(
	INT32 retVal
	);

CheckContainerDirectory(
	INT32 retVal
	);

CreateTempDirectory(
	UINT32 retVal
	);

CreateProtectorsDirectory(
	UINT32 retVal
	);

DeleteTempDirectory(
	INT32 retVal
	);

DeleteProtectorsDirectory(
	INT32 retVal
	);

InvalidTimeLastChangedProperty(
	INT32 retVal
	);

UpdateOldContainerTimeLastChangedProperty(
	INT32 retVal
	);

GetTimeLastChangedFailed(
	INT32 retVal
	);

BadHistoryData(
	INT32 retVal
	);

DecryptHistoryFailed(
	INT32 retVal
	);

SealHistory(
	INT32 retVal
	);

EncryptHistory(
	INT32 retVal
	);

EncryptPinHistory(
	INT32 retVal
	);

FailedToCreateAesKey(
	INT32 retVal
	);

BCryptGenRandom(
	INT32 retVal
	);

DecryptPinHistory(
	INT32 retVal
	);

UnprotectContentEncryptionKey(
	INT32 retVal
	);

ValidateEncryptedHistoryBlob(
	INT32 retVal
	);

FailedToEncryptHistory(
	INT32 retVal
	);

FailedToQuerySizeOfEncryptedHistory(
	INT32 retVal
	);

FailedToDecryptHistory(
	INT32 retVal
	);

FailedToQuerySizeOfDecryptedHistory(
	INT32 retVal
	);

InvalidHistoryEncryptionKey(
	INT32 retVal
	);

UnsealHistoryEncryptionKeyFailed(
	INT32 retVal
	);

DecryptHistoryEncryptionKeyFailed(
	INT32 retVal
	);

PinHistoryBlobSizeTooLarge(
	INT32 retVal
	);

PinHistoryBlobVersionMismatch(
	INT32 retVal
	);

PasswordExistsInHistory(
	INT32 retVal
	);

ConvertMultiStringToStringVector(
	INT32 retVal
	);

SetHistoryV2Property(
	INT32 retVal
	);

ProtectHistory(
	INT32 retVal
	);

ConvertStringVectorToMultiString(
	INT32 retVal
	);

UnprotectHistoryInV2Format(
	INT32 retVal
	);

DecryptHistoryInV1Format(
	INT32 retVal
	);

NoHistoryV1Data(
	INT32 retVal
	);

GetHistoryV1(
	INT32 retVal
	);

NoHistoryV2Data(
	INT32 retVal
	);

GetHistoryV2(
	INT32 retVal
	);

RetrieveAndUnprotectHistoryInV1Format(
	INT32 retVal
	);

RetrieveAndUnprotectHistoryInV2Format(
	INT32 retVal
	);

VerifyAndAddNewPinToHistory(
	INT32 retVal
	);

RetrieveAndUnprotectHistory(
	INT32 retVal
	);

RetrieveProtectorKeyIfExists(
	INT32 retVal
	);

OpenProtectorKey(
	INT32 retVal
	);

RetrieveProtectorKeyInformation(
	INT32 retVal
	);

PropertyManagerSetProtectorFreshness(
	INT32 retVal
	);

GetProtectorFreshness(
	INT32 retVal
	);

SetProtectorDeviceWipeAttemptCountProperty(
	INT32 retVal
	);

SetProtectorProgressiveLockoutElapsedTimeProperty(
	INT32 retVal
	);

SetProtectorProgressiveLockoutIntervalProperty(
	INT32 retVal
	);

SetProtectorAttemptCountProperty(
	INT32 retVal
	);

DeviceWipeCounterUpdated(
	INT32 retVal,
	UINT32 deviceWipeAttemptCount,
	UINT32 deviceWipeAttemptLimit
	);

SetProtectorDeviceWipeAttemptCountProperty(
	INT32 retVal
	);

DeviceWipeAttemptLimitExceeded(
	UINT32 attemptCount
	);

IncorrectPinOnPenultimateDeviceWipeAttemptButPinBlockProtectionNotComplete(
	UINT32 attemptCount,
	UINT32 attemptLimit
	);

GetDeviceWipeAttemptLimit(
	INT32 retVal
	);

SoftLockoutCounterUpdated(
	HRESULT operationResult,
	BOOLEAN enteredProgressiveLockout,
	BOOLEAN enteredSoftLockout,
	UINT32 progressiveLockoutTime,
	UINT32 remainingRetryCount,
	HRESULT retValProgressiveLockoutTimer
	);

ProtectorIsInSoftLockout(
	INT32 retVal,
	UINT32 protectorId
	);

ProtectorIsInProgressiveLockout(
	INT32 retVal,
	UINT32 protectorId
	);

SetProtectorProperty(
	INT32 retVal,
	UINT32 protectorId,
	UINT32 propertyId
	);

GetPinProtectorType(
	INT32 retVal
	);

AuthenticateRecoveryProtectorDecryptAuthBlob(
	INT32 retVal
	);

AuthenticateRecoveryProtectorInvalidKey(
	INT32 retVal
	);

AuthenticateRecoveryProtectorGetDecyptedAuthBlobSize(
	INT32 retVal
	);

AuthenticateRecoveryProtectorCreateAesKey(
	INT32 retVal
	);

AuthenticateRecoveryProtectorUnprotectData(
	INT32 retVal
	);

AuthenticateRecoveryProtectorUnprotectDataInvalidParameter(
	INT32 retVal
	);

InvalidTicketSize(
	INT32 retVal
	);

PinDoesNotSatisfyPolicy(
	INT32 retVal
	);

AuthenticatePinProtectorValidatePin(
	INT32 retVal
	);

InitializePolicyFailed(
	INT32 retVal
	);

GetPolicyFailed(
	INT32 retVal
	);

ValidateProtectorKeyName(
	INT32 retVal,
	UINT32 protectorId
	);

PropertyManagerGetProtectorKeyName(
	INT32 retVal,
	UINT32 protectorId
	);

ValidateProtectorProviderName(
	INT32 retVal,
	UINT32 protectorId
	);

PropertyManagerGetProtectorProviderName(
	INT32 retVal,
	UINT32 protectorId
	);

ProtectorNotSupported(
	INT32 retVal,
	UINT32 protectorId
	);

Tpm20ResetLockoutCountIfNeeded(
	INT32 retVal
	);

Tpm20ResetLockoutCountIfNeeded(
	INT32 retVal
	);

PropertyManagerClearLockoutAuthProtectorTypeFailed(
	INT32 retVal
	);

PropertyManagerClearSealedLockoutAuthFailed(
	INT32 retVal
	);

UnsealData(
	INT32 retVal
	);

SetSealedLockoutAuthProperty(
	INT32 retVal
	);

SealLockoutAuth(
	INT32 retVal
	);

UnsealLockoutAuth(
	INT32 retVal
	);

TpmGetCapLockoutInfo(
	INT32 retVal,
	UINT32 currentLockoutCount,
	UINT32 maxLockoutCount,
	BOOLEAN isTpm20,
	UINT32 authProtectorType
	);

IsTpm20(
	INT32 retVal
	);

TpmGetCapLockoutInfo(
	INT32 retVal
	);

NgcResetLockoutCountFailed(
	HRESULT retVal,
	UINT32 currentLockoutCount,
	UINT32 maxLockoutCount
	);

PropertyManagerSetSealedLockOutAuth(
	INT32 retVal
	);

PropertyManagerSetLockOutAuthProtectorType(
	INT32 retVal
	);

SealLockoutAuth(
	INT32 retVal
	);

_SealAndStoreLockoutAuth(
	INT32 retVal
	);

_SealAndStoreLockoutAuth(
	INT32 retVal
	);

TpmChangeOwnerAuthDeviceUserState(
	INT32 retVal,
	BOOLEAN isUserAllowedToSealAndStoreLockoutAuth,
	BOOLEAN isTpm20
	);

IsTpm20(
	INT32 retVal
	);

_IsUserAllowedToSealAndStoreLockoutAuth(
	INT32 retVal
	);

TpmChangeOwnerAuth(
	INT32 retVal
	);

TpmChangeOwnerAuth(
	INT32 retVal
	);

TpmGetRandomAuthValue(
	INT32 retVal
	);

RetrieveAndStoreSealedLockoutAuth(
	HRESULT retVal,
	HRESULT errorCode,
	UINT32 result,
	UINT32 userAllowedToStoreLockoutAuth,
	UINT32 tpm20
	);

PropertyManagerSetProtectorProviderName(
	INT32 retVal
	);

PropertyManagerSetSealedAuthBlob(
	INT32 retVal
	);

PropertyManagerSetProtectorEncryptedAuthBlob(
	INT32 retVal
	);

PropertyManagerSetProtectorKeyName(
	INT32 retVal
	);

KeyManagerCreateProtectorKey(
	INT32 retVal
	);

MultipleAuthBlobSizeMismatch(
	INT32 retVal
	);

MultipleAuthBlobHeaderTooSmall(
	INT32 retVal
	);

GetCacheUnderLockAuthBlob(
	INT32 retVal
	);

GetCacheWhileUnlockedAuthBlob(
	INT32 retVal
	);

GetTransactionAuthBlob(
	INT32 retVal
	);

SingleAuthBlobSizeMismatch(
	INT32 retVal
	);

SingleAuthBlobHeaderTooSmall(
	INT32 retVal
	);

InvalidFreshnessCounter(
	INT32 retVal
	);

PropertyManagerGetProtectorFreshness(
	INT32 retVal
	);

GetDeviceWipeLimit(
	INT32 retVal
	);

SoftLockoutNotSupportedOnProtector(
	INT32 retVal,
	UINT32 protectorId
	);

GetSoftLockoutInfo(
	INT32 retVal,
	UINT32 protectorId,
	BOOLEAN inProgressiveLockout,
	UINT32 softLockoutRemainingRetryCount,
	UINT32 deviceWipeRemainingRetryCount,
	UINT32 progressiveLockoutInterval,
	UINT32 progressiveLockoutRemainingTime
	);

InvalidProtectorId(
	INT32 retVal,
	UINT32 protectorId
	);

PropertyManagerUpdatePinProtectorCreationTime(
	INT32 retVal
	);

PinValidationFailed(
	INT32 retVal
	);

ReadPolicyFailed(
	INT32 retVal
	);

ChangePinProtector(
	UINT32 retVal,
	BOOLEAN isTpm,
	UINT32 pinLength
	);

CannotDeleteTheProtectorKey(
	INT32 retVal
	);

ConvertStringSidToSid(
	UINT32 retVal
	);

SidPropertyNotFound(
	INT32 retVal
	);

PrebootProtectorAlreadyCreated(
	INT32 retVal
	);

PropertyManagerSetRecoveryProtectorCreationTime(
	INT32 retVal
	);

PropertyManagerSetProtectorIv(
	INT32 retVal
	);

GenerateResetProtectorIv(
	INT32 retVal
	);

GenerateResetProtectorSecret(
	INT32 retVal
	);

RecoveryProtectorAlreadyCreated(
	INT32 retVal
	);

PropertyManagerDeleteRecoveryProtector(
	INT32 retVal
	);

ProtectorExistedNotAnError(
	INT32 retVal
	);

SetProtectorPropertyCharacteristics(
	INT32 retVal
	);

PropertyManagerSetPinProtectorCreationTime(
	INT32 retVal
	);

PropertyManagerSetPinProtectorFreshness(
	INT32 retVal
	);

PropertyManagerSetPinProtectorProgressiveLockoutTime(
	INT32 retVal
	);

PropertyManagerSetPinProtectorProgressiveLockoutInterval(
	INT32 retVal
	);

PropertyManagerSetPinProtectorDeviceWipeAttemptCount(
	INT32 retVal
	);

PropertyManagerSetPinProtectorAttemptCount(
	INT32 retVal
	);

PropertyManagerSetPinProtectorAttemptLimit(
	INT32 retVal
	);

InitializePolicy(
	INT32 retVal
	);

GetPolicy(
	INT32 retVal
	);

_CreateRsaPinProtector(
	INT32 retVal
	);

_CreateAndSetSealedPinProtector(
	INT32 retVal
	);

PinProtectorAlreadyCreated(
	INT32 retVal
	);

PropertyManagerDeletePinProtector(
	INT32 retVal
	);

CreatePinProtector(
	UINT32 retVal,
	BOOLEAN isTpm,
	UINT32 pinLength,
	UINT32 pinCharacteristics
	);

CouldNotGetTpmLockoutAuthProtectorType(
	INT32 retVal
	);

CouldNotGetTpmLockoutAuth(
	INT32 retVal
	);

BCryptDeriveKeyPBKDF2Failure(
	INT32 retVal
	);

GenerateSalt(
	INT32 retVal
	);

SetPinPropertySoftware(
	INT32 retVal
	);

DecryptSoftware(
	INT32 retVal
	);

GetDecryptedDataSizeSoftware(
	INT32 retVal
	);

EncryptSoftware(
	INT32 retVal
	);

GetEncryptedDataSizeSoftware(
	INT32 retVal
	);

SignHashSoftware(
	INT32 retVal
	);

GetSignatureSizeSoftware(
	INT32 retVal
	);

SetRoundSoftware(
	INT32 retVal
	);

SetSaltSoftware(
	INT32 retVal
	);

ChangePasswordSoftware(
	INT32 retVal
	);

GetKeySizePropertySoftware(
	INT32 retVal
	);

GetKeyUsagePropertySoftware(
	INT32 retVal
	);

CreateThreadpoolTimerForTicket(
	UINT32 retVal
	);

TicketHasNoAuthStateBytes(
	INT32 retVal,
	UINT32 authStateType
	);

InvalidTicketAuthStateType(
	INT32 retVal
	);

TicketManagerTableFull(
	UINT32 retVal
	);

EvictingOldestTicketDueToFullTable(
	VOID
	);

TicketManagerAddTicketCannotGenRandom(
	INT32 retVal
	);

TicketManagerTooManyDuplicates(
	INT32 retVal
	);

TicketManagerVerifyTicketNotFound(
	VOID
	);

TicketManagerRedeemTicketNotFound(
	INT32 retVal
	);

TicketManagerDuplicateTicketNotFound(
	INT32 retVal
	);

DeviceCredentialMgrUnprotectData(
	INT32 retVal
	);

DeviceCredentialMgrProtectData(
	INT32 retVal
	);

ConvertSidToStringSid(
	UINT32 retVal
	);

CompanionDeviceProtectorInvalidSid(
	INT32 retVal
	);

CryptProtectMemory(
	UINT32 retVal
	);

CryptUnprotectMemory(
	UINT32 retVal
	);

memcpy_sFailed(
	INT32 retVal
	);

LoadStringWFailed(
	UINT32 retVal
	);

StringFromGUID2Failed(
	INT32 retVal,
	GUID guid
	);

FindNextFile(
	UINT32 retVal
	);

DeleteFile(
	UINT32 retVal
	);

FindFirstFile(
	UINT32 retVal
	);

RemoveDirectory(
	UINT32 retVal
	);

PathNotDirectory(
	INT32 retVal
	);

GetDirectoryAttributes(
	UINT32 retVal
	);

PropertyDataNotValidString(
	INT32 retVal
	);

ParseNgcKeyNameAccountId(
	INT32 retVal
	);

ParseNgcContainerKeyNameAccountIdMissing(
	INT32 retVal
	);

ParseNgcContainerKeyNameTenantWithNoDomain(
	INT32 retVal
	);

ParseNgcContainerKeyNameTenant(
	INT32 retVal
	);

ParseNgcContainerKeyNameDomain(
	INT32 retVal
	);

ParseNgcContainerKeyNameStringInvalidLength(
	INT32 retVal
	);

BCryptDecryptActualFailed(
	INT32 retVal
	);

BCryptDecryptGetSizeFailed(
	INT32 retVal
	);

BCryptGenerateSymmetricKeyFailed(
	INT32 retVal
	);

BCryptEncryptActualFailed(
	INT32 retVal
	);

BCryptEncryptGetSizeFailed(
	INT32 retVal
	);

NetLocalGroupGetMembers(
	UINT32 retVal
	);

RegSetValueExWError(
	UINT32 retVal
	);

RegOpenKeyExWError(
	UINT32 retVal
	);

PolicyManager_GetDeviceLockPolicy_AllowSimpleDevicePassword(
	INT32 retVal
	);

UnexpectedTpmVersion(
	INT32 retVal
	);

TpmNotFound(
	INT32 retVal
	);

TpmVersionNotSupported(
	INT32 retVal
	);

TpmVersionInFIPSNotSupported(
	INT32 retVal
	);

InsecureTpmBlockedByPolicy(
	INT32 retVal
	);

GetTpmDeviceInfo(
	INT32 retVal
	);

NoTpmFound(
	INT32 retVal
	);

GetContainerTypeInfo(
	UINT32 retVal,
	UINT16 tpmVersion,
	UINT16 tpmSupport,
	UINT16 hardwarePolicy,
	UINT16 smartCardPolicy,
	UNICODESTRING providerName,
	BOOLEAN isInsecureTpm,
	BOOLEAN isInsecureTpmBlockedByWHfBPolicy,
	BOOLEAN isInsecureTpmBlockedByTpmPolicy,
	BOOLEAN isUnsatisfactoryTpm,
	BOOLEAN isUnsatisfactoryPregenPool,
	BOOLEAN isFips,
	BOOLEAN tpmLocked,
	BOOLEAN isexcludeTpm12
	);

PolicyManager_GetDeviceLockPolicy_MaxDevicePasswordFailedAttempts(
	INT32 retVal
	);

PolicyManager_GetDeviceLockPolicy_DevicePasswordEnabled(
	INT32 retVal
	);

PolicyManagerApiNotPresent(
	INT32 retVal
	);

NoDeviceWipeOnMultiSessionSKU(
	INT32 retVal
	);

NgcGetPregenKeyStateFailed(
	INT32 retVal
	);

IsTpm12ExcludedReadDeviceMDMPolicy(
	INT32 retVal
	);

IsTpm12ExcludedGetJoinInfo(
	INT32 retVal
	);

IsTpm12ExcludedReadDeviceGroupPolicy(
	INT32 retVal
	);

IsInsecureTpmBlockedByWHfBPolicyReadDeviceGroupPolicy(
	INT32 retVal
	);

IsInsecureTpmBlockedByTpmPolicyGetProperty(
	INT32 retVal
	);

IsInsecureTpmBlockedByTpmPolicyOpenStorageProvider(
	INT32 retVal
	);

InvalidSerializationPinPolicyLengthOverrun(
	INT32 retVal
	);

InvalidSerializationArithmeticOverflow(
	INT32 retVal
	);

InvalidSerializationInvalidPinPolicyOffset(
	INT32 retVal
	);

NgcPolicyAlreadyInitialized(
	INT32 retVal
	);

InvalidSerializationTooSmall(
	INT32 retVal
	);

NgcPinPolicyAlreadyInitialized(
	INT32 retVal
	);

NgcPolicyValidationFailedInvalidAttestationPolicy(
	INT32 retVal
	);

NgcPolicyValidationFailedInvalidbiometricsPolicy(
	INT32 retVal
	);

NgcPolicyValidationFailedInvalidSmartCardPolicy(
	INT32 retVal
	);

NgcPolicyValidationFailedInvalidVersion(
	INT32 retVal
	);

ConversionFromSmartCardPolicyOptionFailedInvalidValue(
	INT32 retVal
	);

InvalidPinDigitSequenceNotAllowed(
	INT32 retVal
	);

InvalidPinSpecialCharacterNotAllowed(
	INT32 retVal
	);

InvalidPinOtherCharacterNotAllowed(
	INT32 retVal
	);

InvalidPinLowercaseLetterNotAllowed(
	INT32 retVal
	);

InvalidPinDigitNotAllowed(
	INT32 retVal
	);

InvalidPinOtherCharacterRequired(
	INT32 retVal
	);

InvalidPinUppercaseLetterNotAllowed(
	INT32 retVal
	);

InvalidPinDigitRequired(
	INT32 retVal
	);

InvalidPinSpecialCharacterRequired(
	INT32 retVal
	);

InvalidPinUppercaseLetterRequired(
	INT32 retVal
	);

InvalidPinLowercaseLetterRequired(
	INT32 retVal
	);

InvalidPinTooManyCharacters(
	INT32 retVal
	);

InvalidPinUnknownCharacterClass(
	INT32 retVal
	);

PinPolicyRulesNotInitializedBeforeValidation(
	INT32 retVal
	);

InvalidPinTooFewCharacters(
	INT32 retVal
	);

PinPolicyRules.ValidatePin(
	INT32 retVal,
	UINT32 resultValidatePin
	);

PinPolicyRules.ValidatePin(
	INT32 retVal,
	UINT32 resultValidatePin
	);

InvalidPinPolicySerializationUnsupportedVersion(
	INT32 retVal
	);

InvalidPinPolicySerializationWrongSizeV2(
	INT32 retVal
	);

InvalidPinPolicySerializationWrongSizeV3(
	INT32 retVal
	);

InvalidPinPolicySerializationTooSmall(
	INT32 retVal
	);

InvalidPinPolicySerializationWrongSizeV1(
	INT32 retVal
	);

PinPolicyRulesAlreadyInitialized(
	INT32 retVal
	);

ValidationFailedInvalidExpiration(
	INT32 retVal
	);

ValidationFailedAllCharacterClassesDisallowed(
	INT32 retVal
	);

ValidationFailedInvalidPinHistoryCount(
	INT32 retVal
	);

ValidationFailedInvalidMinOrMaxLength(
	INT32 retVal
	);

ValidationFailedInvalidCharacterPolicyOption(
	INT32 retVal
	);

InvalidPinPolicySerializationVersion(
	INT32 retVal
	);

InvalidSpecialCharactersPolicyOption(
	INT32 retVal
	);

InvalidOtherCharactersPolicyOption(
	INT32 retVal
	);

InvalidLowercaseCharacterPolicyOption(
	INT32 retVal
	);

InvalidDigitsPolicyOption(
	INT32 retVal
	);

InvalidUppercaseCharacterPolicyOption(
	INT32 retVal
	);

Assert(
	UINT32 assertVersion,
	UINT32 rva,
	UINT32 timestamp,
	UINT32 imageSize,
	ANSISTRING imageName,
	UINT32 count,
	UINT32 totalHits,
	UINT32 ModuleCollection,
	UINT32 GlobalCollection
	);

