ProviderNames:
	Microsoft.Windows.DeviceManagement.OmaDmApiProvider
	Microsoft.Windows.DeviceManagement.SessionManagement
	Microsoft.Windows.DeviceManagement.OmaDmClient
	Microsoft.Windows.DeviceManagement.OMADMPRC
	Microsoft.Windows.EnterpriseManagement.ResourceManager
	Microsoft.Windows.EnterpriseManagement.ResourceManagerUnenrollHook
	Microsoft.Windows.DeviceManagement.DmAccCsp
	Microsoft.Windows.DeviceManagement.DevInfo
	Microsoft.Windows.DeviceManagement.DevDetailCsp
	Microsoft-Windows-DeviceManagement-W7NodeProcessor
	Microsoft.Windows.DeviceManagement.SecurityPolicyCsp
	Microsoft.Windows.EnterpriseManagement.DeclaredConfiguration
	Microsoft.Windows.EnterpriseManagement.PolicyManager
	Microsoft.Windows.EnterpriseManagement.ConfigManagerHook
	Microsoft.Windows.DeviceManagement.ConfigManager2
	Microsoft.Windows.EMPS.Enrollment
	Microsoft.Windows.EnterpriseManagement.Enrollment
	TelemetryAssert
	TelemetryAssertDiagTrack
	Microsoft.Windows.EnterpriseManagement.Dynamo
	Microsoft.Windows.DeviceManagement.MDMWinsOverGPDictionary



**** Events *****
GetScopeData(
	HRESULT hrCMExecute
	);

Assert(
	UINT32 assertVersion,
	UINT32 rva,
	UINT32 timestamp,
	UINT32 imageSize,
	ANSISTRING imageName,
	UINT32 count,
	UINT32 totalHits,
	UINT32 ModuleCollection,
	UINT32 GlobalCollection
	);

GetScopeData(
	HRESULT HRESULTForGetScope
	);

GetScopeData(
	UNICODESTRING EnrollmentID,
	HRESULT HRESULTForDeleteOldEnrollment
	);

GetScopeData(
	UNICODESTRING EnrollmentID,
	HRESULT HRESULTIsEnrollmentValid
	);

GetScopeData(
	UNICODESTRING ExistingEID,
	UNICODESTRING ExisitingUserSid,
	UNICODESTRING ExisitingContext
	);

GetScopeData(
	UNICODESTRING L"IsResourceProvisioned",
	HRESULT HResult
	);

GetScopeData(
	UNICODESTRING L"Not Delete Command"
	);

GetScopeData(
	UNICODESTRING L"Delete Command"
	);

GetScopeData(
	UNICODESTRING EnrollmentID,
	UNICODESTRING UserSID,
	UNICODESTRING ContextID,
	UNICODESTRING NormalizedURIPath,
	INT32 CommandType,
	INT32 UserType,
	INT32 ResourceType
	);

GetScopeData(
	UNICODESTRING L"Populate",
	HRESULT HResult
	);

GetScopeData(
	UNICODESTRING URIPath,
	INT32 CommandType
	);

GetScopeData(
	UNICODESTRING L"Invalid Input Arguments",
	HRESULT HResult
	);

Record(
	SYSTEMTIME RecordEndTime,
	UNICODESTRING EnrollmentID,
	UNICODESTRING UserSID,
	UNICODESTRING ContextID,
	UNICODESTRING URIPath,
	INT32 CommandType,
	INT32 UserType,
	INT32 ResourceType,
	HRESULT HRESULTForRecord
	);

Record(
	UNICODESTRING L"Invalid Input Arguments",
	HRESULT HResult
	);

Record(
	SYSTEMTIME RecordStartTime
	);

Populate(
	HRESULT HRESULTForPopulate
	);

Populate(
	UNICODESTRING L"UserSID for WMI",
	HRESULT HResult
	);

Populate(
	UNICODESTRING L"UserSID",
	HRESULT HResult
	);

Populate(
	UNICODESTRING L"EnrollmentID",
	HRESULT HResult
	);

Populate(
	UNICODESTRING L"Invalid Input Arguments",
	HRESULT HResult
	);

VerifyResourceAccess(
	BOOL32 AllowAccess,
	HRESULT HResult
	);

VerifyResourceAccess(
	UNICODESTRING L"Error finding current enrollment",
	UNICODESTRING EnrollmentID,
	HRESULT HResult
	);

VerifyResourceAccess(
	UNICODESTRING L"Error finding old enrollment",
	UNICODESTRING EnrollmentID,
	HRESULT HResult
	);

Cm2CspVersion(
	UINT64 PartA_PrivTags,
	UNICODESTRING CSP,
	UNICODESTRING CspVersion,
	ANSISTRING __TlgCV__
	);

WriteAsUser(
	UNICODESTRING ConfigSourceId,
	UNICODESTRING ConfigSourceType,
	UNICODESTRING CSP,
	HEXINT32 Hresult,
	ANSISTRING CmdType,
	UNICODESTRING URI,
	UNICODESTRING ProcessName,
	UINT32 IsAdmin,
	ANSISTRING __TlgCV__
	);

CspNodeOp(
	UNICODESTRING ConfigSourceId,
	UNICODESTRING ConfigSourceType,
	UNICODESTRING CSP,
	HEXINT32 Hresult,
	UNICODESTRING Op,
	UNICODESTRING URI,
	UNICODESTRING OptionalURI,
	ANSISTRING __TlgCV__
	);

ConfigNodeGetValue(
	UNICODESTRING ConfigSourceId,
	UNICODESTRING ConfigSourceType,
	UNICODESTRING CSP,
	HEXINT32 Hresult,
	UNICODESTRING URI,
	ANSISTRING __TlgCV__
	);

CmdFailureStatus(
	UNICODESTRING ConfigSourceId,
	UNICODESTRING ConfigSourceType,
	UNICODESTRING CSP,
	HEXINT32 Hresult,
	ANSISTRING CmdType,
	UNICODESTRING URI,
	ANSISTRING __TlgCV__
	);

Impersonate(
	HEXINT32 Hresult,
	UNICODESTRING Op,
	UNICODESTRING SID
	);

Cm2Execute(
	HEXINT32 Hresult,
	ANSISTRING __TlgCV__
	);

PdcRenewalCallbackFailed(
	HEXINT32 Hresult
	);

PdcLoggingFailed(
	HEXINT32 Hresult,
	UNICODESTRING CmdType
	);

CmdTookTooLong(
	UNICODESTRING ConfigSourceId,
	UNICODESTRING ConfigSourceType,
	UNICODESTRING CSP,
	HEXINT32 Hresult,
	ANSISTRING CmdType,
	UNICODESTRING URI,
	UINT32 OpDuration,
	ANSISTRING __TlgCV__
	);

Impersonate(
	HEXINT32 Hresult,
	UNICODESTRING Op,
	UNICODESTRING SID,
	ANSISTRING __TlgCV__
	);

CspNodeOp(
	UNICODESTRING ConfigSourceId,
	UNICODESTRING ConfigSourceType,
	UNICODESTRING CSP,
	HEXINT32 Hresult,
	UNICODESTRING Op,
	UNICODESTRING URI,
	UNICODESTRING OptionalURI,
	ANSISTRING __TlgCV__
	);

Cm2Property(
	HEXINT32 Hresult,
	UNICODESTRING Op,
	UNICODESTRING URI,
	GUID PropGUID,
	UNICODESTRING PropValue
	);

OutprocSupport(
	HEXINT32 Hresult,
	UNICODESTRING Op,
	UNICODESTRING Info,
	ANSISTRING __TlgCV__
	);

PdcRegistrationfailed(
	HEXINT32 Hresult,
	INT32 PdcClientId
	);

MdmWinsOverGpCreateBlockingRecord(
	UNICODESTRING URI,
	INT32 PolicyType,
	UINT32 MdmWritesToSameLocation,
	UNICODESTRING GpNameSpace,
	UNICODESTRING GpValueName,
	ANSISTRING __TlgCV__
	);

Cm2CspVersion(
	UINT64 PartA_PrivTags,
	UNICODESTRING CSP,
	UNICODESTRING CspVersion,
	ANSISTRING __TlgCV__
	);

ConfigNodeGetValue(
	UNICODESTRING ConfigSourceId,
	UNICODESTRING ConfigSourceType,
	UNICODESTRING CSP,
	HEXINT32 Hresult,
	UNICODESTRING URI,
	ANSISTRING __TlgCV__
	);

UriTranslator(
	HEXINT32 Hresult,
	UNICODESTRING Op,
	UNICODESTRING URI,
	ANSISTRING __TlgCV__
	);

Enumerate(
	UNICODESTRING ConfigSourceId,
	UNICODESTRING ConfigSourceType,
	HEXINT32 Hresult,
	UNICODESTRING URI,
	ANSISTRING __TlgCV__
	);

GetScopeData(
	UNICODESTRING EnrollmentID,
	HRESULT HRESULTForDeleteOldEnrollment,
	ANSISTRING __TlgCV__
	);

VerifyIfResourceIsModifiableByDifferentConfigurationSource(
	UNICODESTRING ExistingEnrollmentID,
	UINT32 ExistingEnrollmentType,
	UNICODESTRING NewEnrollmentID,
	UINT32 NewEnrollmentType,
	UNICODESTRING ResourceURI,
	UINT32 Command,
	BOOL32 AllowAccess,
	HRESULT HResult,
	ANSISTRING __TlgCV__
	);

CommitStateDataActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

FallbackError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

CreateNewStateDataActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING policy
	);

ActivityIntermediateStop(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

HookReevaluationActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

CommitStateDataActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

PerformMergeActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	BOOLEAN modified
	);

PerformMergeActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

CreateNewStateDataActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

SyncServerOverwriteActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

ActivityFailure(
	UINT64 PartA_PrivTags,
	HEX wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

PerformMergeActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

PerformMergeActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	BOOLEAN modified
	);

FallbackError(
	UINT64 PartA_PrivTags,
	SIGNED wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

SyncServerOverwriteActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

PerformMergeActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

ActivityIntermediateStop(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityStoppedAutomatically(
	VOID
	);

CommitStateDataActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

CreateNewStateDataActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

HookReevaluationActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

ActivityFailure(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

ActivityStoppedAutomatically(
	VOID
	);

SyncServerOverwriteActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

CreateNewStateDataActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

HookReevaluationActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TriggeredEvaluationActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

TriggeredEvaluationActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

TriggeredEvaluationActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ApplyContextActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

DisableContextActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

DisableContextActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

DisableContextActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING contextId
	);

ApplyContextActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING contextId
	);

ApplyContextActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ResultGetGroupPolicyInfoNotFound(
	UNICODESTRING cspName,
	UNICODESTRING childPath,
	HRESULT HResult,
	ANSISTRING __TlgCV__
	);

ResultGetGroupPolicyInfo(
	UNICODESTRING cspName,
	UNICODESTRING childPath,
	UINT32 PolicyScope,
	UINT32 GroupPolicyStore,
	BOOL32 mdmWritesToSameLocation,
	UINT32 numberOfMappedLocations,
	HRESULT HResult,
	ANSISTRING __TlgCV__
	);

ResultDoesGroupPolicyExist(
	UNICODESTRING cspName,
	UNICODESTRING childPath,
	INT32 found,
	INT32 hr
	);

ResultGetGroupPolicyInfoLocations(
	INT32 PolicyScope,
	UNICODESTRING gpNamespace,
	UNICODESTRING policyName
	);

