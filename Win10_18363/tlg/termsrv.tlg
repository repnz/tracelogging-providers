ProviderNames:
	Termsrv



**** Events *****
Indirect Display Driver(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Indirect Display Driver(
	ANSISTRING msg,
	UNICODESTRING DeviceName
	);

Indirect Display Driver(
	ANSISTRING msg,
	BOOL32 m_IsWddmIddEnabled
	);

Indirect Display Driver(
	ANSISTRING msg
	);

Indirect Display Driver(
	ANSISTRING msg,
	HEXINT32 ProductType
	);

Indirect Display Driver(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function,
	UNICODESTRING DeviceName
	);

Indirect Display Driver(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function,
	UNICODESTRING DriverInstanceId
	);

Indirect Display Driver(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function,
	UNICODESTRING DriverInstanceId
	);

Indirect Display Driver(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function,
	UNICODESTRING DriverInstanceId,
	UINT64 SessionId
	);

Indirect Display Driver(
	ANSISTRING msg,
	UNICODESTRING DriverInstanceId
	);

Indirect Display Driver(
	ANSISTRING msg,
	UNICODESTRING DriverInstanceId
	);

Indirect Display Driver(
	ANSISTRING msg,
	UNICODESTRING DriverInstanceId,
	BOOL32 Device arrival
	);

Session Arbitration(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Service Start/Stop(
	ANSISTRING msg,
	HRESULT hr
	);

Power Token (PDC)(
	ANSISTRING msg,
	HRESULT hr
	);

Power Token (PDC)(
	ANSISTRING msg
	);

Power Token (PDC)(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Power Token (PDC)(
	ANSISTRING msg,
	HEXINT64 Handle
	);

Auto Reconnect(
	ANSISTRING msg,
	HRESULT hr
	);

Auto Reconnect(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Indirect Display Driver(
	ANSISTRING msg,
	HRESULT hr
	);

Remote Terminal(
	ANSISTRING msg,
	ANSISTRING Function,
	HRESULT Result
	);

Remote Terminal(
	ANSISTRING Task started,
	ANSISTRING Function,
	ANSISTRING msg
	);

Remote Terminal(
	ANSISTRING Task failed,
	ANSISTRING Function,
	HRESULT Result
	);

TerminalType(
	UINT64 PartA_PrivTags,
	ANSISTRING Type
	);

Remote Terminal(
	ANSISTRING msg,
	UNICODESTRING Address
	);

Remote Terminal(
	ANSISTRING msg,
	UNICODESTRING Address,
	UNICODESTRING Domain,
	UNICODESTRING UserName
	);

Remote Terminal(
	ANSISTRING msg,
	HRESULT hr1
	);

Remote Terminal(
	ANSISTRING msg,
	UNICODESTRING ProductId,
	UINT64 Client Session ID
	);

Remote Terminal(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Remote Terminal(
	ANSISTRING msg,
	ANSISTRING Function,
	UINT32 SessionID,
	UINT32 TraceID,
	GUID Client Activity ID
	);

RelatedActivity(
	GUID RelatedActivityID,
	GUID CurrentActivityID,
	ANSISTRING reason
	);

Indirect Display Driver(
	ANSISTRING msg
	);

Remote Terminal(
	ANSISTRING msg,
	HRESULT hr1
	);

Remote Terminal(
	ANSISTRING msg,
	UINT64 SessionId
	);

Remote Terminal(
	ANSISTRING msg,
	HRESULT hr
	);

InitialProgram(
	UINT64 PartA_PrivTags,
	UNICODESTRING InitialProgram
	);

Group Policy(
	ANSISTRING msg,
	ANSISTRING Function,
	HRESULT Result
	);

Group Policy(
	ANSISTRING Task failed,
	ANSISTRING Function,
	HRESULT Result
	);

Group Policy(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Group Policy(
	ANSISTRING msg,
	HRESULT hr
	);

Performance Metric(
	ANSISTRING perf,
	UINT64 Delta
	);

Group Policy(
	ANSISTRING msg,
	HRESULT hr
	);

Group Policy(
	ANSISTRING msg,
	UNICODESTRING wszPathWinsta,
	HRESULT errorCode,
	UINT64 dwQueryDCUserCfg
	);

Group Policy(
	ANSISTRING msg,
	UNICODESTRING wszPathWinsta
	);

Group Policy(
	ANSISTRING msg,
	UNICODESTRING TS_POLICY_SUB_TREE,
	HRESULT errorCode,
	UINT64 dwQueryDCUserCfg
	);

Group Policy(
	ANSISTRING msg,
	UNICODESTRING TS_POLICY_SUB_TREE
	);

Group Policy(
	ANSISTRING Task started,
	ANSISTRING Function,
	ANSISTRING msg,
	UINT64 SessionId
	);

RPC Client Call(
	ANSISTRING msg,
	UINT64 RPC_ClientProcessId,
	HRESULT hr,
	ANSISTRING Function,
	UINT64 SessionId,
	GUID PropertyType
	);

RPC GetConnectionProperty(
	ANSISTRING msg,
	HRESULT revhr,
	UINT64 RPC_ClientProcessId
	);

RPC GetConnectionProperty(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function,
	UINT64 RPC_ClientProcessId
	);

RPC GetConnectionProperty(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function,
	UINT64 RPC_ClientProcessId
	);

RPC GetConnectionProperty(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Session Arbitration(
	ANSISTRING msg
	);

Session Arbitration(
	ANSISTRING msg,
	UNICODESTRING ProtocolName,
	UINT32 MaxInstanceCount
	);

Session Arbitration(
	ANSISTRING msg,
	HRESULT hr
	);

Session Arbitration(
	ANSISTRING msg,
	ANSISTRING Function,
	UINT32 this->m_SourceSessionId
	);

Cache Session(
	ANSISTRING msg,
	HRESULT hr
	);

Session Arbitration(
	ANSISTRING msg,
	UINT32 this->m_SourceSessionId,
	UINT32 this->m_ReconnectToSession
	);

Cache Session(
	ANSISTRING msg,
	UINT32 this->m_SourceSessionId
	);

Session Arbitration(
	ANSISTRING msg,
	UINT32 this->m_SourceSessionId
	);

Cache Session(
	ANSISTRING msg,
	UNICODESTRING pszUser,
	BOOL32 bIsCandidateUser,
	HRESULT hr2,
	UINT32 m_SourceSessionId
	);

Cache Session(
	ANSISTRING msg,
	HRESULT hr
	);

Cache Session(
	ANSISTRING msg
	);

Cache Session(
	ANSISTRING msg,
	UINT32 pSessionIds[i]
	);

Licensing(
	ANSISTRING msg,
	UINT32 TargetSessionId,
	GUID TargetLicenseType,
	GUID LicenseType
	);

Session Arbitration(
	ANSISTRING msg,
	UINT32 this->m_SourceSessionId,
	UINT32 SelectedSessionId
	);

Session Arbitration(
	ANSISTRING msg,
	UINT32 SelectedSessionId
	);

Session Arbitration(
	ANSISTRING msg,
	UINT32 this->m_SourceSessionId,
	UNICODESTRING Domain,
	UNICODESTRING User
	);

Timer Notify(
	ANSISTRING msg
	);

Timer Notify(
	ANSISTRING msg,
	UINT64 SessionId
	);

Timer Notify(
	ANSISTRING msg,
	UINT64 SessionId,
	UINT32 newState,
	UINT32 OldState,
	HEXINT64 pTerminal
	);

SessionArbitration(
	UINT64 PartA_PrivTags,
	ANSISTRING State,
	ANSISTRING Type
	);

Session Arbitration(
	ANSISTRING msg,
	HRESULT hr
	);

Cache Session(
	ANSISTRING msg
	);

Session Arbitration(
	ANSISTRING msg,
	BOOL32 bCacheSessionMode
	);

Fast Reconnect(
	ANSISTRING msg
	);

Fast Reconnect(
	ANSISTRING msg,
	ANSISTRING Function,
	HRESULT Result
	);

Fast Reconnect(
	ANSISTRING Task failed,
	ANSISTRING Function,
	HRESULT Result
	);

Fast Reconnect(
	ANSISTRING msg,
	HRESULT hr,
	UINT64 SessionId
	);

Performance Metric(
	ANSISTRING perf,
	UINT64 ReconnectTime,
	UINT64 SessionId
	);

Fast Reconnect(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Fast Reconnect(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Fast Reconnect(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function,
	UINT32 SessionIdArray->GetSize()
	);

Fast Reconnect(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function,
	BOOL32 CDefaultConnectionHandler->IsFastReconnectAllowed(),
	BOOL32 IConnection->SupportFastReconnect()
	);

Fast Reconnect(
	ANSISTRING Task started,
	ANSISTRING Function,
	ANSISTRING msg
	);

Fast Reconnect(
	ANSISTRING msg,
	UINT64 SessionId
	);

Fast Reconnect(
	ANSISTRING msg,
	UNICODESTRING InitialProgram,
	UINT32 StrLen
	);

Session Directory Arbitrator(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Session Directory Arbitrator(
	ANSISTRING msg
	);

Handle Connection(
	ANSISTRING msg,
	ANSISTRING Function,
	HRESULT Result
	);

Handle Connection(
	ANSISTRING Task failed,
	ANSISTRING Function,
	HRESULT Result
	);

Handle Connection(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Handle Connection(
	ANSISTRING msg
	);

Handle Connection(
	ANSISTRING msg
	);

Handle Connection(
	ANSISTRING Task started,
	ANSISTRING Function,
	ANSISTRING msg
	);

Session Directory Reconnect(
	ANSISTRING msg,
	ANSISTRING Function,
	HRESULT Result
	);

Session Directory Reconnect(
	ANSISTRING Task failed,
	ANSISTRING Function,
	HRESULT Result
	);

Session Directory Reconnect(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Session Directory Reconnect(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Session Directory Reconnect(
	ANSISTRING msg
	);

Session Directory Reconnect(
	ANSISTRING Task started,
	ANSISTRING Function,
	ANSISTRING msg
	);

Session Directory Redirect(
	ANSISTRING msg,
	ANSISTRING Function,
	HRESULT Result
	);

Session Directory Redirect(
	ANSISTRING Task failed,
	ANSISTRING Function,
	HRESULT Result
	);

Session Directory Redirect(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Session Directory Redirect(
	ANSISTRING msg
	);

Session Directory Redirect(
	ANSISTRING msg
	);

Session Directory Redirect(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Session Directory Redirect(
	ANSISTRING Task started,
	ANSISTRING Function,
	ANSISTRING msg
	);

Handle Connection(
	ANSISTRING msg
	);

Auto Reconnect(
	ANSISTRING msg,
	ANSISTRING Function,
	HRESULT Result
	);

Auto Reconnect(
	ANSISTRING Task failed,
	ANSISTRING Function,
	HRESULT Result
	);

Auto Reconnect(
	ANSISTRING msg,
	UINT64 SessionId
	);

Auto Reconnect(
	ANSISTRING msg,
	UINT64 SessionId,
	HRESULT hrTmp
	);

Auto Reconnect(
	ANSISTRING msg,
	UINT64 SessionId,
	UINT64 maxIdleTime,
	UINT64 u64CurrentTime,
	UINT64 lastInputTimeBeforeDisconnect,
	UINT64 Delta
	);

Auto Reconnect(
	ANSISTRING msg
	);

Auto Reconnect(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Auto Reconnect(
	ANSISTRING Task started,
	ANSISTRING Function,
	ANSISTRING msg
	);

Auto Reconnect(
	ANSISTRING msg,
	BOOL32 bAllow,
	UINT64 SessionId
	);

Auto Reconnect(
	ANSISTRING msg,
	BOOL32 pVal,
	HRESULT hr,
	UINT64 SessionId
	);

Auto Reconnect(
	ANSISTRING msg,
	HRESULT hr,
	UINT64 SessionId
	);

Indirect Display Driver(
	ANSISTRING msg,
	UINT32 SessionId,
	UINT32 ConnectionID
	);

Protocol API(
	ANSISTRING msg,
	UINT32 SessionId
	);

Protocol API(
	ANSISTRING msg
	);

Indirect Display Driver(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function,
	UINT32 SessionId
	);

Indirect Display Driver(
	ANSISTRING msg,
	UINT32 SessionId
	);

TimeBetweenConnectAndPNP(
	UINT64 PartA_PrivTags,
	UINT64 Diff,
	BOOL32 ConnectFirst
	);

Protocol API(
	ANSISTRING msg,
	UINT32 SessionId,
	HRESULT hr
	);

Protocol API(
	ANSISTRING msg,
	UINT32 SessionId,
	BOOL32 ConnectNotifyCalled,
	UNICODESTRING EventCtx->m_DeviceName,
	BOOL32 PNPDriverCalled
	);

Protocol API(
	ANSISTRING msg,
	UINT32 SessionId
	);

RemoteFX Support(
	ANSISTRING msg
	);

RemoteFX Support(
	ANSISTRING msg
	);

RemoteFX Support(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

RemoteFX Support(
	ANSISTRING msg
	);

Protocol API callback(
	ANSISTRING msg
	);

Broken Connection(
	ANSISTRING msg,
	ANSISTRING Function,
	HRESULT Result
	);

Broken Connection(
	ANSISTRING Task failed,
	ANSISTRING Function,
	HRESULT Result
	);

Broken Connection(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Broken Connection(
	ANSISTRING msg
	);

Broken Connection(
	ANSISTRING msg,
	INT32 Session ID,
	UINT64 Reason,
	UINT64 Source
	);

Broken Connection(
	ANSISTRING Task started,
	ANSISTRING Function,
	ANSISTRING msg
	);

DisplayDriverDoConnect(
	UINT64 PartA_PrivTags,
	UNICODESTRING PdDLL,
	UNICODESTRING PdName,
	UNICODESTRING WdName,
	GUID ProtocolGuid,
	UNICODESTRING WsxDLL,
	UNICODESTRING ListenerName,
	BOOL32 fRemoteFxSession,
	BOOL32 IDDMode,
	UNICODESTRING XDDMDisplayDriverName,
	UNICODESTRING XDDMDisplayDeviceName,
	UINT32 XDDMNumMonitors,
	HEXINT64 IDDTerminalLUID,
	UNICODESTRING IDDHardwareID,
	UNICODESTRING IDDInstanceID,
	GUID ActivityID,
	BOOL32 ptrIWrdsRemoteFXConnection
	);

Protocol API(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Terminal Operation(
	ANSISTRING msg,
	UINT64 ConnectionID,
	UINT64 SessionId,
	UINT32 Terminal Class ID,
	GUID Terminal Class GUID
	);

Protocol API(
	ANSISTRING msg,
	UINT32 SessionId,
	UINT32 ConnectionID
	);

Protocol API(
	ANSISTRING msg,
	HRESULT hr2,
	UINT32 SessionId,
	UINT32 ConnectionID
	);

Protocol API(
	ANSISTRING msg,
	HRESULT hr,
	UINT32 SessionId,
	UINT32 ConnectionID
	);

Protocol API(
	ANSISTRING msg,
	UINT32 SessionId,
	UINT32 ConnectionID
	);

Client Credentials(
	ANSISTRING msg
	);

Client Credentials(
	ANSISTRING msg,
	HRESULT hr
	);

Protocol API(
	ANSISTRING msg
	);

Protocol API(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Protocol API(
	ANSISTRING msg,
	UINT32 SessionId
	);

Protocol API(
	ANSISTRING msg,
	HRESULT hr
	);

Connection Start(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Assign Session to Connection(
	ANSISTRING msg
	);

Licensing(
	ANSISTRING msg,
	ANSISTRING Function,
	HRESULT Result
	);

Licensing(
	ANSISTRING Task failed,
	ANSISTRING Function,
	HRESULT Result
	);

Licensing(
	ANSISTRING msg
	);

Licensing(
	ANSISTRING msg,
	HRESULT EnfError
	);

Licensing(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Licensing(
	ANSISTRING msg
	);

Licensing(
	ANSISTRING msg,
	HRESULT hr
	);

Licensing(
	ANSISTRING Task started,
	ANSISTRING Function,
	ANSISTRING msg
	);

Initialize Client Data(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Fast Reconnect(
	ANSISTRING msg
	);

Fast Reconnect(
	ANSISTRING msg,
	UINT32 StackValue,
	UINT32 this->bSupportFastReconnect
	);

Fast Reconnect(
	ANSISTRING msg,
	HRESULT hr
	);

Fast Reconnect(
	ANSISTRING msg
	);

Initialize Client Data(
	ANSISTRING msg,
	HEXINT64 WRdsConnectionRdp
	);

Accept Connection(
	ANSISTRING msg,
	ANSISTRING Function,
	HRESULT Result
	);

Accept Connection(
	ANSISTRING Task failed,
	ANSISTRING Function,
	HRESULT Result
	);

Accept Connection(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Accept Connection(
	ANSISTRING msg,
	UNICODESTRING Listener Name
	);

Accept Connection(
	ANSISTRING msg
	);

Performance Metric(
	ANSISTRING perf,
	UINT64 StackReadyTime,
	UINT32 dwStatus
	);

Accept Connection(
	ANSISTRING msg
	);

Accept Connection(
	ANSISTRING Task started,
	ANSISTRING Function,
	ANSISTRING msg
	);

Connection Start(
	ANSISTRING msg,
	ANSISTRING Function,
	HRESULT Result
	);

Connection Start(
	ANSISTRING Task failed,
	ANSISTRING Function,
	HRESULT Result
	);

Connection Start(
	ANSISTRING msg,
	GUID ActivityID
	);

Connection Start(
	ANSISTRING Task started,
	ANSISTRING Function,
	ANSISTRING msg
	);

Client Credentials(
	ANSISTRING msg
	);

Protocol API(
	ANSISTRING msg
	);

Auto Reconnect(
	ANSISTRING msg,
	HRESULT hr
	);

New Connection(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

New Connection(
	ANSISTRING msg,
	UNICODESTRING Listener Name
	);

New Connection(
	ANSISTRING msg,
	UNICODESTRING Listener Name,
	GUID ActivityID
	);

Listener Creation(
	ANSISTRING msg,
	ANSISTRING Function,
	HRESULT Result
	);

Listener Creation(
	ANSISTRING Task failed,
	ANSISTRING Function,
	HRESULT Result
	);

Listener Creation(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Listener Creation(
	ANSISTRING msg
	);

Listener Creation(
	ANSISTRING msg,
	INT16 WRdsListenerSettingLevel
	);

Listener Creation(
	ANSISTRING Task started,
	ANSISTRING Function,
	ANSISTRING msg
	);

Serialize Session Reconnect(
	ANSISTRING msg,
	HRESULT hrTmp
	);

Serialize Session Reconnect(
	ANSISTRING msg,
	ANSISTRING Function,
	HRESULT Result
	);

Serialize Session Reconnect(
	ANSISTRING Task failed,
	ANSISTRING Function,
	HRESULT Result
	);

Serialize Session Reconnect(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Serialize Session Reconnect(
	ANSISTRING msg,
	HRESULT hr
	);

Serialize Session Reconnect(
	ANSISTRING Task started,
	ANSISTRING Function,
	ANSISTRING msg
	);

Enforcement Core(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Enforcement Core(
	ANSISTRING msg,
	HRESULT hr
	);

Enforcement Core(
	ANSISTRING msg,
	HRESULT hr
	);

Enforcement Core(
	ANSISTRING msg,
	UINT32 SessionId
	);

Enforcement Core(
	ANSISTRING msg
	);

Session Arbitration(
	ANSISTRING msg,
	HRESULT hr
	);

Enforcement Core(
	ANSISTRING msg,
	UINT32 State
	);

Enforcement Core(
	ANSISTRING msg,
	UINT32 State
	);

Enforcement Core(
	ANSISTRING msg
	);

Session Arbitration(
	ANSISTRING msg,
	UINT32 SessionId
	);

Session Arbitration(
	ANSISTRING msg
	);

SessionArbitration(
	UINT64 PartA_PrivTags,
	ANSISTRING State,
	UINT64 Time Arbitrating
	);

Session Arbitration(
	ANSISTRING msg,
	UINT32 ExistingSessionID,
	UNICODESTRING Username,
	UINT64 Time Arbitrating
	);

SessionArbitration(
	UINT64 PartA_PrivTags,
	ANSISTRING State
	);

RdsLicensingAADConfig(
	UINT64 PartA_PrivTags,
	BOOL32 IsValidClientId,
	BOOL32 IsValidToken
	);

RdsLicensingPolicyChange(
	UINT64 PartA_PrivTags,
	UINT64 CurrentPolicy,
	UINT64 NewPolicy
	);

Licensing(
	ANSISTRING msg,
	HRESULT LsStatus
	);

Licensing(
	ANSISTRING msg
	);

GenericTrace(
	ANSISTRING szOutput
	);

GenericTrace(
	ANSISTRING szOutput
	);

GenericTrace(
	ANSISTRING szOutput
	);

GenericTrace(
	ANSISTRING szOutput
	);

GenericTrace(
	ANSISTRING szOutput
	);

AppCompat(
	ANSISTRING msg,
	BOOL32 bIsAppServer
	);

AppCompat(
	ANSISTRING msg,
	HRESULT lReturn,
	BOOL32 bIsAppServer,
	UNICODESTRING REG_TERMSRV_APPCOMPAT
	);

AppCompat(
	ANSISTRING msg,
	HRESULT lReturn
	);

CComUtils::CoCreateInSession(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

CComUtils::CoCreateInSession(
	ANSISTRING msg,
	UNICODESTRING szDisplayName,
	UINT64 ulSessionId,
	GUID rclsId,
	GUID riid,
	UINT64 dwClsContext
	);

Logging(
	ANSISTRING msg,
	UNICODESTRING LoggerName,
	HRESULT hr,
	UNICODESTRING szpLogFilename,
	UINT64 m_hTrace,
	UINT64 MaximumFileSize
	);

Logging(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Logging(
	ANSISTRING msg,
	UINT64 this->m_LogFileSize,
	UNICODESTRING m_szLoggerName
	);

Logging(
	ANSISTRING msg,
	UNICODESTRING m_szLoggerName,
	UINT64 dwRet
	);

Logging(
	ANSISTRING msg,
	UINT64 this->m_LogFileSize
	);

Logging(
	ANSISTRING msg,
	HRESULT hr,
	UNICODESTRING szKey
	);

Logging(
	ANSISTRING msg
	);

Security Descriptor(
	ANSISTRING msg
	);

Security Descriptor(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function,
	UNICODESTRING regKey,
	UNICODESTRING regVal
	);

Security Descriptor(
	ANSISTRING msg,
	UNICODESTRING regVal,
	UNICODESTRING regKey
	);

Security Descriptor(
	ANSISTRING msg,
	UNICODESTRING regVal
	);

Security Descriptor(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Security Descriptor(
	ANSISTRING msg,
	UNICODESTRING regKey,
	UNICODESTRING regVal
	);

Security Descriptor(
	ANSISTRING msg,
	UNICODESTRING Listener
	);

Security Descriptor(
	ANSISTRING msg,
	UNICODESTRING regVal,
	UNICODESTRING regKey,
	HRESULT hr
	);

Security Descriptor(
	ANSISTRING msg,
	UNICODESTRING regKey,
	HRESULT hr
	);

Reconnect Compatibility(
	ANSISTRING msg
	);

Reconnect Compatibility(
	ANSISTRING msg,
	GUID ProtocolGuid,
	UINT32 SessionReconnectType
	);

Reconnect Compatibility(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

TerminalClass(
	UINT64 PartA_PrivTags,
	UINT32 TerminalType
	);

Reconnect Compatibility(
	ANSISTRING msg,
	GUID TargetSession->ProtocolGuid,
	UINT32 TargetSession->SessionReconnectType,
	GUID IncomingTerminal->ProtocolGuid,
	UINT32 IncomingTerminal->TerminalClass
	);

Dispatch Event(
	ANSISTRING msg,
	HRESULT hrcall,
	HEXINT64 ITSNotifySink
	);

Dispatch Event(
	ANSISTRING msg,
	HRESULT hr,
	UINT64 SessionId,
	HEXINT64 pNotifyInfo,
	HEXINT64 this,
	HEXINT64 pUser
	);

Dispatch Event(
	ANSISTRING msg,
	HRESULT hr,
	UINT64 SessionId,
	HEXINT64 pNotifyInfo,
	HEXINT64 this,
	UINT64 newState,
	UINT64 oldState
	);

Dispatch Event(
	ANSISTRING msg,
	UINT64 SessionId,
	HEXINT64 pNotifyInfo,
	HEXINT64 this
	);

Dispatch Event(
	ANSISTRING msg,
	ANSISTRING SessionState
	);

Dispatch Event(
	ANSISTRING msg,
	HEXINT64 ITSNotifySink,
	HRESULT hrcall
	);

Dispatch Event(
	ANSISTRING msg,
	UINT64 SessionId,
	HEXINT64 pNotifyInfo,
	HEXINT64 this,
	UINT64 newState,
	UINT64 oldState
	);

Dispatch Event(
	ANSISTRING msg,
	ANSISTRING Failed,
	HRESULT Result,
	ANSISTRING Function
	);

Dispatch Event(
	ANSISTRING msg,
	UINT64 SessionId,
	HEXINT64 pNotifyInfo,
	HEXINT64 pTerminal,
	HEXINT64 this,
	UINT64 newState,
	UINT64 oldState
	);

Dispatch Event(
	ANSISTRING msg,
	HRESULT hr,
	UINT64 SessionId,
	HEXINT64 pNotifyInfo,
	UINT64 newState,
	UINT64 oldState,
	HEXINT64 this
	);

Dispatch Event(
	ANSISTRING msg,
	HRESULT hr,
	UINT64 SessionId,
	HEXINT64 pNotifyInfo,
	UINT64 newState,
	UINT64 oldState,
	HEXINT64 pTerminal,
	HEXINT64 this
	);

Dispatch Event(
	ANSISTRING msg,
	HRESULT hr,
	UINT64 SessionId,
	HEXINT64 pNotifyInfo,
	HEXINT64 this
	);

Dispatch Event(
	ANSISTRING msg,
	UINT64 SessionId,
	HEXINT64 pNotifyInfo,
	HEXINT64 this,
	UINT64 State
	);

Dispatch Event(
	ANSISTRING msg,
	HRESULT hr,
	UINT64 SessionId,
	HEXINT64 pNotifyInfo,
	HEXINT64 this,
	UINT64 State
	);

Dispatch Event(
	ANSISTRING msg,
	UINT64 SessionId,
	HEXINT64 pNotifyInfo,
	HEXINT64 this,
	HEXINT64 pUser
	);

Dispatch Event(
	ANSISTRING msg,
	UINT64 SessionId
	);

Dispatch Event(
	ANSISTRING msg,
	ANSISTRING CurrentState,
	ANSISTRING ExpectedState
	);

