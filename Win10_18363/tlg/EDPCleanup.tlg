ProviderNames:
	EDPCleanupTraceLoggingProvider
	Microsoft.Windows.DeviceManagement.SessionManagement
	Microsoft.Windows.EnterpriseManagement.Enrollment
	Microsoft.Windows.EnterpriseManagement.PolicyManager
	Microsoft.Windows.DeviceManagement.OmaDmApiProvider
	Microsoft.Windows.EnterpriseManagement.ResourceManager
	Microsoft.Windows.DeviceManagement.OmaDmClient
	Microsoft.Windows.DeviceManagement.ConfigManager2
	Microsoft.Windows.EnterpriseManagement.DeclaredConfiguration
	Microsoft.Windows.DeviceManagement.DevDetailCsp
	Microsoft.Windows.DeviceManagement.OMADMPRC
	Microsoft.Windows.EnterpriseManagement.ResourceManagerUnenrollHook
	Microsoft.Windows.DeviceManagement.SecurityPolicyCsp
	Microsoft.Windows.DeviceManagement.DmAccCsp
	Microsoft.Windows.DeviceManagement.DevInfo
	Microsoft.Windows.EnterpriseManagement.ConfigManagerHook
	Microsoft-Windows-DeviceManagement-W7NodeProcessor
	Microsoft.Windows.EMPS.Enrollment
	Microsoft.Windows.DeviceManagement.MdmPostProcessEvaluator



**** Events *****
EDPCleanupDeleteActivity(
	VOID
	);

EDPCleanupDeleteActivity(
	VOID
	);

ActivityStoppedAutomatically(
	VOID
	);

EDPNotification(
	VOID
	);

EDPNotification(
	VOID
	);

EDPCleanupEnumerateActivity(
	VOID
	);

EDPCleanupEnumerateActivity(
	VOID
	);

FallbackError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

FallbackError(
	UINT64 PartA_PrivTags,
	SIGNED wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

EdpEvaluatorRun(
	HRESULT resultValue,
	HEXINT32 statusValue,
	ANSISTRING __TlgCV__
	);

EDPWipeKey(
	VOID
	);

EDPWipeKey(
	VOID
	);

EDPCleanupDecryptActivity(
	VOID
	);

EDPCleanupDecryptActivity(
	VOID
	);

StartEdpEvaluatorTraceEnd(
	INT32 resultValue
	);

StartEdpEvaluatorTraceStart(
	UNICODESTRING stringParamValue
	);

EDPParameterParsing(
	UNICODESTRING Message,
	INT32 Error,
	ANSISTRING __TlgCV__
	);

EDPCleanupBinary(
	UNICODESTRING Message,
	ANSISTRING Exception,
	ANSISTRING __TlgCV__
	);

EDPEnumerate(
	UNICODESTRING Message,
	UINT64 DevicePriority,
	INT32 Error,
	ANSISTRING __TlgCV__
	);

EDPDecrypt(
	UNICODESTRING Message,
	UINT32 Error,
	ANSISTRING __TlgCV__
	);

EDPDelete(
	UNICODESTRING Message,
	INT32 Error,
	ANSISTRING __TlgCV__
	);

EDPDelete(
	UNICODESTRING Message,
	UINT64 DevicePriority,
	INT32 Error,
	ANSISTRING __TlgCV__
	);

EDPCleanupBinary(
	UNICODESTRING Message,
	ANSISTRING __TlgCV__
	);

EDPDecrypt(
	UNICODESTRING Message,
	ANSISTRING __TlgCV__
	);

EDPEnumerate(
	UNICODESTRING Message,
	UINT64 Count,
	ANSISTRING __TlgCV__
	);

EDPFileFinder(
	UNICODESTRING Message,
	INT32 Error,
	ANSISTRING __TlgCV__
	);

EDPParameterParsing(
	UNICODESTRING Message,
	ANSISTRING __TlgCV__
	);

EDPFileFinder(
	UNICODESTRING Message,
	UNICODESTRING Device,
	ANSISTRING __TlgCV__
	);

EDPDecrypt(
	UNICODESTRING Message,
	UINT64 Count,
	ANSISTRING __TlgCV__
	);

EDPFileFinder(
	UNICODESTRING Message,
	UINT64 Count,
	ANSISTRING __TlgCV__
	);

EDPCleanupBinary(
	UNICODESTRING Message,
	INT32 Error,
	ANSISTRING __TlgCV__
	);

EDPDecrypt(
	UNICODESTRING Message,
	UINT64 DevicePriority,
	INT32 Error,
	ANSISTRING __TlgCV__
	);

EDPNotification(
	UNICODESTRING Message,
	UNICODESTRING EPDN,
	UNICODESTRING ENDN,
	INT32 Error,
	ANSISTRING __TlgCV__
	);

EDPNotification(
	UNICODESTRING Message,
	INT32 Error,
	ANSISTRING __TlgCV__
	);

EDPParameterParsing(
	UNICODESTRING Message,
	ANSISTRING Exception,
	ANSISTRING __TlgCV__
	);

EDPDelete(
	UNICODESTRING Message,
	UINT64 Count,
	ANSISTRING __TlgCV__
	);

EDPWipeKey(
	UNICODESTRING Message,
	INT32 Error,
	ANSISTRING __TlgCV__
	);

