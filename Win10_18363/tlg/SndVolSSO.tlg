ProviderNames:
	Microsoft.Windows.Shell.SystemTray.Volume
	Microsoft.Windows.Audio.License
	Microsoft.Windows.Audio.Spatial.Metadata
	Microsoft.Windows.Wil.FeatureLogging



**** Events *****
LaunchSndVol(
	UINT16 command
	);

FallbackError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

FallbackError(
	UINT64 PartA_PrivTags,
	SIGNED wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

NoAudioAvailable(
	VOID
	);

SpatialToastLaunch(
	UNICODESTRING EndpointId,
	UNICODESTRING EndpointInstanceId,
	UINT32 ToastPolicy,
	UINT32 ToastShownBefore,
	BOOLEAN TailoredExperiencesEnabled,
	INT32 EndpointFormFactor,
	INT32 SpatialAudioAlreadyEnabled,
	INT32 SpatialAudioPolicy,
	UNICODESTRING ToastTag,
	HRESULT HResultToastLaunch,
	HRESULT HResult
	);

VolWarningError(
	UINT32 hr
	);

VolWarning(
	UINT32 Result,
	INT32 isChild
	);

MakeToast(
	UNICODESTRING eventId,
	UNICODESTRING toastTag,
	UNICODESTRING registryValue,
	HRESULT hresult
	);

AtmosLicenseCheckInfo(
	ANSISTRING Msg
	);

AtmosLicenseCheck(
	INT32 TelemetryVersion,
	GUID ContextId,
	HRESULT DDPlusDecEnabled,
	HRESULT MatEncEnabled,
	HRESULT DolbyHeadphonesEncEnabled,
	HRESULT DolbySpeakersEncEnabled,
	HRESULT DtsxHeadphonesEncEnabled,
	HRESULT DtsxSpeakersEncEnabled,
	ANSISTRING LicenseEvaluation,
	HRESULT ErrorCode
	);

AtmosLicenseCheck(
	INT32 TelemetryVersion,
	GUID ContextId,
	HRESULT DDPlusDecEnabled,
	HRESULT MatEncEnabled,
	HRESULT DolbyHeadphonesEncEnabled,
	HRESULT DolbySpeakersEncEnabled,
	HRESULT DtsxHeadphonesEncEnabled,
	HRESULT DtsxSpeakersEncEnabled,
	ANSISTRING LicenseEvaluation,
	HRESULT ErrorCode
	);

AtmosLicenseCheckError(
	ANSISTRING Msg,
	HRESULT ErrorCode
	);

AtmosLicenseCheck::GetLicenseStatus(
	UNICODESTRING spatialAudioSubtype,
	HRESULT hr,
	BOOLEAN isValid,
	BOOLEAN isRendererCapable
	);

AtmosLicenseCheck::PerformConditionalLicenseCheckAsync - check event Global\Client_Atmos_Check_Event(
	BOOL32 fEventIsSignaled
	);

AtmosLicenseCheck::GetLicenseStatus called, but not in AppService mode.(
	VOID
	);

AtmosLicenseCheck::RefreshSpatialAudioLicenseModelState(
	BOOLEAN _fUseAppService
	);

AtmosLicenseCheck: Failed to get Default Device ID(
	HRESULT hr
	);

Error(
	ANSISTRING Function,
	INT32 Line,
	HRESULT ResultCode
	);

AssertFailure(
	ANSISTRING Function,
	INT32 Line,
	HRESULT ResultCode
	);

Unknown SpatialAudioEncoderId(
	ANSISTRING Function,
	INT32 Line,
	HRESULT ResultCode
	);

SpatialAudioMetadataDictionary::RuntimeClassInitialize(
	HEXINT64 this,
	HRESULT HResult,
	GUID FormatId,
	UNICODESTRING EndPointId
	);

FeatureUsage(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	BOOLEAN enabled,
	UINT32 kind,
	UINT64 addend
	);

FeatureError(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	HRESULT hr,
	ANSISTRING file,
	UINT16 lineNumber,
	ANSISTRING module,
	ANSISTRING process,
	ANSISTRING originFile,
	UINT16 originLineNumber,
	ANSISTRING originModule,
	ANSISTRING originName,
	ANSISTRING message,
	ANSISTRING callerModule,
	UINT32 callerReturnAddressOffset,
	ANSISTRING originCallerModule,
	UINT32 originCallerReturnAddressOffset
	);

FeatureVariantUsage(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	BOOLEAN enabled,
	UINT32 variantKind,
	UINT8 variant,
	UINT64 addend
	);

EnabledFeatureUsage(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	BOOLEAN enabled,
	UINT32 kind,
	UINT64 addend
	);

