ProviderNames:
	Microsoft.Windows.App.Browser
	TelemetryAssert
	TelemetryAssertDiagTrack
	Microsoft.Windows.Wil.FeatureLogging



**** Events *****
CreateRACProcess_Run(
	UINT32 m_newComponentHandle,
	UINT32 m_targetProcHandle
	);

FeatureError(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	HRESULT hr,
	ANSISTRING file,
	UINT16 lineNumber,
	ANSISTRING module,
	ANSISTRING process,
	ANSISTRING originFile,
	UINT16 originLineNumber,
	ANSISTRING originModule,
	ANSISTRING originName,
	ANSISTRING message,
	ANSISTRING callerModule,
	UINT32 callerReturnAddressOffset,
	ANSISTRING originCallerModule,
	UINT32 originCallerReturnAddressOffset
	);

FeatureVariantUsage(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	BOOLEAN enabled,
	UINT32 variantKind,
	UINT8 variant,
	UINT64 addend
	);

EnabledFeatureUsage(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	BOOLEAN enabled,
	UINT32 kind,
	UINT64 addend
	);

FeatureUsage(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	BOOLEAN enabled,
	UINT32 kind,
	UINT64 addend
	);

FallbackError(
	UINT64 PartA_PrivTags,
	SIGNED wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

FallbackError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

LaunchCuiComponentAsync(
	GUID racGuid,
	UINT32 associatedComponent,
	UINT32 hProc
	);

CUIComponentCreationFailurePoint::ExtendedExecutionSessionPutReason(
	INT32 hr
	);

CUIComponentCreationFailurePoint::ActivateExtendedExecutionSession(
	INT32 hr
	);

CUIComponentCreationFailurePoint::WaitRequestExtensionAsync(
	INT32 hr
	);

CUIComponentCreationFailurePoint::RequestExtensionAsync(
	INT32 hr
	);

PdfCUIComponentCreationCallback(
	INT32 caller,
	INT32 statusPoint,
	HRESULT hr,
	UINT64 pdfSessionId
	);

CUIComponentCreationFailure(
	INT32 caller,
	INT32 failurePoint,
	HRESULT failureHr
	);

IsSmartcardProviderThirdPartySigned_WTGetSignatureInfoComplete(
	VOID
	);

IsSmartcardProviderThirdPartySigned_ModuleSigningStatusCacheCheck(
	VOID
	);

IsSmartcardProviderThirdPartySigned_WTGetSignatureInfoFailed(
	VOID
	);

IsSmartcardProviderThirdPartySigned_ModuleSigningStatusCacheAdd(
	VOID
	);

IsSmartcardProviderThirdPartySigned_RegGetValue(
	VOID
	);

IsSmartcardProviderThirdPartySigned_WTGetSignatureInfo(
	VOID
	);

Assert(
	UINT32 assertVersion,
	UINT32 rva,
	UINT32 timestamp,
	UINT32 imageSize,
	ANSISTRING imageName,
	UINT32 count,
	UINT32 totalHits,
	UINT32 ModuleCollection,
	UINT32 GlobalCollection
	);

AssertWithArgs(
	UINT32 assertVersion,
	UINT32 rva,
	UINT32 timestamp,
	UINT32 imageSize,
	ANSISTRING imageName,
	UINT32 count,
	UINT32 totalHits,
	ANSISTRING originatingBinary,
	UINT32 bucketArgument1,
	UINT32 bucketArgument2,
	UINT32 ModuleCollection,
	UINT32 GlobalCollection
	);

