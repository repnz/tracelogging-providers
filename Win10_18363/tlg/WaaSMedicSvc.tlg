ProviderNames:
	Microsoft.Windows.WaaSMedic
	Microsoft.Windows.WaaSMedic
	Microsoft.Windows.WaaSMedic.Local



**** Events *****
ActivityError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

FallbackError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

EnumeratePluginActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

SandboxActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__,
	UNICODESTRING capsuleName
	);

RemediationActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString,
	UNICODESTRING pluginName
	);

SandboxActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

EnumeratePluginActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityIntermediateStop(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

EnumeratePluginActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__,
	UNICODESTRING capsuleName
	);

SandboxActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

FallbackError(
	UINT64 PartA_PrivTags,
	SIGNED wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

DetectionActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString,
	UNICODESTRING pluginName
	);

ActivityStoppedAutomatically(
	VOID
	);

DetectionActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

DetectionActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

RemediationActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

RemediationActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

RegUtil.UnexpectedRootPathFromStateSeparationApi(
	UNICODESTRING versionString,
	UNICODESTRING stateSeparatedRootPath
	);

RegUtil.RegSetValueFromVariantFailed(
	UNICODESTRING versionString,
	UNICODESTRING subKey,
	UNICODESTRING valueName,
	BOOL32 protected,
	HRESULT hResult
	);

RegUtil.RegGetValueAsVariantFailed(
	UNICODESTRING versionString,
	UNICODESTRING subKey,
	UNICODESTRING valueName,
	HRESULT hResult
	);

RegUtil.SafeRegQueryValueCchAllocHelperFailed(
	UNICODESTRING versionString,
	UNICODESTRING valueName,
	HRESULT hResult
	);

RegUtil.SafeRegQueryValueCchHelperFailed(
	UNICODESTRING versionString,
	UNICODESTRING valueName,
	HRESULT hResult
	);

RegUtil.RegDelAllValuesInKeyFailed(
	UNICODESTRING versionString,
	UNICODESTRING subKey,
	HRESULT hResult
	);

RegUtil.RegDelTreeFailed(
	UNICODESTRING versionString,
	UNICODESTRING parentKey,
	UNICODESTRING treeToDelete,
	HRESULT hResult
	);

RegUtil.RegDelValueFailed(
	UNICODESTRING versionString,
	UNICODESTRING subKey,
	UNICODESTRING valueName,
	HRESULT hResult
	);

RegUtil.RegSetValueFailed(
	UNICODESTRING versionString,
	UNICODESTRING parentKey,
	UNICODESTRING subKey,
	UNICODESTRING valueName,
	UINT32 valueType,
	HRESULT hResult
	);

RegUtil.RegCreateKeyFailed(
	UNICODESTRING versionString,
	UNICODESTRING parentKey,
	UNICODESTRING subKey,
	HRESULT hResult
	);

SummaryEvent(
	UINT64 PartA_PrivTags,
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString,
	UNICODESTRING callerApplication,
	BOOL32 isInteractiveMode,
	INT32 waasMedicRunMode,
	UINT32 capsuleCount,
	UINT32 capsuleFailureCount,
	UINT32 pluginsCount,
	UINT32 pluginFailureCount,
	HRESULT hrEngineResult,
	INT32 hrEngineBlockReason,
	HRESULT hrLastSandboxError,
	UNICODESTRING initSummary,
	UNICODESTRING detectionSummary,
	UNICODESTRING remediationSummary,
	UNICODESTRING qualityAssessmentImpact,
	UNICODESTRING featureAssessmentImpact,
	BOOL32 usingBackupFeatureAssessment,
	BOOL32 usingBackupQualityAssessment,
	BOOL32 usingCachedFeatureAssessment,
	BOOL32 usingCachedQualityAssessment,
	BOOL32 isManaged,
	BOOL32 isWUConnected,
	BOOL32 noMoreActions
	);

SecurityDescriptorProtectionResult(
	UNICODESTRING versionString,
	HRESULT hResult,
	UNICODESTRING folderPath,
	BOOL32 isProtectionEnabled
	);

TaskProtectionResult(
	UNICODESTRING versionString,
	HRESULT hResult,
	UNICODESTRING taskName,
	UNICODESTRING taskPath,
	BOOL32 isProtectionEnabled
	);

TaskProtectionResultExtended(
	UNICODESTRING versionString,
	HRESULT hResult,
	UNICODESTRING taskName,
	UNICODESTRING taskPath,
	UNICODESTRING taskXML,
	BOOL32 isProtectionEnabled
	);

RegistryValueProtectionResult(
	UNICODESTRING versionString,
	HRESULT hResult,
	UNICODESTRING root,
	UNICODESTRING regkeyPath,
	UNICODESTRING regValueName,
	BOOL32 isProtectionEnabled
	);

RegistryKeyProtectionResult(
	UNICODESTRING versionString,
	HRESULT hResult,
	UNICODESTRING root,
	UNICODESTRING regkeyPath,
	BOOL32 isProtectionEnabled
	);

RegUtil.RegQueryValueFailed(
	UNICODESTRING versionString,
	UNICODESTRING valueType,
	UNICODESTRING valueName,
	HRESULT hResult
	);

RemediationFailed(
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString,
	UNICODESTRING pluginName,
	BOOL32 isRemediated,
	UNICODESTRING diagnostic,
	HRESULT hResult
	);

RemediationCompleted(
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString,
	UNICODESTRING pluginName,
	BOOL32 isRemediated,
	UNICODESTRING diagnostic,
	HRESULT hResult
	);

RemediationStarted(
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString,
	UNICODESTRING pluginName
	);

DetectionFailed(
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString,
	UNICODESTRING pluginName,
	BOOL32 isDetected,
	UNICODESTRING diagnostic,
	HRESULT hResult
	);

DetectionCompleted(
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString,
	UNICODESTRING pluginName,
	BOOL32 detected,
	UNICODESTRING diagnostic,
	HRESULT hResult
	);

DetectionStarted(
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString,
	UNICODESTRING pluginName
	);

RemediationsOnlyFailed(
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString,
	HRESULT hResult
	);

RemediationsOnlyCompleted(
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString
	);

RemediationsOnlyStarted(
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString,
	UNICODESTRING callerApplication,
	BOOL32 isInteractiveMode
	);

DetectionsOnlyFailed(
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString,
	HRESULT hResult
	);

DetectionsOnlyCompleted(
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString
	);

DetectionsOnlyStarted(
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString,
	UNICODESTRING callerApplication,
	BOOL32 isInteractiveMode
	);

EngineCompleted(
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString
	);

EngineFailed(
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString,
	HRESULT hResult
	);

EngineStarted(
	ANSISTRING __TlgCV__,
	UNICODESTRING versionString,
	UNICODESTRING callerApplication,
	BOOL32 isInteractiveMode
	);

LogLevelError(
	UNICODESTRING fmt,
	HRESULT hResult
	);

LogLevelError(
	ANSISTRING fmt,
	HRESULT hResult
	);

Verbose(
	UNICODESTRING m
	);

Info(
	UNICODESTRING m
	);

Warning(
	UNICODESTRING m
	);

Error(
	UNICODESTRING m
	);

Verbose(
	ANSISTRING m
	);

Info(
	ANSISTRING m
	);

Warning(
	ANSISTRING m
	);

Error(
	ANSISTRING m
	);

SvcUtil.ServiceStopFailed(
	UNICODESTRING versionString,
	UNICODESTRING serviceName,
	HRESULT hResult
	);

CloudSettingsProvider.RunConfigSetQueryFailed(
	UNICODESTRING versionString,
	HRESULT hResult
	);

WaasCurrencyDetector.RunBackupWaasOSQualityAssessmentCallSuccess(
	UNICODESTRING versionString
	);

WaasCurrencyDetector.RunWaasOSQualityAssessmentCallFailed(
	UNICODESTRING versionString,
	HRESULT hResult
	);

WaasCurrencyDetector.RunWaasAssessorInitialization(
	UNICODESTRING versionString,
	HRESULT hResult
	);

WaasCurrencyDetector.RunPersistingFeatureAssessmentResultFailed(
	UNICODESTRING versionString,
	HRESULT hResult
	);

WaasCurrencyDetector.RunWaasOSQualityAssessmentCallSuccess(
	UNICODESTRING versionString
	);

WaasCurrencyDetector.RunPersistingQualityAssessmentResultFailed(
	UNICODESTRING versionString,
	HRESULT hResult
	);

WaasCurrencyDetector.RunWaasOSFeatureAssessmentCallSuccess(
	UNICODESTRING versionString
	);

WaasCurrencyDetector.GetIsWaasAssessmentCacheValidFailed(
	UNICODESTRING versionString,
	HRESULT hResult
	);

WaasCurrencyDetector.RunBackupWaasOSFeatureAssessmentCallFailed(
	UNICODESTRING versionString,
	HRESULT hResult
	);

WaasCurrencyDetector.RunBackupWaasOSQualityAssessmentCallFailed(
	UNICODESTRING versionString,
	HRESULT hResult
	);

WaasCurrencyDetector.RunWaasOSFeatureAssessmentCallFailed(
	UNICODESTRING versionString,
	HRESULT hResult
	);

WaasCurrencyDetector.RunBackupWaasOSFeatureAssessmentCallSuccess(
	UNICODESTRING versionString
	);

TasksHelper.CreateOrUpdateTaskFailed(
	UNICODESTRING versionString,
	UNICODESTRING taskName,
	UNICODESTRING taskXml,
	HRESULT hResult
	);

TasksHelper.DeleteTaskFailed(
	UNICODESTRING versionString,
	UNICODESTRING taskName,
	HRESULT hResult
	);

TasksHelper.EnableTaskFailed(
	UNICODESTRING versionString,
	UNICODESTRING taskName,
	HRESULT hResult
	);

TasksHelper.InitializeSuccess(
	UNICODESTRING versionString,
	UNICODESTRING taskFolderPath
	);

TasksHelper.InitializeFailed(
	UNICODESTRING versionString,
	UNICODESTRING taskFolderPath,
	HRESULT hResult
	);

