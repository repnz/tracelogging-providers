ProviderNames:
	Microsoft.Windows.Defender.Shield
	Microsoft.Windows.ImageMitigationPolicy
	Microsoft.Windows.Wil.FeatureLogging



**** Events *****
MonitoringPulse(
	VOID
	);

ShieldHeartbeat(
	UNICODESTRING SummaryHealth,
	UNICODESTRING ThreatProtectionHealth,
	UNICODESTRING ThreatProtectionStatus,
	UNICODESTRING DefenderAvHealth,
	UNICODESTRING DefenderAvStatus,
	UNICODESTRING NetworkProtectionHealth,
	UNICODESTRING NetworkProtectionStatus,
	UNICODESTRING HealthAdvisorHealth,
	UNICODESTRING HealthAdvisorStatus,
	UNICODESTRING AppAndBrowserHealth,
	UNICODESTRING AppAndBrowserStatus,
	UNICODESTRING HardwareSecurityHealth,
	UNICODESTRING HardwareSecurityStatus,
	UNICODESTRING AccountProtectionHealth,
	UNICODESTRING AccountProtectionStatus,
	UNICODESTRING OsProtectionHealth,
	UNICODESTRING OsProtectionStatus,
	UNICODESTRING DataProtectionHealth,
	UNICODESTRING DataProtectionStatus,
	UNICODESTRING WscJsonStatusAvFw,
	UNICODESTRING DefenderAvCurrentRunningMode,
	BOOL32 IsRtpEnabled,
	BOOL32 IsRtpByPolicy,
	BOOL32 IsCloudEnabled,
	BOOL32 IsCloudByPolicy,
	BOOL32 IsSampleSubmissionEnabled,
	BOOL32 IsSampleSubmissionByPolicy,
	BOOL32 IsCfaEnabled,
	BOOL32 IsCfaByPolicy,
	BOOL32 IsDefenderAvDisabled,
	BOOL32 IsAvDisableByPolicy,
	BOOL32 IsDefenderAsDisabled,
	BOOL32 IsAsDisableByPolicy,
	UNICODESTRING SmartScreenAppPolicy,
	UNICODESTRING SmartScreenEdgePolicy,
	UNICODESTRING SmartScreenStorePolicy
	);

AntitamperingState(
	BOOL32 OffByGracePeriod,
	BOOL32 OffByPreference
	);

DismissAssessment(
	UNICODESTRING AssessmentName,
	UNICODESTRING Severity
	);

TimeServiceAssessmentEnd(
	HRESULT hResult,
	BOOL32 TimeServiceStatus
	);

TimeServiceAssessmentStart(
	VOID
	);

ReliabilityStatus(
	UINT64 Size(in days) of query search window,
	SYSTEMTIME Timestamp of assessment run,
	UINT64 Number of System Errors,
	UINT64 Number of Application Errors,
	DOUBLE ReliabilityScore
	);

ReliabilityAssessmentEnd(
	HRESULT hResult,
	DOUBLE ReliabilityScore
	);

ReliabilityAssessmentStart(
	VOID
	);

ScLowDisk(
	UINT64 freeMb,
	UINT32 statusCode
	);

ScDiskAllGood(
	UINT64 freeMb,
	UINT32 statusCode
	);

ScRunAssessmentFailed(
	UINT32 length
	);

ScRunAssessmentEnd(
	VOID
	);

ScRunAssessmentFailed(
	BOOL32 returnCode
	);

ScRunAssessmentStart(
	VOID
	);

ScIsSmartStorageEnabled(
	UINT32 isSmartStorageEnabled,
	UINT32 hResult
	);

BatteryRunAssessmentEnd(
	HRESULT hResult
	);

BatteryStatus(
	UINT32 statusCode
	);

BatteryRunAssessmentStart(
	VOID
	);

UpdateMonitorHealthAssessmentEnd(
	HRESULT hResult,
	BOOL32 isAssessmentBlocked,
	ANSISTRING BlockReason,
	ANSISTRING WaasMedicAction,
	INT32 TaskUpdateActionBitmask
	);

UpdateMonitorHealthAssessmentStart(
	VOID
	);

DriverRunAssessmentEnd(
	VOID
	);

DriverStatus(
	UINT32 statusCode
	);

DriverRunAssessmentStart(
	VOID
	);

UpdateMonitorBinaryCorruptionEnd(
	HRESULT hResult
	);

UpdateMonitorBinaryCorruptionStart(
	VOID
	);

FeatureError(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	HRESULT hr,
	ANSISTRING file,
	UINT16 lineNumber,
	ANSISTRING module,
	ANSISTRING process,
	ANSISTRING originFile,
	UINT16 originLineNumber,
	ANSISTRING originModule,
	ANSISTRING originName,
	ANSISTRING message,
	ANSISTRING callerModule,
	UINT32 callerReturnAddressOffset,
	ANSISTRING originCallerModule,
	UINT32 originCallerReturnAddressOffset
	);

EnabledFeatureUsage(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	BOOLEAN enabled,
	UINT32 kind,
	UINT64 addend
	);

FeatureVariantUsage(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	BOOLEAN enabled,
	UINT32 variantKind,
	UINT8 variant,
	UINT64 addend
	);

FeatureUsage(
	UINT32 featureId,
	INT32 featureVersion,
	INT32 featureBaseVersion,
	INT16 featureStage,
	BOOLEAN enabled,
	UINT32 kind,
	UINT64 addend
	);

FallbackError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

FallbackError(
	UINT64 PartA_PrivTags,
	SIGNED wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

DataProtectionEnterWarning(
	UNICODESTRING WarningState
	);

DataProtectionEnterWarning(
	UNICODESTRING WarningState,
	UNICODESTRING ProviderType
	);

DataProtectionRevokeWarning(
	UNICODESTRING WarningState
	);

DataProtectionCloudBackupProviderUpdate(
	UINT32 Action,
	UINT32 ProviderType,
	UINT32 ProviderState,
	BOOL32 IsProviderRuntimeRegistered
	);

DataProtectionDismissWarning(
	UNICODESTRING WarningState
	);

AssessmentRemediationStart(
	UNICODESTRING AssessmentName
	);

AssessmentRemediationEnd(
	UNICODESTRING AssessmentName,
	HRESULT hResult
	);

SetMitigationPolicyFailure(
	UNICODESTRING imageName,
	UNICODESTRING mitigationOption,
	NTSTATUS errorCode
	);

RemoveAllImageMitigationAuditPoliciesFailure(
	UNICODESTRING imageName,
	NTSTATUS errorCode
	);

QueryMitigationPolicyFailure(
	UNICODESTRING imageName,
	UNICODESTRING mitigationOption,
	NTSTATUS errorCode
	);

SetMitigationPolicy(
	UNICODESTRING imageName,
	UNICODESTRING mitigationOption
	);

CapturedMitigationPolicyValue(
	UNICODESTRING imageName,
	UNICODESTRING mitigationOption,
	UNICODESTRING payload
	);

QueryMitigationAuditPolicyFailure(
	UNICODESTRING imageName,
	UNICODESTRING mitigationOption,
	NTSTATUS errorCode
	);

CapturedMitigationAuditPolicyValue(
	UNICODESTRING imageName,
	UNICODESTRING mitigationOption,
	UNICODESTRING payload
	);

SetMitigationAuditPolicyFailure(
	UNICODESTRING imageName,
	UNICODESTRING mitigationOption,
	NTSTATUS errorCode
	);

RemoveAllImageMitigationPolicies(
	UNICODESTRING imageName
	);

MitigationPolicyValuePostSet(
	UNICODESTRING imageName,
	UNICODESTRING mitigationOption,
	UNICODESTRING expectedPayload,
	UNICODESTRING payload
	);

MitigationAuditPolicyValuePostSet(
	UNICODESTRING imageName,
	UNICODESTRING mitigationOption,
	UNICODESTRING expectedPayload,
	UNICODESTRING payload
	);

RemoveAllImageMitigationPoliciesFailure(
	UNICODESTRING imageName,
	NTSTATUS errorCode
	);

QueryMitigationPolicy(
	UNICODESTRING imageName,
	UNICODESTRING mitigationOption
	);

ToastThrottling(
	UINT32 millisecondsTimeout,
	UINT64 actualMilliseconds,
	UINT32 toast type
	);

