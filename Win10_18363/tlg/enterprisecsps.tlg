ProviderNames:
	Microsoft.Windows.DeviceManagement.OmaDmApiProvider
	Microsoft.Windows.DeviceManagement.SessionManagement
	Microsoft.Windows.DeviceManagement.OmaDmClient
	Microsoft.Windows.DeviceManagement.OMADMPRC
	Microsoft.Windows.EnterpriseManagement.ResourceManager
	Microsoft.Windows.EnterpriseManagement.ResourceManagerUnenrollHook
	Microsoft.Windows.DeviceManagement.DmAccCsp
	Microsoft.Windows.DeviceManagement.DevInfo
	Microsoft.Windows.DeviceManagement.DevDetailCsp
	Microsoft-Windows-DeviceManagement-W7NodeProcessor
	Microsoft.Windows.DeviceManagement.SecurityPolicyCsp
	Microsoft.Windows.EnterpriseManagement.DeclaredConfiguration
	Microsoft.Windows.EnterpriseManagement.PolicyManager
	Microsoft.Windows.EnterpriseManagement.ConfigManagerHook
	Microsoft.Windows.DeviceManagement.ConfigManager2
	Microsoft.Windows.EMPS.Enrollment
	Microsoft.Windows.EnterpriseManagement.Enrollment
	Microsoft.Windows.DeviceManagement.CertificateStore
	Microsoft.Windows.Security.RemoteLockCsp
	Microsoft.Windows.DeviceManagement.SCEP
	TelemetryAssert
	TelemetryAssertDiagTrack
	Microsoft.Windows.DeviceManagement.DMClient
	Microsoft.Windows.EnterpriseManagement.NodeCache
	Microsoft.Windows.PlatformExtensions
	Microsoft.Windows.DeviceManagement.DeviceManageability
	Microsoft.Windows.EnterpriseManagement.MDMPush
	Microsoft.Windows.EnterpriseManagement.Dynamo
	Microsoft.Windows.EnterpriseManagement.FirstSyncStatus
	Microsoft.Windows.DeviceManagement.CDNDownloader



**** Events *****
Failure(
	UNICODESTRING FunctionName,
	UINT32 NodeType,
	INT32 Hresult
	);

FallbackError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

Failure(
	UNICODESTRING FunctionName,
	INT32 Hresult
	);

Success(
	UNICODESTRING FunctionName,
	INT32 Hresult
	);

FallbackError(
	UINT64 PartA_PrivTags,
	SIGNED wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

Success(
	UNICODESTRING FunctionName,
	UINT32 NodeType,
	INT32 Hresult
	);

ActivityError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

SetAcctStringActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

GetManagementServiceAddressActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

ScheduleUnenrollmentActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UNICODESTRING EnrollmentID,
	UINT32 EnrollmentType,
	UNICODESTRING EnrollmentExe,
	UNICODESTRING Arguments
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

ScheduleUnenrollmentActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	UNICODESTRING EnrollmentID,
	UINT32 EnrollmentType,
	UNICODESTRING EnrollmentExe,
	UNICODESTRING Arguments
	);

GetManagementServiceAddressActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ScheduleUnenrollmentActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetManagementServiceAddressActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

ScheduleUnenrollmentActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

ScheduleUnenrollmentActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING EnrollmentID
	);

ActivityStoppedAutomatically(
	VOID
	);

SetAcctStringActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityStoppedAutomatically(
	VOID
	);

SetAcctStringActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

ActivityIntermediateStop(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

BlockInStatusPage(
	UINT32 BlockingValue
	);

ActivityFailure(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

GetNodeActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

GetNodeActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

ConfigManagerNotificationActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

GetNodeActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	BOOLEAN NodeFound
	);

SessionVariableSet(
	UNICODESTRING SessionVariableName,
	UNICODESTRING SessionVariableValue
	);

ConfigManagerNotificationActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetNodeActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

ActivityFailure(
	UINT64 PartA_PrivTags,
	HEX wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

ConfigManagerNotificationActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

GetNodeActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function,
	BOOLEAN NodeFound
	);

GetChildNodeNamesActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

AddActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

AddActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

GetChildNodeNamesActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

SetValueActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

SetValueActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

SetValueActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

GetChildNodeNamesActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

AddActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

BuildChangeSetXmlActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

ParallelHealthActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

ParallelHealthActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ParallelHealthActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

BuildChangeSetXmlActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

BuildChangeSetXmlActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

EnumerateCacheEntriesActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

EnumerateCacheEntriesActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

BuildChangeSetActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

BuildChangeSetActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ParallelvsSequential(
	BOOLEAN HadMismatch,
	DOUBLE PerformanceIncrease,
	UINT32 NodeCount
	);

BuildChangeSetActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

NodeProcessingEvent(
	UNICODESTRING NodeUri,
	UNICODESTRING NodeID
	);

EnumerateCacheEntriesActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING extensionPointName,
	UINT32 contextWindowId,
	GUID requestedIid
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityStoppedAutomatically(
	VOID
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING extensionPointName
	);

EvaluatingRegistration(
	UNICODESTRING acid,
	BOOLEAN isDefault
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UNICODESTRING implementationAcid
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	UNICODESTRING implementationAcid
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	BOOLEAN wasImplementationReturned,
	BOOLEAN wasRedirectorUsed,
	UNICODESTRING registeredAcid
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	BOOLEAN wasImplementationReturned,
	BOOLEAN wasRedirectorUsed,
	UNICODESTRING registeredAcid
	);

Error:LoadStringW(
	UINT32 resultCode
	);

Error:Lock(
	INT32 resultCode
	);

Error:ExecuteNotAllowed(
	INT32 resultCode
	);

Error:LoadLibraryEx(
	UINT32 resultCode
	);

Error:NodeNotFound(
	INT32 resultCode
	);

Error:GetChildNodeNamesNodeNotFound(
	INT32 resultCode
	);

Error:AllocateBStrArray(
	INT32 resultCode
	);

Error:GetValueNodeNotFound(
	INT32 resultCode
	);

Error:GetValueInvalidArg(
	INT32 resultCode
	);

Error:AllocateNodeFailed(
	INT32 resultCode
	);

Error:CRemoteLockNodeCreateInstance(
	INT32 resultCode
	);

Error:GetChildNodeNamesInvalidArg(
	INT32 resultCode
	);

Error:InitializeNodeFailed(
	INT32 resultCode
	);

Error:CreateNotAllowed(
	INT32 resultCode
	);

Error:CreateNodeInstanceInvalidArg(
	INT32 resultCode
	);

PFXCertificateCspNodeImpl(
	UINT32 PfxCertificate already exists. Return CMN_E_ALREADY_EXISTS
	);

PFXCertificateCspNodeImpl(
	UINT32 Csp receieved command SetValue for NodeId
	);

PFXCertificateCspNodeImpl(
	UINT32 PfxCertificate not processed before. Return CFGMGR_E_NODENOTFOUND
	);

PFXCertificateCspNodeImpl(
	ANSISTRING "Csp receieved command to delete"
	);

CspExecuteFailedToWriteErrorCodeAndStatus(
	INT32 HRESULT
	);

CspExecuteAcceptedForProcessing(
	VOID
	);

CspExecuteGetThumbprint(
	INT32 HRESULT
	);

CspExecuteFailedToAddTimeTriggers(
	VOID
	);

CspExecuteFailedToRegisterTask(
	VOID
	);

CspExecuteFailedToAddNgcTriggers(
	VOID
	);

CspExecuteFailedBuildExeArguments(
	VOID
	);

CspExecuteFailedToGetDmCurrentUserSid(
	VOID
	);

CspExecuteFailedToBuildTaskParameters(
	VOID
	);

CspExecuteFailedToWriteCorrelationGuid(
	INT32 HRESULT
	);

CspExecuteFailedWithAadKeyMismatch(
	INT32 HRESULT
	);

KeyIdentifierOnDevice(
	UNICODESTRING AADKeyOnDevice
	);

CspExecuteSystemCertificateDisallowedForNGC(
	INT32 HRESULT
	);

NgcManagedByGp(
	VOID
	);

CspExecuteFailedToAadKeyIdentifier(
	INT32 HRESULT
	);

KeyIdentifierFromServer(
	UNICODESTRING AADKeyFromServer
	);

SCEPCspNodeExecuteTryFetchingNGCDataFailed(
	INT32 HRESULT
	);

NgcQueryEnabledFailed(
	INT32 HRESULT
	);

CspExecuteOnlyAllowedOnEnrollNode(
	INT32 HRESULT
	);

CspExecuteFailedToGetSCEPFullRegistryPath(
	INT32 HRESULT
	);

CspExecuteFailedToGetSCEPRegistryPath(
	INT32 HRESULT
	);

SCEPTryFetchNGCDataSetAadKeyIdentifierList(
	UNICODESTRING AADKeyIdentifierList
	);

SCEPTryFetchNGCDataFoundKeyProtection(
	UINT32 KeyProtection
	);

SCEPTryFetchNGCDataSetEKUS(
	UNICODESTRING EKUS
	);

SCEPTryFetchNGCDataFoundContainerName(
	UNICODESTRING ContainerName
	);

UtilsIsRemoteDesktopSession(
	INT32 HRESULT,
	BOOLEAN isRdpSession
	);

SCEPCspGetValueChallenge(
	VOID
	);

CspCreateInstanceGetCorrelationGuidFailed(
	INT32 HRESULT
	);

UtilsIsCertChainValid(
	UINT32 HRESULT
	);

UtilsIsCertChainValid(
	UINT32 ErrorStatus
	);

UtilsDeleteCertPrivateKey(
	INT32 HRESULT
	);

SCEPUtilsReadChallengeSuccessful(
	VOID
	);

SCEPUtilsWriteChallengeSuccessful(
	VOID
	);

SCEPUtilsGetUlongVariantValue(
	UINT16 VariantValue,
	INT32 ErrorCode
	);

SCEPWriteErrorCodeAndStatus(
	ANSISTRING "Cert Installed Successfully"
	);

SCEPWriteErrorCodeAndStatus(
	ANSISTRING "Cert Install Pending"
	);

SCEPWriteErrorCodeAndStatus(
	UNICODESTRING RegistryPath,
	UINT32 InstallStatus,
	INT32 ErrorCode
	);

SCEPOpenRegistryKey(
	UNICODESTRING KeyPath,
	UINT32 SamDesired
	);

ProviderGetValue(
	UNICODESTRING sessionProviderId,
	UNICODESTRING targetedProviderId,
	ANSISTRING __TlgCV__
	);

ProviderSetValue(
	UNICODESTRING providerId,
	UINT32 configStringSize,
	ANSISTRING __TlgCV__
	);

CloseChannelActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

UnregisterPFNActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UNICODESTRING EnrollmentID,
	UNICODESTRING PushStatus,
	INT32 TestHookSet,
	UINT32 RetryCount,
	INT32 IsDeviceChannel,
	UINT64 ExpiryTime
	);

UnregisterPFNActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

UnregisterPFNActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	UNICODESTRING EnrollmentID,
	UNICODESTRING PushStatus,
	INT32 TestHookSet,
	UINT32 RetryCount,
	INT32 IsDeviceChannel,
	UINT64 ExpiryTime
	);

RegisterPFNActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

InitializeActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

RegisterPFNActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	UNICODESTRING EnrollmentID,
	UNICODESTRING PushStatus,
	INT32 TestHookSet,
	UINT32 RetryCount,
	INT32 IsDeviceChannel,
	UINT64 ExpiryTime
	);

CreatePushLaunchScheduleActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

InternalRenewActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UNICODESTRING EnrollmentID,
	UNICODESTRING PushStatus,
	INT32 TestHookSet,
	UINT32 RetryCount,
	INT32 IsDeviceChannel,
	UINT64 ExpiryTime
	);

DeleteScheduleActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

RegisterPFNActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetChannelObjectHelperActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

InternalRenewActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	UNICODESTRING EnrollmentID,
	UNICODESTRING PushStatus,
	INT32 TestHookSet,
	UINT32 RetryCount,
	INT32 IsDeviceChannel,
	UINT64 ExpiryTime
	);

UnregisterPFNActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING EnrollmentID,
	UNICODESTRING PushStatus,
	INT32 TestHookSet,
	UINT32 RetryCount,
	INT32 IsDeviceChannel,
	UINT64 ExpiryTime
	);

InternalRenewActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

CloseChannelActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	UNICODESTRING EnrollmentID,
	UNICODESTRING PushStatus,
	INT32 TestHookSet,
	UINT32 RetryCount,
	INT32 IsDeviceChannel,
	UINT64 ExpiryTime
	);

CloseChannelActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING EnrollmentID,
	UNICODESTRING PushStatus,
	INT32 TestHookSet,
	UINT32 RetryCount,
	INT32 IsDeviceChannel,
	UINT64 ExpiryTime
	);

GetChannelObjectActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetChannelObjectHelperActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

InitializeActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

InitializeActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

InternalRenewActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING EnrollmentID,
	UNICODESTRING PushStatus,
	INT32 TestHookSet,
	UINT32 RetryCount,
	INT32 IsDeviceChannel,
	UINT64 ExpiryTime
	);

InternalRenewActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

CreatePushRenewalScheduleActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

RegisterPFNActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UNICODESTRING EnrollmentID,
	UNICODESTRING PushStatus,
	INT32 TestHookSet,
	UINT32 RetryCount,
	INT32 IsDeviceChannel,
	UINT64 ExpiryTime
	);

DeleteScheduleActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

CreatePushRenewalScheduleActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

DeleteScheduleActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

GetChannelObjectActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

RegisterPFNActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING EnrollmentID,
	UNICODESTRING PushStatus,
	INT32 TestHookSet,
	UINT32 RetryCount,
	INT32 IsDeviceChannel,
	UINT64 ExpiryTime
	);

GetChannelObjectActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

CreatePushLaunchScheduleActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

CloseChannelActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UNICODESTRING EnrollmentID,
	UNICODESTRING PushStatus,
	INT32 TestHookSet,
	UINT32 RetryCount,
	INT32 IsDeviceChannel,
	UINT64 ExpiryTime
	);

CreatePushLaunchScheduleActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetChannelObjectHelperActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

CloseChannelActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

CreatePushRenewalScheduleActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

UnregisterPFNActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

PfxCertificate(
	UNICODESTRING FriendlyName,
	BOOLEAN AlreadyInstalledOnDevice,
	BOOLEAN AlreadyProcessedOnDevice,
	ANSISTRING __TlgCV__
	);

InstallSystemCertificate(
	UNICODESTRING SystemUserStoreThumbprint,
	ANSISTRING __TlgCV__
	);

DeletePfxCertificate(
	BOOLEAN Status,
	SYSTEMTIME StartTime,
	SYSTEMTIME EndTime,
	ANSISTRING __TlgCV__
	);

DeleteCertificate(
	UNICODESTRING DeletedMyUserCertificateThumbprintFromSystem,
	ANSISTRING __TlgCV__
	);

TryDeleteUserCertificate(
	UNICODESTRING DeletedMyUserCertificateThumbprintFromSystem,
	INT32 Result,
	ANSISTRING __TlgCV__
	);

InstallPfxCertificate(
	UNICODESTRING KeyLocation,
	ANSISTRING __TlgCV__
	);

DeleteCertificate(
	BOOLEAN Status,
	SYSTEMTIME StartTime,
	SYSTEMTIME EndTime,
	UNICODESTRING Thumbprint,
	ANSISTRING __TlgCV__
	);

InstallUserCertificate(
	UNICODESTRING EnrolledUserStoreThumbprint,
	ANSISTRING __TlgCV__
	);

InstallPfxCertificate(
	BOOLEAN Status,
	SYSTEMTIME StartTime,
	SYSTEMTIME EndTime,
	ANSISTRING __TlgCV__
	);

OpenCertificateStore(
	UNICODESTRING StoreName,
	UINT32 StoreLocation,
	ANSISTRING __TlgCV__
	);

InstallCertificate(
	BOOLEAN Status,
	SYSTEMTIME StartTime,
	SYSTEMTIME EndTime,
	UNICODESTRING Thumbprint,
	ANSISTRING __TlgCV__
	);

InstallCertificate(
	UNICODESTRING EnrollmentId,
	UNICODESTRING CertificateHash,
	ANSISTRING __TlgCV__
	);

TryInstallUserCertificate(
	UNICODESTRING EnrolledUserStoreThumbprint,
	INT32 Result,
	ANSISTRING __TlgCV__
	);

InstallPfxCertificate(
	INT32 HRESULT,
	UNICODESTRING FriendlyName,
	UNICODESTRING Thumbprint,
	ANSISTRING __TlgCV__
	);

EntDMID(
	UNICODESTRING EntDMID,
	ANSISTRING __TlgCV__
	);

DMPollAuxiliaryScheduleSetupFail(
	UINT32 Result,
	ANSISTRING __TlgCV__
	);

EnrollDMPollTaskSchedulerFail(
	UINT32 Result,
	ANSISTRING Function,
	ANSISTRING __TlgCV__
	);

DMPollScheduleSetupFail(
	UINT32 Result,
	ANSISTRING __TlgCV__
	);

NetRequestOfflineDomainJoin(
	INT32 Result,
	UINT64 PartA_PrivTags,
	ANSISTRING __TlgCV__
	);

GenerateExchangeID(
	INT32 immutible,
	ANSISTRING __TlgCV__
	);

DMPollSecondAuxiliaryScheduleSetupFail(
	UINT32 Result,
	ANSISTRING __TlgCV__
	);

CspAddNode(
	INT32 HRESULT,
	UNICODESTRING Node,
	UNICODESTRING CorrelationGuid,
	ANSISTRING __TlgCV__
	);

CspSetValue(
	INT32 HRESULT,
	UNICODESTRING Node,
	UNICODESTRING CorrelationGuid,
	ANSISTRING __TlgCV__
	);

SetRegistryValue(
	UNICODESTRING ScepPropertyName,
	UNICODESTRING ScepPropertyValue,
	UNICODESTRING CorrelationGuid,
	ANSISTRING __TlgCV__
	);

CspDeleteChild(
	INT32 HRESULT,
	UNICODESTRING Node,
	UNICODESTRING CorrelationGuid,
	ANSISTRING __TlgCV__
	);

CspGetValue(
	INT32 HRESULT,
	UNICODESTRING Node,
	UNICODESTRING CorrelationGuid,
	ANSISTRING __TlgCV__
	);

CspExecute(
	UNICODESTRING InstallUserSid,
	UNICODESTRING UniqueId,
	UINT32 KeyProtection,
	INT32 HRESULT,
	UNICODESTRING NodePath,
	UNICODESTRING InstallLocation,
	UNICODESTRING EnrollmentID,
	BOOLEAN IsRenew,
	UNICODESTRING CorrelationGuid,
	ANSISTRING __TlgCV__
	);

SetRegistryValue(
	UNICODESTRING ScepPropertyName,
	INT32 ScepPropertyValue,
	UNICODESTRING CorrelationGuid,
	ANSISTRING __TlgCV__
	);

CspCreateInstance(
	INT32 HRESULT,
	UNICODESTRING Node,
	UNICODESTRING CorrelationGuid,
	ANSISTRING __TlgCV__
	);

OpenRegistryKey(
	INT32 ErrorCode,
	ANSISTRING __TlgCV__
	);

WriteErrorCodeAndStatus(
	ANSISTRING Message,
	INT32 ErrorCode,
	UNICODESTRING CorrelationGuid,
	ANSISTRING __TlgCV__
	);

DeleteCertWriteErrorCodeAndStatus(
	ANSISTRING Message,
	INT32 Status,
	UNICODESTRING Thumbprint,
	ANSISTRING __TlgCV__
	);

GetStatusActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

TriggeredEvaluationActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

SetServerAlertStatus(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

TriggeredEvaluationActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

ActivityIntermediateStop(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

CreateContextActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

SetAltitudeActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

SetSignalDefinitionActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

GetSignalDefinitionActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

SetAltitudeActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

SetUserNotificationStatus(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

DeleteContextActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetSettingsPackActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

GetUserNotificationStatus(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

SetSignalDefinitionActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

SetSettingsPackActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetAltitudeActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

CreateContextActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

SetServerAlertStatus(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetSignalDefinitionActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

CreateStoreActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

GetStatusActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

DeleteContextActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

SetSettingsPackActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

TriggeredEvaluationActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetUserNotificationStatus(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

GetSettingsPackResponseActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

SetSignalDefinitionActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

CreateStoreActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

GetAllActiveContexts(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

SetAltitudeActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetServerAlertStatus(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

DeleteStoreActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetStatusActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

SetSettingsPackActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

GetSettingsPackResponseActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

GetAltitudeActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

DeleteStoreActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

CreateStoreActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetSettingsPackResponseActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetAllActiveContexts(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

GetSettingsPackActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetServerAlertStatus(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

SetUserNotificationStatus(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

DeleteStoreActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

GetAltitudeActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

CreateContextActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

SetServerAlertStatus(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

GetServerAlertStatus(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

SetUserNotificationStatus(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetAllActiveContexts(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

SignalSetEvent(
	UNICODESTRING SignalType
	);

GetSettingsPackActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

DeleteContextActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	ANSISTRING __TlgCV__
	);

GetUserNotificationStatus(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

GetSignalDefinitionActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

ApplyContextActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

DisableContextActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

DisableContextActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

DisableContextActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING contextId
	);

ApplyContextActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING contextId
	);

ApplyContextActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

VeirfySettingsPackActivity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

VeirfySettingsPackActivity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

VeirfySettingsPackActivity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

Assert(
	UINT32 assertVersion,
	UINT32 rva,
	UINT32 timestamp,
	UINT32 imageSize,
	ANSISTRING imageName,
	UINT32 count,
	UINT32 totalHits,
	UINT32 ModuleCollection,
	UINT32 GlobalCollection
	);

AdmxIngestion(
	UNICODESTRING AdmxIngestionStartUpdateEnrollmentId,
	UNICODESTRING AdmxIngestionStartUpdateAppName,
	UNICODESTRING AdmxIngestionStartUpdateSettingType,
	UNICODESTRING AdmxIngestionStartUpdateUID,
	BOOLEAN AdmxIngestionStartUpdateUpdateWithPolicyValuesSet,
	ANSISTRING __TlgCV__,
	UINT64 PartA_PrivTags
	);

AdmxIngestion(
	UNICODESTRING AdmxIngestionVerificationWhetherAdmxPoliciesAreSetFailedEnrollmentId,
	UNICODESTRING AdmxIngestionVerificationWhetherAdmxPoliciesAreSetFailedAppName,
	UNICODESTRING AdmxIngestionVerificationWhetherAdmxPoliciesAreSetFailedSettingType,
	UNICODESTRING AdmxIngestionVerificationWhetherAdmxPoliciesAreSetFailedUID,
	HRESULT AdmxIngestionVerificationWhetherAdmxPoliciesAreSetFailedHRESULT,
	ANSISTRING __TlgCV__,
	UINT64 PartA_PrivTags
	);

AdmxIngestion(
	UNICODESTRING AdmxIngestionOfAdmxTextFailedEnrollmentId,
	UNICODESTRING AdmxIngestionOfAdmxTextFailedAppName,
	UNICODESTRING AdmxIngestionOfAdmxTextFailedSettingType,
	UNICODESTRING AdmxIngestionOfAdmxTextFailedUID,
	HRESULT AdmxIngestionOfAdmxTextFailedHRESULT,
	ANSISTRING __TlgCV__,
	UINT64 PartA_PrivTags
	);

AdmxIngestion(
	UNICODESTRING AdmxIngestionOfAdmxTextSucceededEnrollmentId,
	UNICODESTRING AdmxIngestionOfAdmxTextSucceededAppName,
	UNICODESTRING AdmxIngestionOfAdmxTextSucceededSettingType,
	UNICODESTRING AdmxIngestionOfAdmxTextSucceededUID,
	UNICODESTRING AdmxIngestionOfAdmxTextSucceededArea,
	ANSISTRING __TlgCV__,
	UINT64 PartA_PrivTags
	);

AdmxIngestion(
	UNICODESTRING AdmxIngestionStartNewEnrollmentId,
	UNICODESTRING AdmxIngestionStartNewAppName,
	UNICODESTRING AdmxIngestionStartNewSettingType,
	UNICODESTRING AdmxIngestionStartNewUID,
	ANSISTRING __TlgCV__,
	UINT64 PartA_PrivTags
	);

DeclaredConfigurationEndDCParsingFromCSP(
	UINT64 PartA_PrivTags,
	UNICODESTRING DocId,
	UNICODESTRING OSDefinedScenario,
	UNICODESTRING DocVersion,
	UNICODESTRING EnrollmentId,
	INT32 EnrollmentType,
	UNICODESTRING UserSid,
	UNICODESTRING DocSchemaVersion,
	UNICODESTRING DocCDNDownloadURL,
	INT32 CSPNameSpace,
	INT32 DCTotalPayloadSizeInWideChar,
	INT32 DCNumCSPPayloads,
	INT32 DCNumURIs,
	UNICODESTRING CSPURICollection,
	HRESULT HRESULT,
	ANSISTRING __TlgCV__
	);

DeclaredConfigurationDeleteDoc(
	UINT64 PartA_PrivTags,
	UNICODESTRING DocId,
	UNICODESTRING DocVersion,
	UNICODESTRING EnrollmentId,
	INT32 EnrollmentType,
	UNICODESTRING UserSid,
	UNICODESTRING DocSchemaVersion,
	INT32 CSPNameSpace,
	HRESULT HRESULT,
	ANSISTRING __TlgCV__
	);

DeclaredConfigurationEndDCParsingFromFile(
	UINT64 PartA_PrivTags,
	UNICODESTRING ExpectedDocId,
	UNICODESTRING FileDocId,
	UNICODESTRING OSDefinedScenario,
	UNICODESTRING DocVersion,
	UNICODESTRING EnrollmentId,
	INT32 EnrollmentType,
	UNICODESTRING UserSid,
	UNICODESTRING DocSchemaVersion,
	INT32 CSPNameSpace,
	INT32 DCTotalPayloadSizeInWideChar,
	INT32 DCNumCSPPayloads,
	INT32 DCNumURIs,
	UNICODESTRING CSPURICollection,
	HRESULT HRESULT,
	ANSISTRING __TlgCV__
	);

DeclaredConfigurationBeginDCParsingFromCSP(
	UINT64 PartA_PrivTags,
	UNICODESTRING DocId,
	UNICODESTRING EnrollmentId,
	INT32 EnrollmentType,
	UNICODESTRING UserSid,
	INT32 CSPNameSpace,
	ANSISTRING __TlgCV__
	);

DeclaredConfigurationBeginDCParsingFromFile(
	UINT64 PartA_PrivTags,
	UNICODESTRING DocId,
	UNICODESTRING EnrollmentId,
	INT32 EnrollmentType,
	UNICODESTRING UserSid,
	INT32 CSPNameSpace,
	ANSISTRING __TlgCV__
	);

FirstSyncStatusEnd(
	UNICODESTRING enrollId,
	INT32 StatusCode,
	BOOLEAN FromServer,
	BOOLEAN TimedOut,
	FILETIME StartedTime,
	ANSISTRING __TlgCV__
	);

HandleWatchDog_Activity(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

HandleWatchDog_Activity(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

HandleWatchDog_Activity(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

Error(
	UNICODESTRING Message,
	UINT64 PartA_PrivTags
	);

Info(
	UNICODESTRING Message,
	UINT64 PartA_PrivTags
	);

PfxPersistStatusCode(
	INT32 Status
	);

PfxInstallAsync(
	ANSISTRING "Failed to pass pfx data to the process"
	);

PfxInstallAsync(
	ANSISTRING "Passing Pfx data to the process."
	);

PfxGetStatusCode(
	ANSISTRING "Getting status code from registry"
	);

PfxPersistStatusCode(
	ANSISTRING "Persisting status code to registry"
	);

DeletePfxCertificate(
	ANSISTRING "Deleted PfxCertificate from Certificate Store"
	);

DeletePfxCertificate(
	ANSISTRING "Deleted PfxCertificate from Registry"
	);

PfxInstallAsync(
	ANSISTRING "Launching dmcertinst.exe Failed",
	UINT32 ErrorCode
	);

PfxInstallAsync(
	ANSISTRING "Launching dmcertinst.exe process as user"
	);

PfxEnumerateInstalledCertificates(
	ANSISTRING "No certificates found"
	);

PfxEnumerateInstalledCertificates(
	ANSISTRING "Enumerating Installed Certificates"
	);

