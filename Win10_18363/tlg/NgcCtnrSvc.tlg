ProviderNames:
	Microsoft.Windows.PlatformExtensions
	Microsoft.Windows.Security.NGC.NgcCtnrSvc
	Microsoft.Windows.Security.NGC.NgcCtnrSvc



**** Events *****
ValidPinRecoverySecretVerifyPinRecoverySecret(
	INT32 retVal
	);

ValidPinRecoverySecretValidatePinRecoveryBlobString(
	INT32 retVal
	);

ValidPinRecoverySecretGetProtectedRecoveryBlob(
	INT32 retVal
	);

CreateAndProtectRecoveryKeyWorkerProtectedRecoveryBlobExists(
	VOID
	);

CreateAndProtectRecoveryKeyWorkerRecoveryProtectorExists(
	VOID
	);

ContainerManagerGetAllContainers(
	INT32 retVal
	);

ContainerManagerFindContainerWithId(
	INT32 retVal
	);

ContainerManagerRemoveContainer(
	INT32 retVal
	);

ContainerManagerAddContainer(
	INT32 retVal
	);

ContainerManagerProvisionHandler(
	INT32 retVal
	);

ContainerManagerGetRootPath(
	INT32 retVal
	);

_wcreate_locale(
	INT32 retVal
	);

ValidateStringProperty(
	INT32 retVal,
	GUID containerId,
	UINT32 propertyId
	);

ContainerGetContainerProperty(
	INT32 retVal,
	GUID containerId,
	UINT32 propertyId
	);

HandlerManagerProcessBeforeContainerUnload(
	INT32 retVal
	);

HandlerManagerProcessBeforeContainerDeletion(
	INT32 retVal
	);

ContainerGetId(
	INT32 retVal
	);

CreateRootDirectoryAccessDenied(
	INT32 retVal
	);

GetLocalAppDataPath(
	INT32 retVal
	);

ConvertStringSecurityDescriptorToSecurityDescriptorW(
	UINT32 retVal
	);

ContainerVectorAppend(
	INT32 retVal,
	GUID containerId
	);

GetContainerId(
	INT32 retVal
	);

CreateContainerVectorInstance(
	INT32 retVal
	);

CompareContainerPropertySid(
	INT32 retVal,
	GUID containerId
	);

ContainerCreateKeyScope(
	INT32 retVal,
	GUID keyScope
	);

ContainerUnload(
	INT32 retVal
	);

NotifyAndRemoveContainer(
	INT32 retVal
	);

EnumerateNextDirectory(
	INT32 retVal
	);

UpdatePolicy(
	INT32 retVal
	);

InvalidContainerState(
	INT32 retVal,
	GUID containerId,
	UINT32 containerStatus
	);

ContainerGetState(
	INT32 retVal,
	GUID containerId
	);

ContainerLoad(
	INT32 retVal,
	GUID containerId
	);

CreateContainerInstance(
	INT32 retVal
	);

EnumerateDirectory(
	INT32 retVal
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING extensionPointName,
	UINT32 contextWindowId,
	GUID requestedIid
	);

ActivityError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityStoppedAutomatically(
	VOID
	);

ActivityError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

ActivityError(
	UINT64 PartA_PrivTags,
	SIGNED wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityStoppedAutomatically(
	VOID
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId,
	UNICODESTRING extensionPointName
	);

EvaluatingRegistration(
	UNICODESTRING acid,
	BOOLEAN isDefault
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UNICODESTRING implementationAcid
	);

TryLookupExtensionPointImplementationAcid(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	UNICODESTRING implementationAcid
	);

FallbackError(
	UINT64 PartA_PrivTags,
	NTSTATUS wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

FallbackError(
	UINT64 PartA_PrivTags,
	SIGNED wilResult,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	UINT32 failureId,
	UINT32 failureCount,
	ANSISTRING function
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage,
	BOOLEAN wasImplementationReturned,
	BOOLEAN wasRedirectorUsed,
	UNICODESTRING registeredAcid
	);

TryActivateContractExtension(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId,
	BOOLEAN wasImplementationReturned,
	BOOLEAN wasRedirectorUsed,
	UNICODESTRING registeredAcid
	);

RemoveBioProtectorFailed(
	INT32 retVal
	);

IsProtectorSupportedFailed(
	INT32 retVal
	);

RegSetValueExWFailed(
	INT32 retVal
	);

RegCreateKeyExWFailed(
	INT32 retVal
	);

InitializeOldPolicy(
	INT32 retVal
	);

GetContainerPolicyFailed(
	INT32 retVal
	);

GetContainerFailed(
	INT32 retVal
	);

ContainerCountNotEqualToOne(
	INT32 retVal
	);

ContainerCountExeecedOne(
	INT32 retVal
	);

ContainerGetState(
	INT32 retVal
	);

GetContainerFailed(
	INT32 retVal
	);

DsrGetJoinInfoFailed(
	INT32 retVal
	);

GetContainerCountFailed(
	INT32 retVal
	);

CtnrSvcGetAllContainersFailed(
	INT32 retVal
	);

DeviceLockPolicyNotApplicable(
	INT32 retVal
	);

IsDeviceLockPolicyAvailableFailed(
	INT32 retVal
	);

FinishLockPolicyEnforcementConditionsForExistingContainer(
	BOOLEAN containerHasLogonKey,
	BOOLEAN newPolicyIsStricterThanOldPolicy
	);

InitializeNewPolicy(
	INT32 retVal
	);

GetKeyPropertyBadMetadata(
	INT32 retVal
	);

RemoveBioProtectorIfDisallowedFailed(
	INT32 retVal
	);

SetPolicyFailed(
	INT32 retVal
	);

SerializePolicyFailed(
	INT32 retVal
	);

GetManagedPolicyFailed(
	INT32 retVal
	);

ValidateSidFailed(
	INT32 retVal
	);

GetContainerDomainFailed(
	INT32 retVal
	);

FinishLockPolicyEnforcement(
	INT32 retVal
	);

BeginLockPolicyEnforcementFailed(
	INT32 retVal
	);

UpdateProPolicyChangeStamp(
	INT32 retVal
	);

DeviceLockFinishLockPolicyEnforcement(
	INT32 retVal
	);

DeviceLockBeginLockPolicyEnforcementFailed(
	INT32 retVal
	);

UpdateDeviceLockPolicyChangeStamp(
	INT32 retVal
	);

CallbackProcessAfterCertificateEnrollment(
	INT32 retVal
	);

CallbackProcessBeforeContainerDeletion(
	INT32 retVal
	);

CallbackProcessAfterContainerCreation(
	INT32 retVal
	);

CallbackProcessBeforeContainerUnload(
	INT32 retVal
	);

CallbackProcessAfterContainerLoad(
	INT32 retVal
	);

AllocateRpcInterfaceTemplatesCallback(
	INT32 retVal
	);

InitializeCallback(
	INT32 retVal
	);

InitializeHandler(
	INT32 retVal
	);

CtnrSvcNotifyCertificateEnrolled(
	INT32 retVal
	);

InitializeGidsHandler(
	INT32 retVal
	);

GetGidsHandlerExport(
	UINT32 retVal
	);

LoadGidsHandler(
	UINT32 retVal
	);

InvalidGidsHandlerPathValue(
	INT32 retVal
	);

InvalidGidsHandlerPathValueType(
	INT32 retVal
	);

GetGidsHandlerPathValue(
	UINT32 retVal
	);

GetGidsHandlerPathValueSize(
	UINT32 retVal
	);

OpenServiceParameterKey(
	UINT32 retVal
	);

HandlerProcessAfterCertificateEnrollment(
	INT32 retVal,
	GUID handlerId
	);

ContainerIsKeyScopeSupported(
	INT32 retVal,
	GUID handlerId
	);

HandlerProcessBeforeContainerDeletion(
	INT32 retVal,
	GUID handlerId
	);

HandlerProcessAfterContainerCreation(
	INT32 retVal,
	GUID handlerId
	);

HandlerProcessBeforeContainerUnload(
	INT32 retVal,
	GUID handlerId
	);

HandlerProcessAfterContainerLoad(
	INT32 retVal,
	GUID handlerId
	);

HandlerTypeNotSupported(
	INT32 retVal,
	UINT32 handlerType
	);

StopRpcServer(
	INT32 retVal
	);

StartRpcServer(
	INT32 retVal
	);

CreateRpcServer(
	INT32 retVal
	);

CreateEndpointSecurityDescriptorFailure(
	UINT32 retVal
	);

NoRpcInterfaceProvided(
	INT32 retVal
	);

MakeAndInitializeGidsHandler(
	INT32 retVal
	);

MakeAndInitializeNgcHandler(
	INT32 retVal
	);

MakeAndInitializeProvisioningHandler(
	INT32 retVal
	);

StartTrustlet(
	UINT64 PartA_PrivTags,
	NOPRINT wilActivity,
	UINT32 threadId
	);

DecreaseMtaUsage(
	INT32 retVal
	);

ActivityIntermediateStop(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

StartTrustlet(
	UINT64 PartA_PrivTags,
	UINT64 PartA_PrivTags,
	NTSTATUS wilActivity,
	UINT32 hresult,
	ANSISTRING fileName,
	UINT32 lineNumber,
	ANSISTRING module,
	UINT32 failureType,
	UNICODESTRING message,
	UINT32 threadId,
	ANSISTRING callContext,
	UINT32 originatingContextId,
	ANSISTRING originatingContextName,
	UNICODESTRING originatingContextMessage,
	UINT32 currentContextId,
	ANSISTRING currentContextName,
	UNICODESTRING currentContextMessage
	);

StartTrustlet(
	UINT64 PartA_PrivTags,
	STRING wilActivity,
	UINT32 hresult,
	UINT32 threadId
	);

ActivityStoppedAutomatically(
	VOID
	);

SetProtectorAttemptCount(
	INT32 retVal
	);

GetProtectorRemainingRetryCount(
	INT32 retVal
	);

GetContainer(
	INT32 retVal
	);

CtnrSvcGetAllContainers(
	INT32 retVal
	);

ResetContainerLockout(
	INT32 retVal
	);

ResetContainerLockout(
	INT32 retVal
	);

RegCreateKeyExWSoftLockoutKey(
	INT32 retVal
	);

ResetContainerLockoutFailed(
	INT32 retVal
	);

OpenSoftLockoutKeyFailed(
	INT32 retVal
	);

InternalUninitializeService(
	UINT32 retVal
	);

UnregisterWait(
	UINT32 retVal
	);

InitializeMta(
	INT32 retVal
	);

RegisterStopCallback(
	UINT32 retVal
	);

CreateServiceStopEvent(
	UINT32 retVal
	);

IncreaseMtaUsage(
	INT32 retVal
	);

InitializeMta(
	INT32 retVal
	);

ReportServiceStopPending(
	UINT32 retVal
	);

SetServiceStopEvent(
	UINT32 retVal
	);

SetServiceStatus(
	UINT32 retVal
	);

ReportServiceStopped(
	UINT32 retVal
	);

TriggerStopServiceOnIdle(
	UINT32 retVal
	);

HandlerManagerDeactivateHandlers(
	INT32 retVal
	);

CannotIdleStopDuringOobe(
	VOID
	);

OobeCompleteFailed(
	UINT32 retVal
	);

CannotIdleStopDueToActiveProgressiveLockout(
	VOID
	);

CannotIdleStopDueToActiveTickets(
	VOID
	);

TriggerStopServiceOnControl(
	UINT32 retVal
	);

EnterServiceControlHandlerWhenShuttingDown(
	UINT32 retVal
	);

FinishServiceInitialization(
	UINT32 retVal
	);

ReportServiceRunning(
	UINT32 retVal
	);

BeginServiceInitialization(
	UINT32 retVal
	);

ReportServiceStartPending(
	UINT32 retVal
	);

RegisterServiceControlHandler(
	UINT32 retVal
	);

TriggerStopServiceOnInitializationFailure(
	UINT32 retVal
	);

INgcCtnrContainer::GetKeyProperty(
	INT32 retVal
	);

CacheTypeMetadataUnexpectedSize(
	INT32 retVal
	);

StringCchCopyW(TenantDomain)(
	INT32 retVal
	);

INgcCtnrContainer::GetKeyUsage(
	INT32 retVal
	);

StringCchCopyW(Domain)(
	INT32 retVal
	);

AllocateTenantDomainOutOfMemory(
	INT32 retVal
	);

StringCchCopyW(AccountId)(
	INT32 retVal
	);

AllocateDomainOutOfMemory(
	INT32 retVal
	);

StringCbCopyW(
	INT32 retVal
	);

AllocateAccountIdOutOfMemory(
	INT32 retVal
	);

INgcCtnrContainer::GetContainerProperty(
	INT32 retVal,
	UINT32 propertyId
	);

AllocatePropertyRpcBufferOutOfMemory(
	INT32 retVal
	);

ProvisionSingleSignOnIsAccountEnabled(
	INT32 retVal
	);

ProvisionSingleSignOnSetFlag(
	INT32 retVal
	);

ProvisionRecoveryKey(
	INT32 retVal
	);

ProvisionRecoveryKeyGetContainerSid(
	INT32 retVal
	);

ProvisionRecoveryKeyValidateSid(
	INT32 retVal
	);

ProvisionRecoveryKeyIsFeatureEnabled(
	INT32 retVal
	);

PrebootAuthNotEnabledSkippingProvisioning(
	VOID
	);

NotNgcContainer(
	INT32 retVal
	);

InvalidGestureType(
	INT32 retVal,
	UINT32 gestureType
	);

NgcUtils::CoInitializer::Initialize(
	INT32 retVal
	);

GetContainerMetadataBadMetadataType(
	INT32 retVal
	);

GetContainerMetadataOutOfMemory(
	INT32 retVal
	);

GetProtectorCharacteristicsFailed(
	INT32 retVal
	);

CoMemAllocCopyFailed(
	INT32 retVal
	);

GetKeyMetadataBadMetadataType(
	INT32 retVal
	);

GetKeyMetadataOutOfMemory(
	INT32 retVal
	);

GetKeyMetadataCoMemAllocCopy(
	INT32 retVal
	);

ChannelGetKeyUsage(
	INT32 retVal
	);

SetKeyMetadataBadMetadataType(
	INT32 retVal
	);

NotifyCertificateEnrolled(
	INT32 retVal
	);

AllocateKeyInfoListOutOfMemory(
	INT32 retVal
	);

AllocateKeyInfoBufferOutOfMemory(
	INT32 retVal
	);

INgcCtnrContainer::EnumerateKeys(
	INT32 retVal
	);

NgcUtils::ConvertMultiStringToStringVector(
	INT32 retVal
	);

INgcCtnrContainer::IsKeyScopeSupported(
	INT32 retVal
	);

CtnrHandlerInputs::pfnFindContainerWithId(
	INT32 retVal
	);

AllocateContainerInfoListRpcBufferOutOfMemory(
	INT32 retVal
	);

AllocateContainerInfoRpcBufferOutOfMemory(
	INT32 retVal
	);

FindWorkContainerWithIdFailed(
	INT32 retVal
	);

DeleteWorkContainerFromSwapFailed(
	INT32 retVal
	);

InvalidProtectorSupport(
	INT32 retVal
	);

DeleteWorkContainerFromIterationFailed(
	INT32 retVal
	);

INgcCtnrContainer::IsProtectorSupported(
	INT32 retVal
	);

INgcCtnrContainer::GetContainerType(
	INT32 retVal
	);

EnumContainersConvertStringSidToSidFailed(
	UINT32 retVal
	);

INgcCtnrContainer::GetId(
	INT32 retVal
	);

INgcCtnrContainer::GetStatus(
	INT32 retVal
	);

INgcCtnrContainerVector::GetSize(
	INT32 retVal
	);

INgcCtnrContainerVector::GetAt(
	INT32 retVal
	);

CtnrHandlerInputs::pfnGetAllContainers(
	INT32 retVal
	);

RsaExportPublicKeyOutOfMemory(
	INT32 retVal
	);

CannotOverwrittenProtectedKeys(
	INT32 retVal
	);

RsaSignWithPkcs1OutOfMemory(
	INT32 retVal
	);

RsaDecryptGetContainerType(
	INT32 retVal
	);

RsaDecryptWithPkcs1(
	INT32 retVal,
	GUID containerId,
	BOOL32 isIsoContainer,
	BOOL32 isVsm
	);

RsaDecryptWithPkcs1(
	INT32 retVal,
	GUID containerId,
	BOOL32 isIsoContainer,
	BOOL32 isVsm
	);

RsaSignHashGetContainerType(
	INT32 retVal
	);

RsaSignWithPkcs1(
	INT32 retVal,
	GUID containerId,
	BOOL32 isIsoContainer,
	BOOL32 isVsm
	);

RsaSignWithPkcs1(
	INT32 retVal,
	GUID containerId,
	BOOL32 isIsoContainer,
	BOOL32 isVsm
	);

AddPrebootProtector(
	HRESULT retVal
	);

ClearProtectedRecoveryBlob(
	INT32 retVal
	);

RemoveRecoveryProtector(
	INT32 retVal
	);

ProvisionRecoveryKeyGetContainerSid(
	INT32 retVal
	);

ProvisionRecoveryKeyValidateSid(
	INT32 retVal
	);

ProvisionRecoveryKeyIsFeatureEnabled(
	INT32 retVal
	);

DuplicateTicketIncorrectGesture(
	INT32 retVal
	);

DuplicateTicketInvalidSize(
	INT32 retVal
	);

DuplicateTicketDefaultTicketProvided(
	INT32 retVal
	);

AuthenticateGestureGetContainerType(
	INT32 retVal
	);

AuthenticateGesture(
	GUID containerId,
	UINT32 gestureType,
	HRESULT retVal,
	BOOL32 isIsoContainer,
	BOOL32 isVsm
	);

CreateNgcSecureBioSecurityDescriptorFailure(
	INT32 retVal
	);

AllocateRpcInterfaceTemplates(
	INT32 retVal
	);

CreateNgcSecurityDescriptorFailure(
	INT32 retVal
	);

ActivityStoppedAutomatically(
	VOID
	);

CreateCompanionDeviceProtectorAddProtector(
	INT32 retVal
	);

SetTpmToLegacyDictionaryAttackParameters(
	ANSISTRING caller
	);

CreateBioProtectorAddProtector(
	INT32 retVal
	);

CreateCachedLogOnKeyCreateRsaKey(
	INT32 retVal
	);

CreateDecryptionKeyCreateRsaKey(
	INT32 retVal
	);

ProvisionVscHandler(
	INT32 retVal
	);

ProvisionNgcHandler(
	INT32 retVal
	);

SerializePolicy(
	INT32 retVal
	);

INgcCtnrContainer::Create(
	INT32 retVal
	);

ClearLockoutAuthProtectorTypeValue(
	INT32 retVal
	);

INgcCtnrContainer::Delete(
	INT32 retVal
	);

ClearLockoutAuthValue(
	INT32 retVal
	);

TpmGetRandomAuthValue(
	INT32 retVal
	);

GetAt(
	INT32 retVal
	);

NgcUtilsClearDestructiveResetInProgressStatus(
	INT32 retVal
	);

NgcUtilsSetDestructiveResetInProgressStatus(
	INT32 retVal
	);

FailedToDeleteEnrolledBiometrics(
	UINT64 PartA_PrivTags,
	HRESULT retVal
	);

NgcUtilsDeleteEnrolledBiometrics(
	INT32 retVal
	);

INgcCtnrContainer::Delete(
	INT32 retVal
	);

CtnrHandlerProvisioningInputs::pfnRemoveContainer(
	INT32 retVal
	);

INgcCtnrContainer::IsVsm(
	INT32 retVal
	);

NotifyDplContainerChanges(
	INT32 retVal
	);

FindContainerWithSid(
	INT32 retVal
	);

ConvertStringSidToSidFailed(
	UINT32 retVal
	);

midl_user_allocateAdminKey(
	INT32 retVal
	);

CreateContainerTicketCreateForNewKey(
	INT32 retVal
	);

CtnrHandlerProvisioningInputs::pfnAddContainer(
	INT32 retVal
	);

CreateContainerGetContainerId(
	INT32 retVal
	);

SetContainerPropertySid(
	INT32 retVal
	);

StringCchLengthUserSidFailed(
	INT32 retVal
	);

CreateSoftwareContainerFailed(
	INT32 retVal
	);

CreateContainerFailedSoftwareProhibited(
	INT32 retVal
	);

CreateContainerWithTpmSupportFailed(
	INT32 retVal
	);

CoCreateInstanceNgcCtnrContainerSoftware(
	INT32 retVal,
	GUID uuid
	);

DsrGetJoinInfo(
	INT32 retVal
	);

ProvisioningHandlerInternalCreateContainerAndDecryptionKey(
	INT32 retVal,
	INT32 tpmRetVal,
	UINT16 tpmSupport,
	UINT16 hardwarePolicy,
	BOOLEAN isProCreation,
	BOOL32 isIsoContainer,
	BOOL32 isVsm
	);

CtnrHandlerProvisioningInputs::pfnGetServiceRootPath(
	INT32 retVal
	);

CoCreateInstanceNgcCtnrContainer(
	INT32 retVal,
	GUID uuid
	);

GetManagedPolicy(
	INT32 retVal
	);

ConvertStringSidToSidFailed(
	UINT32 retVal
	);

CtnrHandlerProvisioningInputs::pfnRemoveContainer(
	INT32 retVal
	);

ProvisioningHandlerInternalCreateContainerAndDecryptionKey(
	INT32 retVal,
	INT32 tpmRetVal,
	UINT16 tpmSupport,
	UINT16 hardwarePolicy,
	BOOLEAN isProCreation,
	BOOL32 isIsoContainer,
	BOOL32 isVsm
	);

NotifyDplContainerChanges::UuidToString(
	INT32 retVal
	);

EdpDplUserCredentialsSet(
	INT32 retVal
	);

SkipEdpDplUserCredentialsSet(
	INT32 retVal
	);

NgcUtils::UnpackContainerCreationOutputSerializationBuffer(
	INT32 retVal
	);

NgcUtils::InvokeCredUIBroker(
	INT32 retVal
	);

NgcUtils::PackContainerCreationInputSerializationBuffer(
	INT32 retVal
	);

NgcUtils::CoMemResourceStringAllocCopy(IDS_CONTAINER_CREATION_ALT_CANCEL_BUTTON_TEXT)(
	INT32 retVal
	);

NgcUtils::CoMemResourceStringAllocCopy(IDS_CONTAINER_CREATION_MESSAGE)(
	INT32 retVal
	);

NgcUtils::CoMemResourceStringAllocCopy(IDS_CONTAINER_CREATION_ALT_OK_BUTTON_TEXT)(
	INT32 retVal
	);

NgcUtils::CoMemResourceStringAllocCopy(IDS_CONTAINER_CREATION_CAPTION_CONSUMER)(
	INT32 retVal
	);

CreateVscProvisioningSecurityDescriptorFailure(
	INT32 retVal
	);

NgcUtils::CoMemArrayAlloc<RPC_INTERFACE_TEMPLATEW>(
	INT32 retVal
	);

QueryTransientObjectSecurityDescriptorForProvisioningInterface(
	INT32 retVal
	);

CreateProvisioningSecurityDescriptorFailure(
	INT32 retVal
	);

UnsetLogonCredsAvailabilityAfterContainerDeleted(
	VOID
	);

CheckNgcUserSignonSupportAccessRight(
	INT32 retVal
	);

InitializeDefaultProPolicy(
	INT32 retVal
	);

FailedToReadDevicePasswordEnabledPolicy(
	INT32 retVal
	);

InitializeDefaultConsumerPolicy(
	INT32 retVal
	);

InitializeDefaultProPinPolicy(
	INT32 retVal
	);

NgcPolicyUsingDefaults(
	INT32 retVal
	);

InitializeDefaultPinPolicy(
	INT32 retVal
	);

NgcPolicyUsingMergedPassportCsp(
	INT32 retVal
	);

NgcPolicyUsingDeviceLockPolicy(
	INT32 retVal
	);

NgcPolicyUsingPassportCsp(
	INT32 retVal
	);

PolicyManager.GetManagedPolicy(
	INT32 retVal,
	BOOL32 userSidProvided,
	UNICODESTRING tenantId,
	UINT32 policyType,
	BOOL32 isSupportedDeviceLockPolicy,
	UINT32 biometricsPolicy,
	UINT32 smartCardPolicy,
	UINT32 hardWarePolicy,
	UINT32 pinPolicyMinLength,
	UINT32 pinPolicyMaxLength,
	UINT32 pinPolicyUpperCase,
	UINT32 pinPolicyLowerCase,
	UINT32 pinPolicyDigits,
	UINT32 pinPolicySpecialCharacters,
	UINT32 pinPolicyOtherCharacters,
	BOOL32 allowSequences,
	UINT32 history,
	UINT32 expiration
	);

NgcPolicyUsingGroupPolicy(
	INT32 retVal
	);

PolicyManager.GetManagedPolicy(
	INT32 retVal,
	BOOL32 userSidProvided,
	UNICODESTRING tenantId,
	UINT32 policyType,
	BOOL32 isSupportedDeviceLockPolicy,
	UINT32 biometricsPolicy,
	UINT32 smartCardPolicy,
	UINT32 hardWarePolicy,
	UINT32 pinPolicyMinLength,
	UINT32 pinPolicyMaxLength,
	UINT32 pinPolicyUpperCase,
	UINT32 pinPolicyLowerCase,
	UINT32 pinPolicyDigits,
	UINT32 pinPolicySpecialCharacters,
	UINT32 pinPolicyOtherCharacters,
	BOOL32 allowSequences,
	UINT32 history,
	UINT32 expiration
	);

InitializeHardwarePolicyFromRegistry(
	INT32 retVal
	);

OverrideHardwarePolicyFromRegistry(
	INT32 retVal
	);

MergedPolicies(
	INT32 retVal,
	UINT32 NumberOfPoliciesMerged
	);

GetManagedPolicyInternal(
	INT32 retVal
	);

MergePolicyFailed(
	INT32 retVal
	);

EnumTenantIdKeys(
	INT32 retVal
	);

MergingPolicyFromTenant(
	INT32 retVal,
	UNICODESTRING TenantId
	);

OpenNgcPolicyKey(
	INT32 retVal
	);

QueryKeyInfo(
	INT32 retVal
	);

ReadProContainerDevicePolicyRootFailed(
	INT32 retVal
	);

DevicePolicyRootExistsButReadFailed(
	INT32 retVal
	);

ReadProContainerUserPolicyRootFailed(
	INT32 retVal
	);

UserPolicyRootExistsButReadFailed(
	INT32 retVal
	);

InitializePinPolicyFailed(
	INT32 retVal
	);

InitializeNgcPolicyFailed(
	INT32 retVal
	);

FailedToReadAllowSimpleDevicePasswordPolicy(
	INT32 retVal
	);

FailedToReadDevicePasswordExpirationPolicy(
	INT32 retVal
	);

InvalidExpirationValue(
	INT32 retVal,
	INT32 expiration
	);

FailedToReadDevicePasswordHistoryPolicy(
	INT32 retVal
	);

InvalidHistoryValue(
	INT32 retVal,
	INT32 history
	);

InvalidMinDevicePasswordComplexCharactersValue(
	INT32 retVal
	);

FailedToReadAlphanumericDevicePasswordRequiredPolicy(
	INT32 retVal
	);

FailedToReadMinDevicePasswordComplexCharactersPolicy(
	INT32 retVal
	);

InvalidDevicePasswordLengthValue(
	INT32 retVal,
	INT32 minPasswordLength
	);

FailedToReadDevicePasswordEnabledPolicy(
	INT32 retVal
	);

FailedToReadMinDevicePasswordLengthPolicy(
	INT32 retVal
	);

DeviceLockPolicyNotSupportedBySku(
	INT32 retVal
	);

GpKeyEmpty(
	INT32 retVal
	);

IsKeyEmpty(
	INT32 retVal
	);

ReadGroupPolicyRootFailed(
	INT32 retVal
	);

ReadPolicyValueDataOutOfRange(
	INT32 retVal,
	UNICODESTRING subKey,
	UNICODESTRING valueName
	);

OpenBioPolicyKeyFailed(
	INT32 retVal
	);

RegGetValueW(
	INT32 retVal
	);

RegDeleteValueError(
	UINT32 retVal
	);

RegOpenKeyExWError(
	UINT32 retVal
	);

RegSetValueExWError(
	UINT32 retVal
	);

RegOpenKeyExWFailed(
	UINT32 retVal
	);

RegGetValueWFailed(
	UINT32 retVal
	);

ConvertSidToStringSidW(
	UINT32 retVal
	);

BCryptHashData(
	INT32 retVal
	);

BCryptFinishHash(
	INT32 retVal
	);

BCryptCreateHash(
	INT32 retVal
	);

BCryptOpenAlgorithmProvider(
	INT32 retVal
	);

BCryptGetPropertyHashLength(
	INT32 retVal
	);

CopySidError(
	INT32 retVal
	);

memcpy_sTpmPrivateBlobError(
	INT32 retVal
	);

TpmApiSeal20Ex(
	INT32 retVal
	);

TpmApiCreateContext(
	INT32 retVal
	);

localHashAuthBlobHashingError(
	INT32 retVal
	);

localHashAuthBlobGetSizeError(
	INT32 retVal
	);

Tbsi_GetDeviceInfoError(
	INT32 retVal
	);

UnknownTpmVersion(
	INT32 retVal,
	UINT32 tpmVersion
	);

FveGetExternalKeyBlobRpcError(
	INT32 retVal
	);

FveEscrowEncryptedRecoveryKeyForRetailUnlockRpcError(
	INT32 retVal
	);

StringCbLengthWError(
	INT32 retVal
	);

ConvertStringSidToSidWError(
	UINT32 retVal
	);

NgcTicketCreateForNewKeyClientBind(
	INT32 retVal
	);

c_NgcTicketCreateForNewKey(
	INT32 retVal
	);

TicketCreateForNewKeyInvalidParameter(
	INT32 retVal
	);

ClientRpcRecoverableError(
	INT32 retVal
	);

PathNotDirectory(
	INT32 retVal
	);

GetDirectoryAttributes(
	UINT32 retVal
	);

CreateDirectory(
	INT32 retVal
	);

NoPathElements(
	INT32 retVal
	);

memcpy_sFailed(
	INT32 retVal
	);

LoadStringWFailed(
	UINT32 retVal
	);

StringFromGUID2Failed(
	INT32 retVal,
	GUID guid
	);

DoesTpmSupportNgcIsoCtnr(
	UINT64 PartA_PrivTags,
	BOOLEAN create,
	BOOLEAN flushContext,
	BOOLEAN load,
	BOOLEAN sign,
	BOOLEAN rsaDecrypt,
	BOOLEAN policyCommandCode,
	BOOLEAN readPublic,
	BOOLEAN startAuthSession,
	BOOLEAN policyGetDigest,
	BOOLEAN policySigned,
	BOOLEAN policyOR,
	BOOLEAN unseal,
	BOOLEAN policyTicket,
	BOOLEAN policySecret,
	BOOLEAN certify,
	BOOLEAN rsa,
	BOOLEAN sha256,
	BOOLEAN keyedHash,
	BOOLEAN hmac,
	BOOLEAN rsaSsa,
	BOOLEAN requiredCommands,
	BOOLEAN requiredAlgorithms,
	BOOLEAN tpmIsReady,
	BOOLEAN tpmIsLockedOut,
	BOOLEAN supported
	);

PropertyDataNotValidString(
	INT32 retVal
	);

ParseNgcContainerKeyNameAccountIdMissing(
	INT32 retVal
	);

ParseNgcKeyNameAccountId(
	INT32 retVal
	);

ParseNgcContainerKeyNameTenant(
	INT32 retVal
	);

ParseNgcContainerKeyNameTenantWithNoDomain(
	INT32 retVal
	);

ParseNgcContainerKeyNameDomain(
	INT32 retVal
	);

BuildNgcContainerKeyNameStringInvalidLength(
	INT32 retVal
	);

ParseNgcContainerKeyNameStringInvalidLength(
	INT32 retVal
	);

BuildNgcContainerKeyNameGetTenantLength(
	INT32 retVal
	);

BuildNgcContainerKeyNameGetAccountIdLength(
	INT32 retVal
	);

BuildNgcContainerKeyNameGetDomainLength(
	INT32 retVal
	);

BuildNgcContainerKeyNameNullDomainOrAccountId(
	INT32 retVal
	);

UnsetLogonCredsAvailableRegValue(
	UINT32 retVal
	);

OpenOrCreateLogonCredsAvailableRegKey(
	UINT32 retVal
	);

ConvertSidToStringSid(
	INT32 retVal
	);

GetUserAccountType(
	INT32 retVal
	);

ConvertStringSidToSid(
	UINT32 retVal
	);

LsaLookupUserAccountType(
	INT32 retVal
	);

InvalidSerializationBufferTooSmall(
	INT32 retVal
	);

InvalidSerializationBufferPinTooLarge(
	INT32 retVal
	);

NgcPolicySerializeError(
	INT32 retVal
	);

CredUIPromptForWindowsCredentialsWFailed(
	UINT32 retVal
	);

ConvertStringSecurityDescriptorToSecurityDescriptorWFailed(
	UINT32 retVal
	);

CreateEventWFailed(
	UINT32 retVal
	);

CredUIPromptForWindowsCredentialsWIsNotPresent(
	INT32 retVal
	);

CredUIInvoked(
	HRESULT retVal
	);

StringCchPrintfWFailed(
	INT32 retVal
	);

RpcServerStopGroupDeactivateError(
	INT32 retVal
	);

RpcServerStartGroupActivateError(
	INT32 retVal
	);

RpcServerCreateInterfaceGroupError(
	INT32 retVal
	);

RpcRevertToSelfEx(
	INT32 retVal
	);

RpcImpersonateClient(
	INT32 retVal
	);

RpcClientBindError(
	INT64 retVal
	);

RpcClientCreateBindingHandleError(
	INT32 retVal
	);

NoNewBindAttemptsOnUnrecoverableError(
	INT32 retVal
	);

RpcClientAlreadyBound(
	VOID
	);

RpcClientCreateSecurityDescriptorFailure(
	UINT32 retVal
	);

RpcClientInvalidServerSid(
	UINT32 retVal
	);

RpcClientCannotCopyServerSid(
	UINT32 retVal
	);

CannotMergeUninitializedPolicy(
	INT32 retVal
	);

PolicyNotInitializedBeforeSerialization(
	INT32 retVal
	);

InvalidSerializationInvalidPinPolicyOffset(
	INT32 retVal
	);

InvalidSerializationArithmeticOverflow(
	INT32 retVal
	);

InvalidSerializationPinPolicyLengthOverrun(
	INT32 retVal
	);

NgcPolicyAlreadyInitialized(
	INT32 retVal
	);

InvalidSerializationTooSmall(
	INT32 retVal
	);

NgcPinPolicyAlreadyInitialized(
	INT32 retVal
	);

NgcPolicyValidationFailedInvalidbiometricsPolicy(
	INT32 retVal
	);

NgcPolicyValidationFailedInvalidVersion(
	INT32 retVal
	);

NgcPolicyValidationFailedInvalidAttestationPolicy(
	INT32 retVal
	);

NgcPolicyValidationFailedInvalidSmartCardPolicy(
	INT32 retVal
	);

ConversionFromSmartCardPolicyOptionFailedInvalidValue(
	INT32 retVal
	);

InvalidPinPolicySerializationWrongSizeV3(
	INT32 retVal
	);

InvalidPinPolicySerializationWrongSizeV2(
	INT32 retVal
	);

PinPolicyRulesNotInitializedBeforeSerialization(
	INT32 retVal
	);

InvalidPinPolicySerializationUnsupportedVersion(
	INT32 retVal
	);

PinPolicyRulesAlreadyInitialized(
	INT32 retVal
	);

InvalidPinPolicySerializationWrongSizeV1(
	INT32 retVal
	);

InvalidPinPolicySerializationTooSmall(
	INT32 retVal
	);

ValidationFailedInvalidPinHistoryCount(
	INT32 retVal
	);

ValidationFailedAllCharacterClassesDisallowed(
	INT32 retVal
	);

ValidationFailedInvalidExpiration(
	INT32 retVal
	);

InvalidPinPolicySerializationVersion(
	INT32 retVal
	);

InvalidOtherCharactersPolicyOption(
	INT32 retVal
	);

ValidationFailedInvalidCharacterPolicyOption(
	INT32 retVal
	);

ValidationFailedInvalidMinOrMaxLength(
	INT32 retVal
	);

InvalidLowercaseCharacterPolicyOption(
	INT32 retVal
	);

InvalidUppercaseCharacterPolicyOption(
	INT32 retVal
	);

InvalidSpecialCharactersPolicyOption(
	INT32 retVal
	);

InvalidDigitsPolicyOption(
	INT32 retVal
	);

